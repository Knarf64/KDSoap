// This file is generated by KDAB's kdwsdl2cpp from transformMedia-V1_0_7.wsdl.
// All changes you do to this file will be lost.

//#include "wsdl_transformMedia-V1_0_7.h"
#include "source.h"

#include <QtCore/QRegExp>
#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <QSharedPointer>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>
#include <QDebug>



BMS__JobInfoSelectionType::BMS__JobInfoSelectionType( const Type &type )
{
    mType = type;
}

void BMS__JobInfoSelectionType::setType( Type type )
{
    mType = type;
}

BMS__JobInfoSelectionType::Type BMS__JobInfoSelectionType::type() const
{
    return mType;
}

BMS__JobInfoSelectionType::operator Type() const
{
    return mType;
}

QVariant BMS__JobInfoSelectionType::serialize() const
{
    switch ( mType ) {
        case BMS__JobInfoSelectionType::Mandatory:
            return QString::fromLatin1("mandatory");
        case BMS__JobInfoSelectionType::All:
            return QString::fromLatin1("all");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__JobInfoSelectionType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "mandatory", BMS__JobInfoSelectionType::Mandatory },
    { "all", BMS__JobInfoSelectionType::All }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__JobInfoSelectionType'.", qPrintable(str) );
}

BMS__JobInfoSelectionType::BMS__JobInfoSelectionType()
    : mType(Type(0))
{
}

BMS__JobInfoSelectionType::~BMS__JobInfoSelectionType()
{
}


void BMS__UID::setValue( const QVariant& val )
{
    mValue = val;
}

QVariant BMS__UID::value() const
{
    return mValue;
}

QVariant BMS__UID::serialize() const
{
    return mValue;// converter_simpletype.cpp:425
}

void BMS__UID::deserialize( const QVariant& value )
{
    mValue = value;// converter_simpletype.cpp:430
}

BMS__UID::BMS__UID()
{
}

BMS__UID::~BMS__UID()
{
}


BMS__JobCommandType::BMS__JobCommandType( const Type &type )
{
    mType = type;
}

void BMS__JobCommandType::setType( Type type )
{
    mType = type;
}

BMS__JobCommandType::Type BMS__JobCommandType::type() const
{
    return mType;
}

BMS__JobCommandType::operator Type() const
{
    return mType;
}

QVariant BMS__JobCommandType::serialize() const
{
    switch ( mType ) {
        case BMS__JobCommandType::Cancel:
            return QString::fromLatin1("cancel");
        case BMS__JobCommandType::Pause:
            return QString::fromLatin1("pause");
        case BMS__JobCommandType::Resume:
            return QString::fromLatin1("resume");
        case BMS__JobCommandType::Restart:
            return QString::fromLatin1("restart");
        case BMS__JobCommandType::Stop:
            return QString::fromLatin1("stop");
        case BMS__JobCommandType::Cleanup:
            return QString::fromLatin1("cleanup");
        case BMS__JobCommandType::ModifyPriority:
            return QString::fromLatin1("modifyPriority");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__JobCommandType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[7] = {
    { "cancel", BMS__JobCommandType::Cancel },
    { "pause", BMS__JobCommandType::Pause },
    { "resume", BMS__JobCommandType::Resume },
    { "restart", BMS__JobCommandType::Restart },
    { "stop", BMS__JobCommandType::Stop },
    { "cleanup", BMS__JobCommandType::Cleanup },
    { "modifyPriority", BMS__JobCommandType::ModifyPriority }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 7; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__JobCommandType'.", qPrintable(str) );
}

BMS__JobCommandType::BMS__JobCommandType()
    : mType(Type(0))
{
}

BMS__JobCommandType::~BMS__JobCommandType()
{
}


BMS__PriorityType::BMS__PriorityType( const Type &type )
{
    mType = type;
}

void BMS__PriorityType::setType( Type type )
{
    mType = type;
}

BMS__PriorityType::Type BMS__PriorityType::type() const
{
    return mType;
}

BMS__PriorityType::operator Type() const
{
    return mType;
}

QVariant BMS__PriorityType::serialize() const
{
    switch ( mType ) {
        case BMS__PriorityType::Low:
            return QString::fromLatin1("low");
        case BMS__PriorityType::Medium:
            return QString::fromLatin1("medium");
        case BMS__PriorityType::High:
            return QString::fromLatin1("high");
        case BMS__PriorityType::Urgent:
            return QString::fromLatin1("urgent");
        case BMS__PriorityType::Immediate:
            return QString::fromLatin1("immediate");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__PriorityType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "low", BMS__PriorityType::Low },
    { "medium", BMS__PriorityType::Medium },
    { "high", BMS__PriorityType::High },
    { "urgent", BMS__PriorityType::Urgent },
    { "immediate", BMS__PriorityType::Immediate }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__PriorityType'.", qPrintable(str) );
}

BMS__PriorityType::BMS__PriorityType()
    : mType(Type(0))
{
}

BMS__PriorityType::~BMS__PriorityType()
{
}


BMS__QueueCommandType::BMS__QueueCommandType( const Type &type )
{
    mType = type;
}

void BMS__QueueCommandType::setType( Type type )
{
    mType = type;
}

BMS__QueueCommandType::Type BMS__QueueCommandType::type() const
{
    return mType;
}

BMS__QueueCommandType::operator Type() const
{
    return mType;
}

QVariant BMS__QueueCommandType::serialize() const
{
    switch ( mType ) {
        case BMS__QueueCommandType::Status:
            return QString::fromLatin1("status");
        case BMS__QueueCommandType::Clear:
            return QString::fromLatin1("clear");
        case BMS__QueueCommandType::Stop:
            return QString::fromLatin1("stop");
        case BMS__QueueCommandType::Start:
            return QString::fromLatin1("start");
        case BMS__QueueCommandType::Lock:
            return QString::fromLatin1("lock");
        case BMS__QueueCommandType::Unlock:
            return QString::fromLatin1("unlock");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__QueueCommandType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[6] = {
    { "status", BMS__QueueCommandType::Status },
    { "clear", BMS__QueueCommandType::Clear },
    { "stop", BMS__QueueCommandType::Stop },
    { "start", BMS__QueueCommandType::Start },
    { "lock", BMS__QueueCommandType::Lock },
    { "unlock", BMS__QueueCommandType::Unlock }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 6; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__QueueCommandType'.", qPrintable(str) );
}

BMS__QueueCommandType::BMS__QueueCommandType()
    : mType(Type(0))
{
}

BMS__QueueCommandType::~BMS__QueueCommandType()
{
}


BMS__QueueStatusType::BMS__QueueStatusType( const Type &type )
{
    mType = type;
}

void BMS__QueueStatusType::setType( Type type )
{
    mType = type;
}

BMS__QueueStatusType::Type BMS__QueueStatusType::type() const
{
    return mType;
}

BMS__QueueStatusType::operator Type() const
{
    return mType;
}

QVariant BMS__QueueStatusType::serialize() const
{
    switch ( mType ) {
        case BMS__QueueStatusType::Started:
            return QString::fromLatin1("started");
        case BMS__QueueStatusType::Stopped:
            return QString::fromLatin1("stopped");
        case BMS__QueueStatusType::Locked:
            return QString::fromLatin1("locked");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__QueueStatusType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "started", BMS__QueueStatusType::Started },
    { "stopped", BMS__QueueStatusType::Stopped },
    { "locked", BMS__QueueStatusType::Locked }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__QueueStatusType'.", qPrintable(str) );
}

BMS__QueueStatusType::BMS__QueueStatusType()
    : mType(Type(0))
{
}

BMS__QueueStatusType::~BMS__QueueStatusType()
{
}


BMS__JobStatusType::BMS__JobStatusType( const Type &type )
{
    mType = type;
}

void BMS__JobStatusType::setType( Type type )
{
    mType = type;
}

BMS__JobStatusType::Type BMS__JobStatusType::type() const
{
    return mType;
}

BMS__JobStatusType::operator Type() const
{
    return mType;
}

QVariant BMS__JobStatusType::serialize() const
{
    switch ( mType ) {
        case BMS__JobStatusType::Queued:
            return QString::fromLatin1("queued");
        case BMS__JobStatusType::Running:
            return QString::fromLatin1("running");
        case BMS__JobStatusType::Paused:
            return QString::fromLatin1("paused");
        case BMS__JobStatusType::Completed:
            return QString::fromLatin1("completed");
        case BMS__JobStatusType::Canceled:
            return QString::fromLatin1("canceled");
        case BMS__JobStatusType::Stopped:
            return QString::fromLatin1("stopped");
        case BMS__JobStatusType::Failed:
            return QString::fromLatin1("failed");
        case BMS__JobStatusType::Cleaned:
            return QString::fromLatin1("cleaned");
        case BMS__JobStatusType::Unknown:
            return QString::fromLatin1("unknown");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__JobStatusType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[9] = {
    { "queued", BMS__JobStatusType::Queued },
    { "running", BMS__JobStatusType::Running },
    { "paused", BMS__JobStatusType::Paused },
    { "completed", BMS__JobStatusType::Completed },
    { "canceled", BMS__JobStatusType::Canceled },
    { "stopped", BMS__JobStatusType::Stopped },
    { "failed", BMS__JobStatusType::Failed },
    { "cleaned", BMS__JobStatusType::Cleaned },
    { "unknown", BMS__JobStatusType::Unknown }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 9; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__JobStatusType'.", qPrintable(str) );
}

BMS__JobStatusType::BMS__JobStatusType()
    : mType(Type(0))
{
}

BMS__JobStatusType::~BMS__JobStatusType()
{
}


TFMS__TransformErrorCodeType::TFMS__TransformErrorCodeType( const Type &type )
{
    mType = type;
}

void TFMS__TransformErrorCodeType::setType( Type type )
{
    mType = type;
}

TFMS__TransformErrorCodeType::Type TFMS__TransformErrorCodeType::type() const
{
    return mType;
}

TFMS__TransformErrorCodeType::operator Type() const
{
    return mType;
}

QVariant TFMS__TransformErrorCodeType::serialize() const
{
    switch ( mType ) {
        case TFMS__TransformErrorCodeType::SVC_S02_0001:
            return QString::fromLatin1("SVC_S02_0001");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void TFMS__TransformErrorCodeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[1] = {
    { "SVC_S02_0001", TFMS__TransformErrorCodeType::SVC_S02_0001 }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 1; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'TFMS__TransformErrorCodeType'.", qPrintable(str) );
}

TFMS__TransformErrorCodeType::TFMS__TransformErrorCodeType()
    : mType(Type(0))
{
}

TFMS__TransformErrorCodeType::~TFMS__TransformErrorCodeType()
{
}


void BMS__PercentageProcessedCompleted::setValue( quint64 value )
{
    bool rangeOk = true;

    rangeOk = rangeOk && ((value) <= 100);

    if (!rangeOk)
        qDebug( "Invalid range in BMS__PercentageProcessedCompleted::setValue()" );

    mValue = value;
}

quint64 BMS__PercentageProcessedCompleted::value() const
{
    return mValue;
}

BMS__PercentageProcessedCompleted::BMS__PercentageProcessedCompleted( quint64 value )
{
    setValue(value);
}

BMS__PercentageProcessedCompleted::operator quint64() const
{
    return mValue;
}

QVariant BMS__PercentageProcessedCompleted::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void BMS__PercentageProcessedCompleted::deserialize( const QVariant& value )
{
    mValue = value.value<quint64>();// converter_simpletype.cpp:366
}

BMS__PercentageProcessedCompleted::BMS__PercentageProcessedCompleted()
    : mValue(0)
{
}

BMS__PercentageProcessedCompleted::~BMS__PercentageProcessedCompleted()
{
}


BMS__ErrorCodeType::BMS__ErrorCodeType( const Type &type )
{
    mType = type;
}

void BMS__ErrorCodeType::setType( Type type )
{
    mType = type;
}

BMS__ErrorCodeType::Type BMS__ErrorCodeType::type() const
{
    return mType;
}

BMS__ErrorCodeType::operator Type() const
{
    return mType;
}

QVariant BMS__ErrorCodeType::serialize() const
{
    switch ( mType ) {
        case BMS__ErrorCodeType::INF_S00_0001:
            return QString::fromLatin1("INF_S00_0001");
        case BMS__ErrorCodeType::INF_S00_0002:
            return QString::fromLatin1("INF_S00_0002");
        case BMS__ErrorCodeType::INF_S00_0003:
            return QString::fromLatin1("INF_S00_0003");
        case BMS__ErrorCodeType::INF_S00_0004:
            return QString::fromLatin1("INF_S00_0004");
        case BMS__ErrorCodeType::INF_S00_0005:
            return QString::fromLatin1("INF_S00_0005");
        case BMS__ErrorCodeType::INF_S00_0006:
            return QString::fromLatin1("INF_S00_0006");
        case BMS__ErrorCodeType::SVC_S00_0001:
            return QString::fromLatin1("SVC_S00_0001");
        case BMS__ErrorCodeType::SVC_S00_0002:
            return QString::fromLatin1("SVC_S00_0002");
        case BMS__ErrorCodeType::SVC_S00_0003:
            return QString::fromLatin1("SVC_S00_0003");
        case BMS__ErrorCodeType::SVC_S00_0004:
            return QString::fromLatin1("SVC_S00_0004");
        case BMS__ErrorCodeType::SVC_S00_0005:
            return QString::fromLatin1("SVC_S00_0005");
        case BMS__ErrorCodeType::SVC_S00_0006:
            return QString::fromLatin1("SVC_S00_0006");
        case BMS__ErrorCodeType::SVC_S00_0007:
            return QString::fromLatin1("SVC_S00_0007");
        case BMS__ErrorCodeType::SVC_S00_0008:
            return QString::fromLatin1("SVC_S00_0008");
        case BMS__ErrorCodeType::SVC_S00_0009:
            return QString::fromLatin1("SVC_S00_0009");
        case BMS__ErrorCodeType::SVC_S00_0010:
            return QString::fromLatin1("SVC_S00_0010");
        case BMS__ErrorCodeType::SVC_S00_0011:
            return QString::fromLatin1("SVC_S00_0011");
        case BMS__ErrorCodeType::SVC_S00_0012:
            return QString::fromLatin1("SVC_S00_0012");
        case BMS__ErrorCodeType::SVC_S00_0013:
            return QString::fromLatin1("SVC_S00_0013");
        case BMS__ErrorCodeType::SVC_S00_0014:
            return QString::fromLatin1("SVC_S00_0014");
        case BMS__ErrorCodeType::SVC_S00_0015:
            return QString::fromLatin1("SVC_S00_0015");
        case BMS__ErrorCodeType::SVC_S00_0016:
            return QString::fromLatin1("SVC_S00_0016");
        case BMS__ErrorCodeType::SVC_S00_0017:
            return QString::fromLatin1("SVC_S00_0017");
        case BMS__ErrorCodeType::SVC_S00_0018:
            return QString::fromLatin1("SVC_S00_0018");
        case BMS__ErrorCodeType::DAT_S00_0001:
            return QString::fromLatin1("DAT_S00_0001");
        case BMS__ErrorCodeType::DAT_S00_0002:
            return QString::fromLatin1("DAT_S00_0002");
        case BMS__ErrorCodeType::DAT_S00_0003:
            return QString::fromLatin1("DAT_S00_0003");
        case BMS__ErrorCodeType::DAT_S00_0004:
            return QString::fromLatin1("DAT_S00_0004");
        case BMS__ErrorCodeType::DAT_S00_0005:
            return QString::fromLatin1("DAT_S00_0005");
        case BMS__ErrorCodeType::DAT_S00_0006:
            return QString::fromLatin1("DAT_S00_0006");
        case BMS__ErrorCodeType::DAT_S00_0007:
            return QString::fromLatin1("DAT_S00_0007");
        case BMS__ErrorCodeType::DAT_S00_0008:
            return QString::fromLatin1("DAT_S00_0008");
        case BMS__ErrorCodeType::DAT_S00_0009:
            return QString::fromLatin1("DAT_S00_0009");
        case BMS__ErrorCodeType::DAT_S00_0010:
            return QString::fromLatin1("DAT_S00_0010");
        case BMS__ErrorCodeType::EXT_S00_0000:
            return QString::fromLatin1("EXT_S00_0000");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__ErrorCodeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[35] = {
    { "INF_S00_0001", BMS__ErrorCodeType::INF_S00_0001 },
    { "INF_S00_0002", BMS__ErrorCodeType::INF_S00_0002 },
    { "INF_S00_0003", BMS__ErrorCodeType::INF_S00_0003 },
    { "INF_S00_0004", BMS__ErrorCodeType::INF_S00_0004 },
    { "INF_S00_0005", BMS__ErrorCodeType::INF_S00_0005 },
    { "INF_S00_0006", BMS__ErrorCodeType::INF_S00_0006 },
    { "SVC_S00_0001", BMS__ErrorCodeType::SVC_S00_0001 },
    { "SVC_S00_0002", BMS__ErrorCodeType::SVC_S00_0002 },
    { "SVC_S00_0003", BMS__ErrorCodeType::SVC_S00_0003 },
    { "SVC_S00_0004", BMS__ErrorCodeType::SVC_S00_0004 },
    { "SVC_S00_0005", BMS__ErrorCodeType::SVC_S00_0005 },
    { "SVC_S00_0006", BMS__ErrorCodeType::SVC_S00_0006 },
    { "SVC_S00_0007", BMS__ErrorCodeType::SVC_S00_0007 },
    { "SVC_S00_0008", BMS__ErrorCodeType::SVC_S00_0008 },
    { "SVC_S00_0009", BMS__ErrorCodeType::SVC_S00_0009 },
    { "SVC_S00_0010", BMS__ErrorCodeType::SVC_S00_0010 },
    { "SVC_S00_0011", BMS__ErrorCodeType::SVC_S00_0011 },
    { "SVC_S00_0012", BMS__ErrorCodeType::SVC_S00_0012 },
    { "SVC_S00_0013", BMS__ErrorCodeType::SVC_S00_0013 },
    { "SVC_S00_0014", BMS__ErrorCodeType::SVC_S00_0014 },
    { "SVC_S00_0015", BMS__ErrorCodeType::SVC_S00_0015 },
    { "SVC_S00_0016", BMS__ErrorCodeType::SVC_S00_0016 },
    { "SVC_S00_0017", BMS__ErrorCodeType::SVC_S00_0017 },
    { "SVC_S00_0018", BMS__ErrorCodeType::SVC_S00_0018 },
    { "DAT_S00_0001", BMS__ErrorCodeType::DAT_S00_0001 },
    { "DAT_S00_0002", BMS__ErrorCodeType::DAT_S00_0002 },
    { "DAT_S00_0003", BMS__ErrorCodeType::DAT_S00_0003 },
    { "DAT_S00_0004", BMS__ErrorCodeType::DAT_S00_0004 },
    { "DAT_S00_0005", BMS__ErrorCodeType::DAT_S00_0005 },
    { "DAT_S00_0006", BMS__ErrorCodeType::DAT_S00_0006 },
    { "DAT_S00_0007", BMS__ErrorCodeType::DAT_S00_0007 },
    { "DAT_S00_0008", BMS__ErrorCodeType::DAT_S00_0008 },
    { "DAT_S00_0009", BMS__ErrorCodeType::DAT_S00_0009 },
    { "DAT_S00_0010", BMS__ErrorCodeType::DAT_S00_0010 },
    { "EXT_S00_0000", BMS__ErrorCodeType::EXT_S00_0000 }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 35; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__ErrorCodeType'.", qPrintable(str) );
}

BMS__ErrorCodeType::BMS__ErrorCodeType()
    : mType(Type(0))
{
}

BMS__ErrorCodeType::~BMS__ErrorCodeType()
{
}


void BMS__RevisionIDType::setValue( const QString& value )
{
    mValue = value;
}

QString BMS__RevisionIDType::value() const
{
    return mValue;
}

BMS__RevisionIDType::BMS__RevisionIDType( const QString& value )
{
    setValue(value);
}

BMS__RevisionIDType::operator QString() const
{
    return mValue;
}

QVariant BMS__RevisionIDType::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void BMS__RevisionIDType::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

BMS__RevisionIDType::BMS__RevisionIDType()
{
}

BMS__RevisionIDType::~BMS__RevisionIDType()
{
}


BMS__AudioSampleType::BMS__AudioSampleType( const Type &type )
{
    mType = type;
}

void BMS__AudioSampleType::setType( Type type )
{
    mType = type;
}

BMS__AudioSampleType::Type BMS__AudioSampleType::type() const
{
    return mType;
}

BMS__AudioSampleType::operator Type() const
{
    return mType;
}

QVariant BMS__AudioSampleType::serialize() const
{
    switch ( mType ) {
        case BMS__AudioSampleType::Float:
            return QString::fromLatin1("float");
        case BMS__AudioSampleType::Integer:
            return QString::fromLatin1("integer");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__AudioSampleType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "float", BMS__AudioSampleType::Float },
    { "integer", BMS__AudioSampleType::Integer }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__AudioSampleType'.", qPrintable(str) );
}

BMS__AudioSampleType::BMS__AudioSampleType()
    : mType(Type(0))
{
}

BMS__AudioSampleType::~BMS__AudioSampleType()
{
}


BMS__BitRateModeType::BMS__BitRateModeType( const Type &type )
{
    mType = type;
}

void BMS__BitRateModeType::setType( Type type )
{
    mType = type;
}

BMS__BitRateModeType::Type BMS__BitRateModeType::type() const
{
    return mType;
}

BMS__BitRateModeType::operator Type() const
{
    return mType;
}

QVariant BMS__BitRateModeType::serialize() const
{
    switch ( mType ) {
        case BMS__BitRateModeType::Constant:
            return QString::fromLatin1("constant");
        case BMS__BitRateModeType::Variable:
            return QString::fromLatin1("variable");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__BitRateModeType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "constant", BMS__BitRateModeType::Constant },
    { "variable", BMS__BitRateModeType::Variable }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__BitRateModeType'.", qPrintable(str) );
}

BMS__BitRateModeType::BMS__BitRateModeType()
    : mType(Type(0))
{
}

BMS__BitRateModeType::~BMS__BitRateModeType()
{
}


BMS__ScanningFormatType::BMS__ScanningFormatType( const Type &type )
{
    mType = type;
}

void BMS__ScanningFormatType::setType( Type type )
{
    mType = type;
}

BMS__ScanningFormatType::Type BMS__ScanningFormatType::type() const
{
    return mType;
}

BMS__ScanningFormatType::operator Type() const
{
    return mType;
}

QVariant BMS__ScanningFormatType::serialize() const
{
    switch ( mType ) {
        case BMS__ScanningFormatType::Interlaced:
            return QString::fromLatin1("interlaced");
        case BMS__ScanningFormatType::Progressive:
            return QString::fromLatin1("progressive");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__ScanningFormatType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "interlaced", BMS__ScanningFormatType::Interlaced },
    { "progressive", BMS__ScanningFormatType::Progressive }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__ScanningFormatType'.", qPrintable(str) );
}

BMS__ScanningFormatType::BMS__ScanningFormatType()
    : mType(Type(0))
{
}

BMS__ScanningFormatType::~BMS__ScanningFormatType()
{
}


BMS__StorageTypes::BMS__StorageTypes( const Type &type )
{
    mType = type;
}

void BMS__StorageTypes::setType( Type type )
{
    mType = type;
}

BMS__StorageTypes::Type BMS__StorageTypes::type() const
{
    return mType;
}

BMS__StorageTypes::operator Type() const
{
    return mType;
}

QVariant BMS__StorageTypes::serialize() const
{
    switch ( mType ) {
        case BMS__StorageTypes::Online:
            return QString::fromLatin1("online");
        case BMS__StorageTypes::Offline:
            return QString::fromLatin1("offline");
        case BMS__StorageTypes::Hsm:
            return QString::fromLatin1("hsm");
        case BMS__StorageTypes::Archive:
            return QString::fromLatin1("archive");
        case BMS__StorageTypes::Playout:
            return QString::fromLatin1("playout");
        case BMS__StorageTypes::Other:
            return QString::fromLatin1("other");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__StorageTypes::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[6] = {
    { "online", BMS__StorageTypes::Online },
    { "offline", BMS__StorageTypes::Offline },
    { "hsm", BMS__StorageTypes::Hsm },
    { "archive", BMS__StorageTypes::Archive },
    { "playout", BMS__StorageTypes::Playout },
    { "other", BMS__StorageTypes::Other }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 6; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__StorageTypes'.", qPrintable(str) );
}

BMS__StorageTypes::BMS__StorageTypes()
    : mType(Type(0))
{
}

BMS__StorageTypes::~BMS__StorageTypes()
{
}


void BMS__TimecodeDuration::setValue( const QString& value )
{
    bool rangeOk = true;

    QRegExp exp( QString::fromLatin1("[0-9][0-9]:[0-5][0-9]:[0-5][0-9](([.,])|([:;]))[0-2][0-9]") );
    rangeOk = rangeOk && exp.exactMatch( (value) );

    if (!rangeOk)
        qDebug( "Invalid range in BMS__TimecodeDuration::setValue()" );

    mValue = value;
}

QString BMS__TimecodeDuration::value() const
{
    return mValue;
}

BMS__TimecodeDuration::BMS__TimecodeDuration( const QString& value )
{
    setValue(value);
}

BMS__TimecodeDuration::operator QString() const
{
    return mValue;
}

QVariant BMS__TimecodeDuration::serialize() const
{
    return QVariant::fromValue(mValue);// converter_simpletype.cpp:365
}

void BMS__TimecodeDuration::deserialize( const QVariant& value )
{
    mValue = value.value<QString>();// converter_simpletype.cpp:366
}

BMS__TimecodeDuration::BMS__TimecodeDuration()
{
}

BMS__TimecodeDuration::~BMS__TimecodeDuration()
{
}


BMS__ScanningOrderType::BMS__ScanningOrderType( const Type &type )
{
    mType = type;
}

void BMS__ScanningOrderType::setType( Type type )
{
    mType = type;
}

BMS__ScanningOrderType::Type BMS__ScanningOrderType::type() const
{
    return mType;
}

BMS__ScanningOrderType::operator Type() const
{
    return mType;
}

QVariant BMS__ScanningOrderType::serialize() const
{
    switch ( mType ) {
        case BMS__ScanningOrderType::Top:
            return QString::fromLatin1("top");
        case BMS__ScanningOrderType::Bottom:
            return QString::fromLatin1("bottom");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__ScanningOrderType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "top", BMS__ScanningOrderType::Top },
    { "bottom", BMS__ScanningOrderType::Bottom }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__ScanningOrderType'.", qPrintable(str) );
}

BMS__ScanningOrderType::BMS__ScanningOrderType()
    : mType(Type(0))
{
}

BMS__ScanningOrderType::~BMS__ScanningOrderType()
{
}


BMS__HashFunctionTypes::BMS__HashFunctionTypes( const Type &type )
{
    mType = type;
}

void BMS__HashFunctionTypes::setType( Type type )
{
    mType = type;
}

BMS__HashFunctionTypes::Type BMS__HashFunctionTypes::type() const
{
    return mType;
}

BMS__HashFunctionTypes::operator Type() const
{
    return mType;
}

QVariant BMS__HashFunctionTypes::serialize() const
{
    switch ( mType ) {
        case BMS__HashFunctionTypes::CRC32:
            return QString::fromLatin1("CRC32");
        case BMS__HashFunctionTypes::CRC64:
            return QString::fromLatin1("CRC64");
        case BMS__HashFunctionTypes::MD5:
            return QString::fromLatin1("MD5");
        case BMS__HashFunctionTypes::SHA1:
            return QString::fromLatin1("SHA1");
        case BMS__HashFunctionTypes::SHA256:
            return QString::fromLatin1("SHA256");
        case BMS__HashFunctionTypes::SHA384:
            return QString::fromLatin1("SHA384");
        case BMS__HashFunctionTypes::SHA512:
            return QString::fromLatin1("SHA512");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void BMS__HashFunctionTypes::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[7] = {
    { "CRC32", BMS__HashFunctionTypes::CRC32 },
    { "CRC64", BMS__HashFunctionTypes::CRC64 },
    { "MD5", BMS__HashFunctionTypes::MD5 },
    { "SHA1", BMS__HashFunctionTypes::SHA1 },
    { "SHA256", BMS__HashFunctionTypes::SHA256 },
    { "SHA384", BMS__HashFunctionTypes::SHA384 },
    { "SHA512", BMS__HashFunctionTypes::SHA512 }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 7; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'BMS__HashFunctionTypes'.", qPrintable(str) );
}

BMS__HashFunctionTypes::BMS__HashFunctionTypes()
    : mType(Type(0))
{
}

BMS__HashFunctionTypes::~BMS__HashFunctionTypes()
{
}


class BMS__ContainerFormat::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
};

void BMS__ContainerFormat::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString BMS__ContainerFormat::value() const
{
    return d_ptr->mValue;
}

BMS__ContainerFormat::BMS__ContainerFormat( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__ContainerFormat::operator QString() const
{
    return d_ptr->mValue;
}

KDSoapValue BMS__ContainerFormat::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("containerFormat"));// converter_complextype.cpp:385
    return mainValue;
}

void BMS__ContainerFormat::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// converter_complextype.cpp:286
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__ContainerFormat::BMS__ContainerFormat()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ContainerFormat::~BMS__ContainerFormat()
{
}

BMS__ContainerFormat::BMS__ContainerFormat( const BMS__ContainerFormat& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ContainerFormat&  BMS__ContainerFormat::operator=( const BMS__ContainerFormat& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__QueryJobRequestType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__JobInfoSelectionType mJobInfoSelection;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__QueryJobRequestType::PrivateDPtr::PrivateDPtr()
    : mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__QueryJobRequestType::setJobInfoSelection( const BMS__JobInfoSelectionType& jobInfoSelection )
{
    d_ptr->mJobInfoSelection = jobInfoSelection;
}

BMS__JobInfoSelectionType BMS__QueryJobRequestType::jobInfoSelection() const
{
    return d_ptr->mJobInfoSelection;
}

void BMS__QueryJobRequestType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__QueryJobRequestType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__QueryJobRequestType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__QueryJobRequestType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__QueryJobRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("QueryJobRequestType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueJobInfoSelection(QString::fromLatin1("jobInfoSelection"), d_ptr->mJobInfoSelection.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("JobInfoSelectionType"));// elementargumentserializer.cpp:99
    _valueJobInfoSelection.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueJobInfoSelection.setQualified(true);
    args.append(_valueJobInfoSelection);// elementargumentserializer.cpp:111
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__QueryJobRequestType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("jobInfoSelection")) {// converter_complextype.cpp:273
            d_ptr->mJobInfoSelection.deserialize(val.value());// converter_complextype.cpp:292
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__QueryJobRequestType::BMS__QueryJobRequestType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__QueryJobRequestType::~BMS__QueryJobRequestType()
{
}

BMS__QueryJobRequestType *BMS__QueryJobRequestType::_kd_clone() const
{
    return new BMS__QueryJobRequestType(*this);
}

BMS__QueryJobRequestType::BMS__QueryJobRequestType( const BMS__QueryJobRequestType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__QueryJobRequestType&  BMS__QueryJobRequestType::operator=( const BMS__QueryJobRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__DescriptionsType::PrivateDPtr : public QSharedData
{
public:
    QList< BMS__DescriptionType > mDescription;
};

void BMS__DescriptionsType::setDescription( const QList< BMS__DescriptionType >& description )
{
    d_ptr->mDescription = description;
}

QList< BMS__DescriptionType > BMS__DescriptionsType::description() const
{
    return d_ptr->mDescription;
}

KDSoapValue BMS__DescriptionsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("DescriptionsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mDescription.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueDescription(d_ptr->mDescription.at(i).serialize(QString::fromLatin1("description")));// elementargumentserializer.cpp:91
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDescription.setQualified(true);
        args.append(_valueDescription);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__DescriptionsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("description")) {// converter_complextype.cpp:273
            BMS__DescriptionType mDescriptionTemp;// converter_complextype.cpp:331
            mDescriptionTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mDescription.append(mDescriptionTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__DescriptionsType::BMS__DescriptionsType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__DescriptionsType::~BMS__DescriptionsType()
{
}

BMS__DescriptionsType::BMS__DescriptionsType( const BMS__DescriptionsType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__DescriptionsType&  BMS__DescriptionsType::operator=( const BMS__DescriptionsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__HashType::PrivateDPtr : public QSharedData
{
public:
    BMS__HashFunctionType mHashFunction;
    QByteArray mValue;
};

void BMS__HashType::setHashFunction( const BMS__HashFunctionType& hashFunction )
{
    d_ptr->mHashFunction = hashFunction;
}

BMS__HashFunctionType BMS__HashType::hashFunction() const
{
    return d_ptr->mHashFunction;
}

void BMS__HashType::setValue( const QByteArray& value )
{
    d_ptr->mValue = value;
}

QByteArray BMS__HashType::value() const
{
    return d_ptr->mValue;
}

KDSoapValue BMS__HashType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("HashType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueHashFunction(d_ptr->mHashFunction.serialize(QString::fromLatin1("hashFunction")));// elementargumentserializer.cpp:91
    _valueHashFunction.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueHashFunction.setQualified(true);
    args.append(_valueHashFunction);// elementargumentserializer.cpp:111
    KDSoapValue _valueValue(QString::fromLatin1("value"), QString::fromLatin1(d_ptr->mValue.toHex().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("hexBinary"));// elementargumentserializer.cpp:97
    _valueValue.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueValue.setQualified(true);
    args.append(_valueValue);// elementargumentserializer.cpp:111
    return mainValue;
}

void BMS__HashType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("hashFunction")) {// converter_complextype.cpp:273
            d_ptr->mHashFunction.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("value")) {// converter_complextype.cpp:273
            d_ptr->mValue = QByteArray::fromHex(val.value().toString().toLatin1());// converter_complextype.cpp:286
        }
    }
}

BMS__HashType::BMS__HashType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__HashType::~BMS__HashType()
{
}

BMS__HashType::BMS__HashType( const BMS__HashType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__HashType&  BMS__HashType::operator=( const BMS__HashType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__HashFunctionType::PrivateDPtr : public QSharedData
{
public:
    BMS__HashFunctionTypes mValue;
};

void BMS__HashFunctionType::setValue( const BMS__HashFunctionTypes& value )
{
    d_ptr->mValue = value;
}

BMS__HashFunctionTypes BMS__HashFunctionType::value() const
{
    return d_ptr->mValue;
}

BMS__HashFunctionType::BMS__HashFunctionType( const BMS__HashFunctionTypes& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__HashFunctionType::operator BMS__HashFunctionTypes() const
{
    return d_ptr->mValue;
}

KDSoapValue BMS__HashFunctionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, d_ptr->mValue.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("HashFunctionType"));// converter_complextype.cpp:385
    return mainValue;
}

void BMS__HashFunctionType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue.deserialize(mainValue.value());// converter_complextype.cpp:292
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__HashFunctionType::BMS__HashFunctionType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__HashFunctionType::~BMS__HashFunctionType()
{
}

BMS__HashFunctionType::BMS__HashFunctionType( const BMS__HashFunctionType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__HashFunctionType&  BMS__HashFunctionType::operator=( const BMS__HashFunctionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__MimeType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
};

void BMS__MimeType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString BMS__MimeType::value() const
{
    return d_ptr->mValue;
}

BMS__MimeType::BMS__MimeType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__MimeType::operator QString() const
{
    return d_ptr->mValue;
}

KDSoapValue BMS__MimeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("mimeType"));// converter_complextype.cpp:385
    return mainValue;
}

void BMS__MimeType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// converter_complextype.cpp:286
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__MimeType::BMS__MimeType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__MimeType::~BMS__MimeType()
{
}

BMS__MimeType::BMS__MimeType( const BMS__MimeType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__MimeType&  BMS__MimeType::operator=( const BMS__MimeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ExtensionGroup::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< KDSoapValue > mAny;
    bool mAny_nil;
};

BMS__ExtensionGroup::PrivateDPtr::PrivateDPtr()
    : mAny_nil(true)
{
}


void BMS__ExtensionGroup::setAny( const QList< KDSoapValue >& any )
{
    d_ptr->mAny_nil = false;// converter_complextype.cpp:244
    d_ptr->mAny = any;
}

QList< KDSoapValue > BMS__ExtensionGroup::any() const
{
    return d_ptr->mAny;
}

KDSoapValue BMS__ExtensionGroup::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ExtensionGroup"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:475
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:75
        }
    }
    return mainValue;
}

void BMS__ExtensionGroup::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        {// converter_complextype.cpp:271
            d_ptr->mAny.append(val);
        }
    }
}

BMS__ExtensionGroup::BMS__ExtensionGroup()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ExtensionGroup::~BMS__ExtensionGroup()
{
}

BMS__ExtensionGroup::BMS__ExtensionGroup( const BMS__ExtensionGroup& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ExtensionGroup&  BMS__ExtensionGroup::operator=( const BMS__ExtensionGroup& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ResourceReferenceType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__ResourceIDType mResourceID;
    BMS__RevisionIDType mRevisionID;
    bool mRevisionID_nil;
    QString mLocation;
    bool mLocation_nil;
};

BMS__ResourceReferenceType::PrivateDPtr::PrivateDPtr()
    : mRevisionID_nil(true), mLocation_nil(true)
{
}


void BMS__ResourceReferenceType::setResourceID( const BMS__ResourceIDType& resourceID )
{
    d_ptr->mResourceID = resourceID;
}

BMS__ResourceIDType BMS__ResourceReferenceType::resourceID() const
{
    return d_ptr->mResourceID;
}

void BMS__ResourceReferenceType::setRevisionID( const BMS__RevisionIDType& revisionID )
{
    d_ptr->mRevisionID_nil = false;// converter_complextype.cpp:244
    d_ptr->mRevisionID = revisionID;
}

BMS__RevisionIDType BMS__ResourceReferenceType::revisionID() const
{
    return d_ptr->mRevisionID;
}

void BMS__ResourceReferenceType::setLocation( const QString& location )
{
    d_ptr->mLocation_nil = false;// converter_complextype.cpp:244
    d_ptr->mLocation = location;
}

QString BMS__ResourceReferenceType::location() const
{
    return d_ptr->mLocation;
}

KDSoapValue BMS__ResourceReferenceType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ResourceReferenceType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueResourceID(QString::fromLatin1("resourceID"), d_ptr->mResourceID.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ResourceIDType"));// elementargumentserializer.cpp:99
    _valueResourceID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueResourceID.setQualified(true);
    args.append(_valueResourceID);// elementargumentserializer.cpp:111
    if (!d_ptr->mRevisionID_nil) {
        KDSoapValue _valueRevisionID(QString::fromLatin1("revisionID"), d_ptr->mRevisionID.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("RevisionIDType"));// elementargumentserializer.cpp:99
        _valueRevisionID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueRevisionID.setQualified(true);
        if (!_valueRevisionID.isNil())
        args.append(_valueRevisionID);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mLocation_nil) {
        KDSoapValue _valueLocation(QString::fromLatin1("location"), QVariant::fromValue(d_ptr->mLocation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueLocation.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueLocation.setQualified(true);
        if (!_valueLocation.isNil())
        args.append(_valueLocation);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ResourceReferenceType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("resourceID")) {// converter_complextype.cpp:273
            d_ptr->mResourceID.deserialize(val.value());// converter_complextype.cpp:292
        }
        else if (name == QLatin1String("revisionID")) {// converter_complextype.cpp:273
            d_ptr->mRevisionID.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mRevisionID_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("location")) {// converter_complextype.cpp:273
            d_ptr->mLocation = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mLocation_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__ResourceReferenceType::BMS__ResourceReferenceType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ResourceReferenceType::~BMS__ResourceReferenceType()
{
}

BMS__ResourceReferenceType *BMS__ResourceReferenceType::_kd_clone() const
{
    return new BMS__ResourceReferenceType(*this);
}

BMS__ResourceReferenceType::BMS__ResourceReferenceType( const BMS__ResourceReferenceType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ResourceReferenceType&  BMS__ResourceReferenceType::operator=( const BMS__ResourceReferenceType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__BMContentFormatsType::PrivateDPtr : public QSharedData
{
public:
    QList< BMS__BMContentFormatType > mBmContentFormat;
};

void BMS__BMContentFormatsType::setBmContentFormat( const QList< BMS__BMContentFormatType >& bmContentFormat )
{
    d_ptr->mBmContentFormat = bmContentFormat;
}

QList< BMS__BMContentFormatType > BMS__BMContentFormatsType::bmContentFormat() const
{
    return d_ptr->mBmContentFormat;
}

KDSoapValue BMS__BMContentFormatsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMContentFormatsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mBmContentFormat.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueBmContentFormat(d_ptr->mBmContentFormat.at(i).serialize(QString::fromLatin1("bmContentFormat")));// elementargumentserializer.cpp:91
        _valueBmContentFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBmContentFormat.setQualified(true);
        args.append(_valueBmContentFormat);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__BMContentFormatsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("bmContentFormat")) {// converter_complextype.cpp:273
            BMS__BMContentFormatType mBmContentFormatTemp;// converter_complextype.cpp:331
            mBmContentFormatTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mBmContentFormat.append(mBmContentFormatTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__BMContentFormatsType::BMS__BMContentFormatsType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMContentFormatsType::~BMS__BMContentFormatsType()
{
}

BMS__BMContentFormatsType::BMS__BMContentFormatsType( const BMS__BMContentFormatsType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__BMContentFormatsType&  BMS__BMContentFormatsType::operator=( const BMS__BMContentFormatsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__TransferAtomType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mDestination;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__TransferAtomType::PrivateDPtr::PrivateDPtr()
    : mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__TransferAtomType::setDestination( const QString& destination )
{
    d_ptr->mDestination = destination;
}

QString BMS__TransferAtomType::destination() const
{
    return d_ptr->mDestination;
}

void BMS__TransferAtomType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__TransferAtomType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__TransferAtomType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__TransferAtomType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__TransferAtomType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("TransferAtomType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueDestination(QString::fromLatin1("destination"), QVariant::fromValue(d_ptr->mDestination), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
    _valueDestination.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueDestination.setQualified(true);
    args.append(_valueDestination);// elementargumentserializer.cpp:111
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__TransferAtomType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("destination")) {// converter_complextype.cpp:273
            d_ptr->mDestination = val.value().value<QString>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__TransferAtomType::BMS__TransferAtomType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__TransferAtomType::~BMS__TransferAtomType()
{
}

BMS__TransferAtomType::BMS__TransferAtomType( const BMS__TransferAtomType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__TransferAtomType&  BMS__TransferAtomType::operator=( const BMS__TransferAtomType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}

class TFMS__TransformResponseType::PrivateDPtr : public QSharedData
{
public:
    TFMS__TransformJobType mTransformJob;
};

void TFMS__TransformResponseType::setTransformJob( const TFMS__TransformJobType& transformJob )
{
    d_ptr->mTransformJob = transformJob;
}

TFMS__TransformJobType TFMS__TransformResponseType::transformJob() const
{
    return d_ptr->mTransformJob;
}

KDSoapValue TFMS__TransformResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("TransformResponseType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueTransformJob(d_ptr->mTransformJob.serialize(QString::fromLatin1("transformJob")));// elementargumentserializer.cpp:91
    _valueTransformJob.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformJob.setQualified(true);
    args.append(_valueTransformJob);// elementargumentserializer.cpp:111
    return mainValue;
}

void TFMS__TransformResponseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("transformJob")) {// converter_complextype.cpp:273
            d_ptr->mTransformJob.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

TFMS__TransformResponseType::TFMS__TransformResponseType()
    : d_ptr(new PrivateDPtr)
{
}

TFMS__TransformResponseType::~TFMS__TransformResponseType()
{
}

TFMS__TransformResponseType::TFMS__TransformResponseType( const TFMS__TransformResponseType& other )
    : d_ptr( other.d_ptr )
{
}

TFMS__TransformResponseType&  TFMS__TransformResponseType::operator=( const TFMS__TransformResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__CaptioningFormatType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mValue;
    QString mCaptioningSourceUri;
    bool mCaptioningSourceUri_nil;
    QString mLanguage;
    bool mLanguage_nil;
};

BMS__CaptioningFormatType::PrivateDPtr::PrivateDPtr()
    : mCaptioningSourceUri_nil(true), mLanguage_nil(true)
{
}


void BMS__CaptioningFormatType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString BMS__CaptioningFormatType::value() const
{
    return d_ptr->mValue;
}

BMS__CaptioningFormatType::BMS__CaptioningFormatType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__CaptioningFormatType::operator QString() const
{
    return d_ptr->mValue;
}

void BMS__CaptioningFormatType::setCaptioningSourceUri( const QString& captioningSourceUri )
{
    d_ptr->mCaptioningSourceUri_nil = false;// converter_complextype.cpp:244
    d_ptr->mCaptioningSourceUri = captioningSourceUri;
}

QString BMS__CaptioningFormatType::captioningSourceUri() const
{
    return d_ptr->mCaptioningSourceUri;
}

void BMS__CaptioningFormatType::setLanguage( const QString& language )
{
    d_ptr->mLanguage_nil = false;// converter_complextype.cpp:244
    d_ptr->mLanguage = language;
}

QString BMS__CaptioningFormatType::language() const
{
    return d_ptr->mLanguage;
}

KDSoapValue BMS__CaptioningFormatType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("CaptioningFormatType"));// converter_complextype.cpp:385
    KDSoapValueList attribs;
    if (!d_ptr->mCaptioningSourceUri_nil) {
        KDSoapValue _valueCaptioningSourceUri(QString::fromLatin1("captioningSourceUri"), QVariant::fromValue(d_ptr->mCaptioningSourceUri), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueCaptioningSourceUri.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        if (!_valueCaptioningSourceUri.isNil())
        attribs.append(_valueCaptioningSourceUri);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mLanguage_nil) {
        KDSoapValue _valueLanguage(QString::fromLatin1("language"), QVariant::fromValue(d_ptr->mLanguage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("language"));// elementargumentserializer.cpp:97
        _valueLanguage.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        if (!_valueLanguage.isNil())
        attribs.append(_valueLanguage);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void BMS__CaptioningFormatType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// converter_complextype.cpp:286
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("captioningSourceUri")) {// converter_complextype.cpp:273
            d_ptr->mCaptioningSourceUri = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mCaptioningSourceUri_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("language")) {// converter_complextype.cpp:273
            d_ptr->mLanguage = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mLanguage_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__CaptioningFormatType::BMS__CaptioningFormatType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__CaptioningFormatType::~BMS__CaptioningFormatType()
{
}

BMS__CaptioningFormatType::BMS__CaptioningFormatType( const BMS__CaptioningFormatType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__CaptioningFormatType&  BMS__CaptioningFormatType::operator=( const BMS__CaptioningFormatType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__QueryJobResponseType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__JobsType mJobs;
    bool mJobs_nil;
    quint64 mNotReportedResultsNumber;
    bool mNotReportedResultsNumber_nil;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__QueryJobResponseType::PrivateDPtr::PrivateDPtr()
    : mJobs_nil(true), mNotReportedResultsNumber(0), mNotReportedResultsNumber_nil(true), mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__QueryJobResponseType::setJobs( const BMS__JobsType& jobs )
{
    d_ptr->mJobs_nil = false;// converter_complextype.cpp:244
    d_ptr->mJobs = jobs;
}

BMS__JobsType BMS__QueryJobResponseType::jobs() const
{
    return d_ptr->mJobs;
}

void BMS__QueryJobResponseType::setNotReportedResultsNumber( quint64 notReportedResultsNumber )
{
    d_ptr->mNotReportedResultsNumber_nil = false;// converter_complextype.cpp:244
    d_ptr->mNotReportedResultsNumber = notReportedResultsNumber;
}

quint64 BMS__QueryJobResponseType::notReportedResultsNumber() const
{
    return d_ptr->mNotReportedResultsNumber;
}

void BMS__QueryJobResponseType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__QueryJobResponseType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__QueryJobResponseType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__QueryJobResponseType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__QueryJobResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("QueryJobResponseType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mJobs_nil) {
        KDSoapValue _valueJobs(d_ptr->mJobs.serialize(QString::fromLatin1("jobs")));// elementargumentserializer.cpp:91
        _valueJobs.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueJobs.setQualified(true);
        if (!_valueJobs.isNil())
        args.append(_valueJobs);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mNotReportedResultsNumber_nil) {
        KDSoapValue _valueNotReportedResultsNumber(QString::fromLatin1("notReportedResultsNumber"), QVariant::fromValue(d_ptr->mNotReportedResultsNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueNotReportedResultsNumber.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueNotReportedResultsNumber.setQualified(true);
        if (!_valueNotReportedResultsNumber.isNil())
        args.append(_valueNotReportedResultsNumber);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__QueryJobResponseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("jobs")) {// converter_complextype.cpp:273
            d_ptr->mJobs.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("notReportedResultsNumber")) {// converter_complextype.cpp:273
            d_ptr->mNotReportedResultsNumber = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mNotReportedResultsNumber_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__QueryJobResponseType::BMS__QueryJobResponseType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__QueryJobResponseType::~BMS__QueryJobResponseType()
{
}

BMS__QueryJobResponseType::BMS__QueryJobResponseType( const BMS__QueryJobResponseType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__QueryJobResponseType&  BMS__QueryJobResponseType::operator=( const BMS__QueryJobResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue BMS__TrackConfiguration::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("trackConfiguration"));// converter_complextype.cpp:390
    return mainValue;
}

void BMS__TrackConfiguration::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__TrackConfiguration::BMS__TrackConfiguration()
{
}

BMS__TrackConfiguration::~BMS__TrackConfiguration()
{
}


class __LanguageType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mLang;
    bool mLang_nil;
};

__LanguageType::PrivateDPtr::PrivateDPtr()
    : mLang_nil(true)
{
}


void __LanguageType::setLang( const QString& lang )
{
    d_ptr->mLang_nil = false;// converter_complextype.cpp:244
    d_ptr->mLang = lang;
}

QString __LanguageType::lang() const
{
    return d_ptr->mLang;
}

KDSoapValue __LanguageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("languageType"));// converter_complextype.cpp:390
    KDSoapValueList attribs;
    if (!d_ptr->mLang_nil) {
        KDSoapValue _valueLang(QString::fromLatin1("lang"), QVariant::fromValue(d_ptr->mLang), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueLang.setNamespaceUri(KDSoapNamespaceManager::xmlSchema2001());
        if (!_valueLang.isNil())
        attribs.append(_valueLang);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void __LanguageType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("lang")) {// converter_complextype.cpp:273
            d_ptr->mLang = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mLang_nil = false;// converter_complextype.cpp:288
        }
    }
}

__LanguageType::__LanguageType()
    : d_ptr(new PrivateDPtr)
{
}

__LanguageType::~__LanguageType()
{
}

__LanguageType::__LanguageType( const __LanguageType& other )
    : d_ptr( other.d_ptr )
{
}

__LanguageType&  __LanguageType::operator=( const __LanguageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __Coordinates::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mPosy;
    float mPosx;
};

__Coordinates::PrivateDPtr::PrivateDPtr()
    : mPosy(0), mPosx(0)
{
}


void __Coordinates::setPosy( float posy )
{
    d_ptr->mPosy = posy;
}

float __Coordinates::posy() const
{
    return d_ptr->mPosy;
}

void __Coordinates::setPosx( float posx )
{
    d_ptr->mPosx = posx;
}

float __Coordinates::posx() const
{
    return d_ptr->mPosx;
}

KDSoapValue __Coordinates::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("coordinates"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valuePosy(QString::fromLatin1("posy"), QVariant::fromValue(d_ptr->mPosy), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:97
    _valuePosy.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
    _valuePosy.setQualified(true);
    args.append(_valuePosy);// elementargumentserializer.cpp:111
    KDSoapValue _valuePosx(QString::fromLatin1("posx"), QVariant::fromValue(d_ptr->mPosx), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("float"));// elementargumentserializer.cpp:97
    _valuePosx.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
    _valuePosx.setQualified(true);
    args.append(_valuePosx);// elementargumentserializer.cpp:111
    return mainValue;
}

void __Coordinates::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("posy")) {// converter_complextype.cpp:273
            d_ptr->mPosy = val.value().value<float>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("posx")) {// converter_complextype.cpp:273
            d_ptr->mPosx = val.value().value<float>();// converter_complextype.cpp:286
        }
    }
}

__Coordinates::__Coordinates()
    : d_ptr(new PrivateDPtr)
{
}

__Coordinates::~__Coordinates()
{
}

__Coordinates::__Coordinates( const __Coordinates& other )
    : d_ptr( other.d_ptr )
{
}

__Coordinates&  __Coordinates::operator=( const __Coordinates& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__DurationType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__TimecodeDuration mTimecode;
    bool mTimecode_nil;
    QString mNormalPlayTime;
    bool mNormalPlayTime_nil;
    BMS__EditUnitNumberType mEditUnitNumber;
    bool mEditUnitNumber_nil;
};

BMS__DurationType::PrivateDPtr::PrivateDPtr()
    : mTimecode_nil(true), mNormalPlayTime_nil(true), mEditUnitNumber_nil(true)
{
}


void BMS__DurationType::setTimecode( const BMS__TimecodeDuration& timecode )
{
    d_ptr->mTimecode_nil = false;// converter_complextype.cpp:244
    d_ptr->mTimecode = timecode;
}

BMS__TimecodeDuration BMS__DurationType::timecode() const
{
    return d_ptr->mTimecode;
}

void BMS__DurationType::setNormalPlayTime( const QString& normalPlayTime )
{
    d_ptr->mNormalPlayTime_nil = false;// converter_complextype.cpp:244
    d_ptr->mNormalPlayTime = normalPlayTime;
}

QString BMS__DurationType::normalPlayTime() const
{
    return d_ptr->mNormalPlayTime;
}

void BMS__DurationType::setEditUnitNumber( const BMS__EditUnitNumberType& editUnitNumber )
{
    d_ptr->mEditUnitNumber_nil = false;// converter_complextype.cpp:244
    d_ptr->mEditUnitNumber = editUnitNumber;
}

BMS__EditUnitNumberType BMS__DurationType::editUnitNumber() const
{
    return d_ptr->mEditUnitNumber;
}

KDSoapValue BMS__DurationType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("DurationType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mTimecode_nil) {
        KDSoapValue _valueTimecode(QString::fromLatin1("timecode"), d_ptr->mTimecode.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("TimecodeDuration"));// elementargumentserializer.cpp:99
        _valueTimecode.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueTimecode.setQualified(true);
        if (!_valueTimecode.isNil())
        args.append(_valueTimecode);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mNormalPlayTime_nil) {
        KDSoapValue _valueNormalPlayTime(QString::fromLatin1("normalPlayTime"), QVariant::fromValue(d_ptr->mNormalPlayTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:97
        _valueNormalPlayTime.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueNormalPlayTime.setQualified(true);
        if (!_valueNormalPlayTime.isNil())
        args.append(_valueNormalPlayTime);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mEditUnitNumber_nil) {
        KDSoapValue _valueEditUnitNumber(d_ptr->mEditUnitNumber.serialize(QString::fromLatin1("editUnitNumber")));// elementargumentserializer.cpp:91
        _valueEditUnitNumber.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueEditUnitNumber.setQualified(true);
        if (!_valueEditUnitNumber.isNil())
        args.append(_valueEditUnitNumber);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__DurationType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("timecode")) {// converter_complextype.cpp:273
            d_ptr->mTimecode.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mTimecode_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("normalPlayTime")) {// converter_complextype.cpp:273
            d_ptr->mNormalPlayTime = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mNormalPlayTime_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("editUnitNumber")) {// converter_complextype.cpp:273
            d_ptr->mEditUnitNumber.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__DurationType::BMS__DurationType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__DurationType::~BMS__DurationType()
{
}

BMS__DurationType::BMS__DurationType( const BMS__DurationType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__DurationType&  BMS__DurationType::operator=( const BMS__DurationType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ServiceDescription::PrivateDPtr : public QSharedData
{
public:
    QList< KDSoapValue > mAny;
};

void BMS__ServiceDescription::setAny( const QList< KDSoapValue >& any )
{
    d_ptr->mAny = any;
}

QList< KDSoapValue > BMS__ServiceDescription::any() const
{
    return d_ptr->mAny;
}

KDSoapValue BMS__ServiceDescription::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("serviceDescription"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    for (int i = 0; i < d_ptr->mAny.count(); ++i) {// converter_complextype.cpp:475
        if (!d_ptr->mAny.at(i).isNull()) {
            args.append(d_ptr->mAny.at(i));// elementargumentserializer.cpp:75
        }
    }
    return mainValue;
}

void BMS__ServiceDescription::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        {// converter_complextype.cpp:271
            d_ptr->mAny.append(val);
        }
    }
}

BMS__ServiceDescription::BMS__ServiceDescription()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ServiceDescription::~BMS__ServiceDescription()
{
}

BMS__ServiceDescription::BMS__ServiceDescription( const BMS__ServiceDescription& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ServiceDescription&  BMS__ServiceDescription::operator=( const BMS__ServiceDescription& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__EditUnitNumberType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mValue;
    quint64 mEditRate;
    quint64 mFactorNumerator;
    quint64 mFactorDenominator;
};

BMS__EditUnitNumberType::PrivateDPtr::PrivateDPtr()
    : mValue(0), mEditRate(0), mFactorNumerator(0), mFactorDenominator(0)
{
}


void BMS__EditUnitNumberType::setValue( qint64 value )
{
    d_ptr->mValue = value;
}

qint64 BMS__EditUnitNumberType::value() const
{
    return d_ptr->mValue;
}

BMS__EditUnitNumberType::BMS__EditUnitNumberType( qint64 value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__EditUnitNumberType::operator qint64() const
{
    return d_ptr->mValue;
}

void BMS__EditUnitNumberType::setEditRate( quint64 editRate )
{
    d_ptr->mEditRate = editRate;
}

quint64 BMS__EditUnitNumberType::editRate() const
{
    return d_ptr->mEditRate;
}

void BMS__EditUnitNumberType::setFactorNumerator( quint64 factorNumerator )
{
    d_ptr->mFactorNumerator = factorNumerator;
}

quint64 BMS__EditUnitNumberType::factorNumerator() const
{
    return d_ptr->mFactorNumerator;
}

void BMS__EditUnitNumberType::setFactorDenominator( quint64 factorDenominator )
{
    d_ptr->mFactorDenominator = factorDenominator;
}

quint64 BMS__EditUnitNumberType::factorDenominator() const
{
    return d_ptr->mFactorDenominator;
}

KDSoapValue BMS__EditUnitNumberType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("EditUnitNumberType"));// converter_complextype.cpp:385
    KDSoapValueList attribs;
    KDSoapValue _valueEditRate(QString::fromLatin1("editRate"), QVariant::fromValue(d_ptr->mEditRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("positiveInteger"));// elementargumentserializer.cpp:97
    _valueEditRate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    attribs.append(_valueEditRate);// elementargumentserializer.cpp:111
    KDSoapValue _valueFactorNumerator(QString::fromLatin1("factorNumerator"), QVariant::fromValue(d_ptr->mFactorNumerator), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("positiveInteger"));// elementargumentserializer.cpp:97
    _valueFactorNumerator.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    attribs.append(_valueFactorNumerator);// elementargumentserializer.cpp:111
    KDSoapValue _valueFactorDenominator(QString::fromLatin1("factorDenominator"), QVariant::fromValue(d_ptr->mFactorDenominator), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("positiveInteger"));// elementargumentserializer.cpp:97
    _valueFactorDenominator.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    attribs.append(_valueFactorDenominator);// elementargumentserializer.cpp:111
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void BMS__EditUnitNumberType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<qint64>();// converter_complextype.cpp:286
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("editRate")) {// converter_complextype.cpp:273
            d_ptr->mEditRate = val.value().value<quint64>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("factorNumerator")) {// converter_complextype.cpp:273
            d_ptr->mFactorNumerator = val.value().value<quint64>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("factorDenominator")) {// converter_complextype.cpp:273
            d_ptr->mFactorDenominator = val.value().value<quint64>();// converter_complextype.cpp:286
        }
    }
}

BMS__EditUnitNumberType::BMS__EditUnitNumberType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__EditUnitNumberType::~BMS__EditUnitNumberType()
{
}

BMS__EditUnitNumberType::BMS__EditUnitNumberType( const BMS__EditUnitNumberType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__EditUnitNumberType&  BMS__EditUnitNumberType::operator=( const BMS__EditUnitNumberType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __ContactDetailsType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mName;
    bool mName_nil;
    QString mGivenName;
    bool mGivenName_nil;
    QString mFamilyName;
    bool mFamilyName_nil;
    QStringList mOtherGivenName;
    bool mOtherGivenName_nil;
    QString mSuffix;
    bool mSuffix_nil;
    QString mSalutation;
    bool mSalutation_nil;
    QList< __TextElementType > mUsername;
    bool mUsername_nil;
    __TextElementType mOccupation;
    bool mOccupation_nil;
    QList< __DetailsType > mDetails;
    bool mDetails_nil;
    QList< __TextElementType > mStageName;
    bool mStageName_nil;
    QList< __EntityType > mRelatedContacts;
    bool mRelatedContacts_nil;
    QString mContactId;
    bool mContactId_nil;
};

__ContactDetailsType::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mGivenName_nil(true), mFamilyName_nil(true), mOtherGivenName_nil(true), mSuffix_nil(true), mSalutation_nil(true), mUsername_nil(true), mOccupation_nil(true), mDetails_nil(true), mStageName_nil(true), mRelatedContacts_nil(true), mContactId_nil(true)
{
}


void __ContactDetailsType::setName( const QString& name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:244
    d_ptr->mName = name;
}

QString __ContactDetailsType::name() const
{
    return d_ptr->mName;
}

void __ContactDetailsType::setGivenName( const QString& givenName )
{
    d_ptr->mGivenName_nil = false;// converter_complextype.cpp:244
    d_ptr->mGivenName = givenName;
}

QString __ContactDetailsType::givenName() const
{
    return d_ptr->mGivenName;
}

void __ContactDetailsType::setFamilyName( const QString& familyName )
{
    d_ptr->mFamilyName_nil = false;// converter_complextype.cpp:244
    d_ptr->mFamilyName = familyName;
}

QString __ContactDetailsType::familyName() const
{
    return d_ptr->mFamilyName;
}

void __ContactDetailsType::setOtherGivenName( const QStringList& otherGivenName )
{
    d_ptr->mOtherGivenName_nil = false;// converter_complextype.cpp:244
    d_ptr->mOtherGivenName = otherGivenName;
}

QStringList __ContactDetailsType::otherGivenName() const
{
    return d_ptr->mOtherGivenName;
}

void __ContactDetailsType::setSuffix( const QString& suffix )
{
    d_ptr->mSuffix_nil = false;// converter_complextype.cpp:244
    d_ptr->mSuffix = suffix;
}

QString __ContactDetailsType::suffix() const
{
    return d_ptr->mSuffix;
}

void __ContactDetailsType::setSalutation( const QString& salutation )
{
    d_ptr->mSalutation_nil = false;// converter_complextype.cpp:244
    d_ptr->mSalutation = salutation;
}

QString __ContactDetailsType::salutation() const
{
    return d_ptr->mSalutation;
}

void __ContactDetailsType::setUsername( const QList< __TextElementType >& username )
{
    d_ptr->mUsername_nil = false;// converter_complextype.cpp:244
    d_ptr->mUsername = username;
}

QList< __TextElementType > __ContactDetailsType::username() const
{
    return d_ptr->mUsername;
}

void __ContactDetailsType::setOccupation( const __TextElementType& occupation )
{
    d_ptr->mOccupation_nil = false;// converter_complextype.cpp:244
    d_ptr->mOccupation = occupation;
}

__TextElementType __ContactDetailsType::occupation() const
{
    return d_ptr->mOccupation;
}

void __ContactDetailsType::setDetails( const QList< __DetailsType >& details )
{
    d_ptr->mDetails_nil = false;// converter_complextype.cpp:244
    d_ptr->mDetails = details;
}

QList< __DetailsType > __ContactDetailsType::details() const
{
    return d_ptr->mDetails;
}

void __ContactDetailsType::setStageName( const QList< __TextElementType >& stageName )
{
    d_ptr->mStageName_nil = false;// converter_complextype.cpp:244
    d_ptr->mStageName = stageName;
}

QList< __TextElementType > __ContactDetailsType::stageName() const
{
    return d_ptr->mStageName;
}

void __ContactDetailsType::setRelatedContacts( const QList< __EntityType >& relatedContacts )
{
    d_ptr->mRelatedContacts_nil = false;// converter_complextype.cpp:244
    d_ptr->mRelatedContacts = relatedContacts;
}

QList< __EntityType > __ContactDetailsType::relatedContacts() const
{
    return d_ptr->mRelatedContacts;
}

void __ContactDetailsType::setContactId( const QString& contactId )
{
    d_ptr->mContactId_nil = false;// converter_complextype.cpp:244
    d_ptr->mContactId = contactId;
}

QString __ContactDetailsType::contactId() const
{
    return d_ptr->mContactId;
}

KDSoapValue __ContactDetailsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("contactDetailsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueName.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueName.setQualified(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mGivenName_nil) {
        KDSoapValue _valueGivenName(QString::fromLatin1("givenName"), QVariant::fromValue(d_ptr->mGivenName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueGivenName.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueGivenName.setQualified(true);
        if (!_valueGivenName.isNil())
        args.append(_valueGivenName);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mFamilyName_nil) {
        KDSoapValue _valueFamilyName(QString::fromLatin1("familyName"), QVariant::fromValue(d_ptr->mFamilyName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueFamilyName.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueFamilyName.setQualified(true);
        if (!_valueFamilyName.isNil())
        args.append(_valueFamilyName);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mOtherGivenName.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueOtherGivenName(QString::fromLatin1("otherGivenName"), QVariant::fromValue(d_ptr->mOtherGivenName.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueOtherGivenName.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueOtherGivenName.setQualified(true);
        args.append(_valueOtherGivenName);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mSuffix_nil) {
        KDSoapValue _valueSuffix(QString::fromLatin1("suffix"), QVariant::fromValue(d_ptr->mSuffix), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueSuffix.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueSuffix.setQualified(true);
        if (!_valueSuffix.isNil())
        args.append(_valueSuffix);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mSalutation_nil) {
        KDSoapValue _valueSalutation(QString::fromLatin1("salutation"), QVariant::fromValue(d_ptr->mSalutation), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueSalutation.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueSalutation.setQualified(true);
        if (!_valueSalutation.isNil())
        args.append(_valueSalutation);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mUsername.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueUsername(d_ptr->mUsername.at(i).serialize(QString::fromLatin1("username")));// elementargumentserializer.cpp:91
        _valueUsername.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueUsername.setQualified(true);
        args.append(_valueUsername);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mOccupation_nil) {
        KDSoapValue _valueOccupation(d_ptr->mOccupation.serialize(QString::fromLatin1("occupation")));// elementargumentserializer.cpp:91
        _valueOccupation.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueOccupation.setQualified(true);
        if (!_valueOccupation.isNil())
        args.append(_valueOccupation);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mDetails.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueDetails(d_ptr->mDetails.at(i).serialize(QString::fromLatin1("details")));// elementargumentserializer.cpp:91
        _valueDetails.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueDetails.setQualified(true);
        args.append(_valueDetails);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mStageName.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueStageName(d_ptr->mStageName.at(i).serialize(QString::fromLatin1("stageName")));// elementargumentserializer.cpp:91
        _valueStageName.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueStageName.setQualified(true);
        args.append(_valueStageName);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mRelatedContacts.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueRelatedContacts(d_ptr->mRelatedContacts.at(i).serialize(QString::fromLatin1("relatedContacts")));// elementargumentserializer.cpp:91
        _valueRelatedContacts.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueRelatedContacts.setQualified(true);
        args.append(_valueRelatedContacts);// elementargumentserializer.cpp:111
    }
    KDSoapValueList attribs;
    if (!d_ptr->mContactId_nil) {
        KDSoapValue _valueContactId(QString::fromLatin1("contactId"), QVariant::fromValue(d_ptr->mContactId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueContactId.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        if (!_valueContactId.isNil())
        attribs.append(_valueContactId);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void __ContactDetailsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("name")) {// converter_complextype.cpp:273
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mName_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("givenName")) {// converter_complextype.cpp:273
            d_ptr->mGivenName = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mGivenName_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("familyName")) {// converter_complextype.cpp:273
            d_ptr->mFamilyName = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mFamilyName_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("otherGivenName")) {// converter_complextype.cpp:273
            QString mOtherGivenNameTemp;// converter_complextype.cpp:331
            mOtherGivenNameTemp = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mOtherGivenName.append(mOtherGivenNameTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("suffix")) {// converter_complextype.cpp:273
            d_ptr->mSuffix = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mSuffix_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("salutation")) {// converter_complextype.cpp:273
            d_ptr->mSalutation = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mSalutation_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("username")) {// converter_complextype.cpp:273
            __TextElementType mUsernameTemp;// converter_complextype.cpp:331
            mUsernameTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mUsername.append(mUsernameTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("occupation")) {// converter_complextype.cpp:273
            d_ptr->mOccupation.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("details")) {// converter_complextype.cpp:273
            __DetailsType mDetailsTemp;// converter_complextype.cpp:331
            mDetailsTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mDetails.append(mDetailsTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("stageName")) {// converter_complextype.cpp:273
            __TextElementType mStageNameTemp;// converter_complextype.cpp:331
            mStageNameTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mStageName.append(mStageNameTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("relatedContacts")) {// converter_complextype.cpp:273
            __EntityType mRelatedContactsTemp;// converter_complextype.cpp:331
            mRelatedContactsTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mRelatedContacts.append(mRelatedContactsTemp);// converter_complextype.cpp:339
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("contactId")) {// converter_complextype.cpp:273
            d_ptr->mContactId = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mContactId_nil = false;// converter_complextype.cpp:288
        }
    }
}

__ContactDetailsType::__ContactDetailsType()
    : d_ptr(new PrivateDPtr)
{
}

__ContactDetailsType::~__ContactDetailsType()
{
}

__ContactDetailsType::__ContactDetailsType( const __ContactDetailsType& other )
    : d_ptr( other.d_ptr )
{
}

__ContactDetailsType&  __ContactDetailsType::operator=( const __ContactDetailsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __Spatial::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    __LocationName mLocationName;
    __Coordinates mCoordinates;
    bool mCoordinates_nil;
};

__Spatial::PrivateDPtr::PrivateDPtr()
    : mCoordinates_nil(true)
{
}


void __Spatial::setLocationName( const __LocationName& locationName )
{
    d_ptr->mLocationName = locationName;
}

__LocationName __Spatial::locationName() const
{
    return d_ptr->mLocationName;
}

void __Spatial::setCoordinates( const __Coordinates& coordinates )
{
    d_ptr->mCoordinates_nil = false;// converter_complextype.cpp:244
    d_ptr->mCoordinates = coordinates;
}

__Coordinates __Spatial::coordinates() const
{
    return d_ptr->mCoordinates;
}

KDSoapValue __Spatial::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("spatial"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueLocationName(d_ptr->mLocationName.serialize(QString::fromLatin1("locationName")));// elementargumentserializer.cpp:91
    _valueLocationName.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
    _valueLocationName.setQualified(true);
    args.append(_valueLocationName);// elementargumentserializer.cpp:111
    if (!d_ptr->mCoordinates_nil) {
        KDSoapValue _valueCoordinates(d_ptr->mCoordinates.serialize(QString::fromLatin1("coordinates")));// elementargumentserializer.cpp:91
        _valueCoordinates.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueCoordinates.setQualified(true);
        if (!_valueCoordinates.isNil())
        args.append(_valueCoordinates);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void __Spatial::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("locationName")) {// converter_complextype.cpp:273
            d_ptr->mLocationName.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("coordinates")) {// converter_complextype.cpp:273
            d_ptr->mCoordinates.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

__Spatial::__Spatial()
    : d_ptr(new PrivateDPtr)
{
}

__Spatial::~__Spatial()
{
}

__Spatial::__Spatial( const __Spatial& other )
    : d_ptr( other.d_ptr )
{
}

__Spatial&  __Spatial::operator=( const __Spatial& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TFMS__TransformRequestType::PrivateDPtr : public QSharedData
{
public:
    TFMS__TransformJobType mTransformJob;
};

void TFMS__TransformRequestType::setTransformJob( const TFMS__TransformJobType& transformJob )
{
    d_ptr->mTransformJob = transformJob;
}

TFMS__TransformJobType TFMS__TransformRequestType::transformJob() const
{
    return d_ptr->mTransformJob;
}

KDSoapValue TFMS__TransformRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("TransformRequestType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueTransformJob(d_ptr->mTransformJob.serialize(QString::fromLatin1("transformJob")));// elementargumentserializer.cpp:91
    _valueTransformJob.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformJob.setQualified(true);
    args.append(_valueTransformJob);// elementargumentserializer.cpp:111
    return mainValue;
}

void TFMS__TransformRequestType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("transformJob")) {// converter_complextype.cpp:273
            d_ptr->mTransformJob.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

TFMS__TransformRequestType::TFMS__TransformRequestType()
    : d_ptr(new PrivateDPtr)
{
}

TFMS__TransformRequestType::~TFMS__TransformRequestType()
{
}

TFMS__TransformRequestType::TFMS__TransformRequestType( const TFMS__TransformRequestType& other )
    : d_ptr( other.d_ptr )
{
}

TFMS__TransformRequestType&  TFMS__TransformRequestType::operator=( const TFMS__TransformRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ManageQueueResponseType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__QueueType mQueue;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__ManageQueueResponseType::PrivateDPtr::PrivateDPtr()
    : mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__ManageQueueResponseType::setQueue( const BMS__QueueType& queue )
{
    d_ptr->mQueue = queue;
}

BMS__QueueType BMS__ManageQueueResponseType::queue() const
{
    return d_ptr->mQueue;
}

void BMS__ManageQueueResponseType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__ManageQueueResponseType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__ManageQueueResponseType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__ManageQueueResponseType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__ManageQueueResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ManageQueueResponseType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueQueue(d_ptr->mQueue.serialize(QString::fromLatin1("queue")));// elementargumentserializer.cpp:91
    _valueQueue.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueQueue.setQualified(true);
    args.append(_valueQueue);// elementargumentserializer.cpp:111
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ManageQueueResponseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("queue")) {// converter_complextype.cpp:273
            d_ptr->mQueue.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__ManageQueueResponseType::BMS__ManageQueueResponseType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ManageQueueResponseType::~BMS__ManageQueueResponseType()
{
}

BMS__ManageQueueResponseType::BMS__ManageQueueResponseType( const BMS__ManageQueueResponseType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ManageQueueResponseType&  BMS__ManageQueueResponseType::operator=( const BMS__ManageQueueResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__BMContentsType::PrivateDPtr : public QSharedData
{
public:
    QList< BMS__BMContentType > mBmContent;
};

void BMS__BMContentsType::setBmContent( const QList< BMS__BMContentType >& bmContent )
{
    d_ptr->mBmContent = bmContent;
}

QList< BMS__BMContentType > BMS__BMContentsType::bmContent() const
{
    return d_ptr->mBmContent;
}

KDSoapValue BMS__BMContentsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMContentsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mBmContent.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueBmContent(d_ptr->mBmContent.at(i).serialize(QString::fromLatin1("bmContent")));// elementargumentserializer.cpp:91
        _valueBmContent.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBmContent.setQualified(true);
        args.append(_valueBmContent);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__BMContentsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("bmContent")) {// converter_complextype.cpp:273
            BMS__BMContentType mBmContentTemp;// converter_complextype.cpp:331
            mBmContentTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mBmContent.append(mBmContentTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__BMContentsType::BMS__BMContentsType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMContentsType::~BMS__BMContentsType()
{
}

BMS__BMContentsType::BMS__BMContentsType( const BMS__BMContentsType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__BMContentsType&  BMS__BMContentsType::operator=( const BMS__BMContentsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __BmContentDescriptionType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< __TextElementType > mTitle;
    bool mTitle_nil;
    QList< __TitleType > mAlternativeTitle;
    bool mAlternativeTitle_nil;
    QList< __EntityType > mCreator;
    bool mCreator_nil;
    QList< __SubjectType > mSubject;
    bool mSubject_nil;
    QList< __DescriptionType > mDescription;
    bool mDescription_nil;
    QList< __EntityType > mPublisher;
    bool mPublisher_nil;
    QList< __EntityType > mContributor;
    bool mContributor_nil;
    QList< __DateType > mDate;
    bool mDate_nil;
    QList< __TypeType > mType;
    bool mType_nil;
    QList< __IdentifierType > mIdentifier;
    bool mIdentifier_nil;
    QList< __LanguageType > mLanguage;
    bool mLanguage_nil;
    QList< __CoverageType > mCoverage;
    bool mCoverage_nil;
    QList< __RightsType > mRights;
    bool mRights_nil;
    QString mVersion;
    bool mVersion_nil;
    QString mLang;
    bool mLang_nil;
};

__BmContentDescriptionType::PrivateDPtr::PrivateDPtr()
    : mTitle_nil(true), mAlternativeTitle_nil(true), mCreator_nil(true), mSubject_nil(true), mDescription_nil(true), mPublisher_nil(true), mContributor_nil(true), mDate_nil(true), mType_nil(true), mIdentifier_nil(true), mLanguage_nil(true), mCoverage_nil(true), mRights_nil(true), mVersion_nil(true), mLang_nil(true)
{
}


void __BmContentDescriptionType::setTitle( const QList< __TextElementType >& title )
{
    d_ptr->mTitle_nil = false;// converter_complextype.cpp:244
    d_ptr->mTitle = title;
}

QList< __TextElementType > __BmContentDescriptionType::title() const
{
    return d_ptr->mTitle;
}

void __BmContentDescriptionType::setAlternativeTitle( const QList< __TitleType >& alternativeTitle )
{
    d_ptr->mAlternativeTitle_nil = false;// converter_complextype.cpp:244
    d_ptr->mAlternativeTitle = alternativeTitle;
}

QList< __TitleType > __BmContentDescriptionType::alternativeTitle() const
{
    return d_ptr->mAlternativeTitle;
}

void __BmContentDescriptionType::setCreator( const QList< __EntityType >& creator )
{
    d_ptr->mCreator_nil = false;// converter_complextype.cpp:244
    d_ptr->mCreator = creator;
}

QList< __EntityType > __BmContentDescriptionType::creator() const
{
    return d_ptr->mCreator;
}

void __BmContentDescriptionType::setSubject( const QList< __SubjectType >& subject )
{
    d_ptr->mSubject_nil = false;// converter_complextype.cpp:244
    d_ptr->mSubject = subject;
}

QList< __SubjectType > __BmContentDescriptionType::subject() const
{
    return d_ptr->mSubject;
}

void __BmContentDescriptionType::setDescription( const QList< __DescriptionType >& description )
{
    d_ptr->mDescription_nil = false;// converter_complextype.cpp:244
    d_ptr->mDescription = description;
}

QList< __DescriptionType > __BmContentDescriptionType::description() const
{
    return d_ptr->mDescription;
}

void __BmContentDescriptionType::setPublisher( const QList< __EntityType >& publisher )
{
    d_ptr->mPublisher_nil = false;// converter_complextype.cpp:244
    d_ptr->mPublisher = publisher;
}

QList< __EntityType > __BmContentDescriptionType::publisher() const
{
    return d_ptr->mPublisher;
}

void __BmContentDescriptionType::setContributor( const QList< __EntityType >& contributor )
{
    d_ptr->mContributor_nil = false;// converter_complextype.cpp:244
    d_ptr->mContributor = contributor;
}

QList< __EntityType > __BmContentDescriptionType::contributor() const
{
    return d_ptr->mContributor;
}

void __BmContentDescriptionType::setDate( const QList< __DateType >& date )
{
    d_ptr->mDate_nil = false;// converter_complextype.cpp:244
    d_ptr->mDate = date;
}

QList< __DateType > __BmContentDescriptionType::date() const
{
    return d_ptr->mDate;
}

void __BmContentDescriptionType::setType( const QList< __TypeType >& type )
{
    d_ptr->mType_nil = false;// converter_complextype.cpp:244
    d_ptr->mType = type;
}

QList< __TypeType > __BmContentDescriptionType::type() const
{
    return d_ptr->mType;
}

void __BmContentDescriptionType::setIdentifier( const QList< __IdentifierType >& identifier )
{
    d_ptr->mIdentifier_nil = false;// converter_complextype.cpp:244
    d_ptr->mIdentifier = identifier;
}

QList< __IdentifierType > __BmContentDescriptionType::identifier() const
{
    return d_ptr->mIdentifier;
}

void __BmContentDescriptionType::setLanguage( const QList< __LanguageType >& language )
{
    d_ptr->mLanguage_nil = false;// converter_complextype.cpp:244
    d_ptr->mLanguage = language;
}

QList< __LanguageType > __BmContentDescriptionType::language() const
{
    return d_ptr->mLanguage;
}

void __BmContentDescriptionType::setCoverage( const QList< __CoverageType >& coverage )
{
    d_ptr->mCoverage_nil = false;// converter_complextype.cpp:244
    d_ptr->mCoverage = coverage;
}

QList< __CoverageType > __BmContentDescriptionType::coverage() const
{
    return d_ptr->mCoverage;
}

void __BmContentDescriptionType::setRights( const QList< __RightsType >& rights )
{
    d_ptr->mRights_nil = false;// converter_complextype.cpp:244
    d_ptr->mRights = rights;
}

QList< __RightsType > __BmContentDescriptionType::rights() const
{
    return d_ptr->mRights;
}

void __BmContentDescriptionType::setVersion( const QString& version )
{
    d_ptr->mVersion_nil = false;// converter_complextype.cpp:244
    d_ptr->mVersion = version;
}

QString __BmContentDescriptionType::version() const
{
    return d_ptr->mVersion;
}

void __BmContentDescriptionType::setLang( const QString& lang )
{
    d_ptr->mLang_nil = false;// converter_complextype.cpp:244
    d_ptr->mLang = lang;
}

QString __BmContentDescriptionType::lang() const
{
    return d_ptr->mLang;
}

KDSoapValue __BmContentDescriptionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("bmContentDescriptionType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mTitle.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueTitle(d_ptr->mTitle.at(i).serialize(QString::fromLatin1("title")));// elementargumentserializer.cpp:91
        _valueTitle.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueTitle.setQualified(true);
        args.append(_valueTitle);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mAlternativeTitle.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueAlternativeTitle(d_ptr->mAlternativeTitle.at(i).serialize(QString::fromLatin1("alternativeTitle")));// elementargumentserializer.cpp:91
        _valueAlternativeTitle.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueAlternativeTitle.setQualified(true);
        args.append(_valueAlternativeTitle);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mCreator.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueCreator(d_ptr->mCreator.at(i).serialize(QString::fromLatin1("creator")));// elementargumentserializer.cpp:91
        _valueCreator.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueCreator.setQualified(true);
        args.append(_valueCreator);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mSubject.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueSubject(d_ptr->mSubject.at(i).serialize(QString::fromLatin1("subject")));// elementargumentserializer.cpp:91
        _valueSubject.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueSubject.setQualified(true);
        args.append(_valueSubject);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mDescription.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueDescription(d_ptr->mDescription.at(i).serialize(QString::fromLatin1("description")));// elementargumentserializer.cpp:91
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueDescription.setQualified(true);
        args.append(_valueDescription);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mPublisher.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valuePublisher(d_ptr->mPublisher.at(i).serialize(QString::fromLatin1("publisher")));// elementargumentserializer.cpp:91
        _valuePublisher.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valuePublisher.setQualified(true);
        args.append(_valuePublisher);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mContributor.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueContributor(d_ptr->mContributor.at(i).serialize(QString::fromLatin1("contributor")));// elementargumentserializer.cpp:91
        _valueContributor.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueContributor.setQualified(true);
        args.append(_valueContributor);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mDate.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueDate(d_ptr->mDate.at(i).serialize(QString::fromLatin1("date")));// elementargumentserializer.cpp:91
        _valueDate.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueDate.setQualified(true);
        args.append(_valueDate);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mType.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueType(d_ptr->mType.at(i).serialize(QString::fromLatin1("type")));// elementargumentserializer.cpp:91
        _valueType.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueType.setQualified(true);
        args.append(_valueType);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mIdentifier.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueIdentifier(d_ptr->mIdentifier.at(i).serialize(QString::fromLatin1("identifier")));// elementargumentserializer.cpp:91
        _valueIdentifier.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueIdentifier.setQualified(true);
        args.append(_valueIdentifier);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mLanguage.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueLanguage(d_ptr->mLanguage.at(i).serialize(QString::fromLatin1("language")));// elementargumentserializer.cpp:91
        _valueLanguage.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueLanguage.setQualified(true);
        args.append(_valueLanguage);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mCoverage.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueCoverage(d_ptr->mCoverage.at(i).serialize(QString::fromLatin1("coverage")));// elementargumentserializer.cpp:91
        _valueCoverage.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueCoverage.setQualified(true);
        args.append(_valueCoverage);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mRights.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueRights(d_ptr->mRights.at(i).serialize(QString::fromLatin1("rights")));// elementargumentserializer.cpp:91
        _valueRights.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueRights.setQualified(true);
        args.append(_valueRights);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mVersion_nil) {
        KDSoapValue _valueVersion(QString::fromLatin1("version"), QVariant::fromValue(d_ptr->mVersion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueVersion.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueVersion.setQualified(true);
        if (!_valueVersion.isNil())
        args.append(_valueVersion);// elementargumentserializer.cpp:111
    }
    KDSoapValueList attribs;
    if (!d_ptr->mLang_nil) {
        KDSoapValue _valueLang(QString::fromLatin1("lang"), QVariant::fromValue(d_ptr->mLang), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueLang.setNamespaceUri(KDSoapNamespaceManager::xmlSchema2001());
        if (!_valueLang.isNil())
        attribs.append(_valueLang);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void __BmContentDescriptionType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("title")) {// converter_complextype.cpp:273
            __TextElementType mTitleTemp;// converter_complextype.cpp:331
            mTitleTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mTitle.append(mTitleTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("alternativeTitle")) {// converter_complextype.cpp:273
            __TitleType mAlternativeTitleTemp;// converter_complextype.cpp:331
            mAlternativeTitleTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mAlternativeTitle.append(mAlternativeTitleTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("creator")) {// converter_complextype.cpp:273
            __EntityType mCreatorTemp;// converter_complextype.cpp:331
            mCreatorTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mCreator.append(mCreatorTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("subject")) {// converter_complextype.cpp:273
            __SubjectType mSubjectTemp;// converter_complextype.cpp:331
            mSubjectTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mSubject.append(mSubjectTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("description")) {// converter_complextype.cpp:273
            __DescriptionType mDescriptionTemp;// converter_complextype.cpp:331
            mDescriptionTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mDescription.append(mDescriptionTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("publisher")) {// converter_complextype.cpp:273
            __EntityType mPublisherTemp;// converter_complextype.cpp:331
            mPublisherTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mPublisher.append(mPublisherTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("contributor")) {// converter_complextype.cpp:273
            __EntityType mContributorTemp;// converter_complextype.cpp:331
            mContributorTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mContributor.append(mContributorTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("date")) {// converter_complextype.cpp:273
            __DateType mDateTemp;// converter_complextype.cpp:331
            mDateTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mDate.append(mDateTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("type")) {// converter_complextype.cpp:273
            __TypeType mTypeTemp;// converter_complextype.cpp:331
            mTypeTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mType.append(mTypeTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("identifier")) {// converter_complextype.cpp:273
            __IdentifierType mIdentifierTemp;// converter_complextype.cpp:331
            mIdentifierTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mIdentifier.append(mIdentifierTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("language")) {// converter_complextype.cpp:273
            __LanguageType mLanguageTemp;// converter_complextype.cpp:331
            mLanguageTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mLanguage.append(mLanguageTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("coverage")) {// converter_complextype.cpp:273
            __CoverageType mCoverageTemp;// converter_complextype.cpp:331
            mCoverageTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mCoverage.append(mCoverageTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("rights")) {// converter_complextype.cpp:273
            __RightsType mRightsTemp;// converter_complextype.cpp:331
            mRightsTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mRights.append(mRightsTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("version")) {// converter_complextype.cpp:273
            d_ptr->mVersion = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mVersion_nil = false;// converter_complextype.cpp:288
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("lang")) {// converter_complextype.cpp:273
            d_ptr->mLang = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mLang_nil = false;// converter_complextype.cpp:288
        }
    }
}

__BmContentDescriptionType::__BmContentDescriptionType()
    : d_ptr(new PrivateDPtr)
{
}

__BmContentDescriptionType::~__BmContentDescriptionType()
{
}

__BmContentDescriptionType::__BmContentDescriptionType( const __BmContentDescriptionType& other )
    : d_ptr( other.d_ptr )
{
}

__BmContentDescriptionType&  __BmContentDescriptionType::operator=( const __BmContentDescriptionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__LengthType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    quint64 mValue;
    QString mUnit;
    bool mUnit_nil;
};

BMS__LengthType::PrivateDPtr::PrivateDPtr()
    : mValue(0), mUnit_nil(true)
{
}


void BMS__LengthType::setValue( quint64 value )
{
    d_ptr->mValue = value;
}

quint64 BMS__LengthType::value() const
{
    return d_ptr->mValue;
}

BMS__LengthType::BMS__LengthType( quint64 value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__LengthType::operator quint64() const
{
    return d_ptr->mValue;
}

void BMS__LengthType::setUnit( const QString& unit )
{
    d_ptr->mUnit_nil = false;// converter_complextype.cpp:244
    d_ptr->mUnit = unit;
}

QString BMS__LengthType::unit() const
{
    return d_ptr->mUnit;
}

KDSoapValue BMS__LengthType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("LengthType"));// converter_complextype.cpp:385
    KDSoapValueList attribs;
    if (!d_ptr->mUnit_nil) {
        KDSoapValue _valueUnit(QString::fromLatin1("unit"), QVariant::fromValue(d_ptr->mUnit), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueUnit.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        if (!_valueUnit.isNil())
        attribs.append(_valueUnit);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void BMS__LengthType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<quint64>();// converter_complextype.cpp:286
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("unit")) {// converter_complextype.cpp:273
            d_ptr->mUnit = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mUnit_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__LengthType::BMS__LengthType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__LengthType::~BMS__LengthType()
{
}

BMS__LengthType::BMS__LengthType( const BMS__LengthType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__LengthType&  BMS__LengthType::operator=( const BMS__LengthType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__FormatCollection::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__VideoFormatType mVideoFormat;
    bool mVideoFormat_nil;
    BMS__AudioFormatType mAudioFormat;
    bool mAudioFormat_nil;
    BMS__DataFormatType mDataFormat;
    bool mDataFormat_nil;
    BMS__ContainerFormatType mContainerFormat;
    bool mContainerFormat_nil;
};

BMS__FormatCollection::PrivateDPtr::PrivateDPtr()
    : mVideoFormat_nil(true), mAudioFormat_nil(true), mDataFormat_nil(true), mContainerFormat_nil(true)
{
}


void BMS__FormatCollection::setVideoFormat( const BMS__VideoFormatType& videoFormat )
{
    d_ptr->mVideoFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mVideoFormat = videoFormat;
}

BMS__VideoFormatType BMS__FormatCollection::videoFormat() const
{
    return d_ptr->mVideoFormat;
}

void BMS__FormatCollection::setAudioFormat( const BMS__AudioFormatType& audioFormat )
{
    d_ptr->mAudioFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mAudioFormat = audioFormat;
}

BMS__AudioFormatType BMS__FormatCollection::audioFormat() const
{
    return d_ptr->mAudioFormat;
}

void BMS__FormatCollection::setDataFormat( const BMS__DataFormatType& dataFormat )
{
    d_ptr->mDataFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mDataFormat = dataFormat;
}

BMS__DataFormatType BMS__FormatCollection::dataFormat() const
{
    return d_ptr->mDataFormat;
}

void BMS__FormatCollection::setContainerFormat( const BMS__ContainerFormatType& containerFormat )
{
    d_ptr->mContainerFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mContainerFormat = containerFormat;
}

BMS__ContainerFormatType BMS__FormatCollection::containerFormat() const
{
    return d_ptr->mContainerFormat;
}

KDSoapValue BMS__FormatCollection::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("formatCollection"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mVideoFormat_nil) {
        KDSoapValue _valueVideoFormat(d_ptr->mVideoFormat.serialize(QString::fromLatin1("videoFormat")));// elementargumentserializer.cpp:91
        _valueVideoFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueVideoFormat.setQualified(true);
        if (!_valueVideoFormat.isNil())
        args.append(_valueVideoFormat);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAudioFormat_nil) {
        KDSoapValue _valueAudioFormat(d_ptr->mAudioFormat.serialize(QString::fromLatin1("audioFormat")));// elementargumentserializer.cpp:91
        _valueAudioFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueAudioFormat.setQualified(true);
        if (!_valueAudioFormat.isNil())
        args.append(_valueAudioFormat);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mDataFormat_nil) {
        KDSoapValue _valueDataFormat(d_ptr->mDataFormat.serialize(QString::fromLatin1("dataFormat")));// elementargumentserializer.cpp:91
        _valueDataFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDataFormat.setQualified(true);
        if (!_valueDataFormat.isNil())
        args.append(_valueDataFormat);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mContainerFormat_nil) {
        KDSoapValue _valueContainerFormat(d_ptr->mContainerFormat.serialize(QString::fromLatin1("containerFormat")));// elementargumentserializer.cpp:91
        _valueContainerFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueContainerFormat.setQualified(true);
        if (!_valueContainerFormat.isNil())
        args.append(_valueContainerFormat);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__FormatCollection::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("videoFormat")) {// converter_complextype.cpp:273
            d_ptr->mVideoFormat.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("audioFormat")) {// converter_complextype.cpp:273
            d_ptr->mAudioFormat.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("dataFormat")) {// converter_complextype.cpp:273
            d_ptr->mDataFormat.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("containerFormat")) {// converter_complextype.cpp:273
            d_ptr->mContainerFormat.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__FormatCollection::BMS__FormatCollection()
    : d_ptr(new PrivateDPtr)
{
}

BMS__FormatCollection::~BMS__FormatCollection()
{
}

BMS__FormatCollection::BMS__FormatCollection( const BMS__FormatCollection& other )
    : d_ptr( other.d_ptr )
{
}

BMS__FormatCollection&  BMS__FormatCollection::operator=( const BMS__FormatCollection& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__RationalType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mValue;
    quint64 mNumerator;
    quint64 mDenominator;
};

BMS__RationalType::PrivateDPtr::PrivateDPtr()
    : mValue(0), mNumerator(0), mDenominator(0)
{
}


void BMS__RationalType::setValue( qint64 value )
{
    d_ptr->mValue = value;
}

qint64 BMS__RationalType::value() const
{
    return d_ptr->mValue;
}

BMS__RationalType::BMS__RationalType( qint64 value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__RationalType::operator qint64() const
{
    return d_ptr->mValue;
}

void BMS__RationalType::setNumerator( quint64 numerator )
{
    d_ptr->mNumerator = numerator;
}

quint64 BMS__RationalType::numerator() const
{
    return d_ptr->mNumerator;
}

void BMS__RationalType::setDenominator( quint64 denominator )
{
    d_ptr->mDenominator = denominator;
}

quint64 BMS__RationalType::denominator() const
{
    return d_ptr->mDenominator;
}

KDSoapValue BMS__RationalType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("RationalType"));// converter_complextype.cpp:385
    KDSoapValueList attribs;
    KDSoapValue _valueNumerator(QString::fromLatin1("numerator"), QVariant::fromValue(d_ptr->mNumerator), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("positiveInteger"));// elementargumentserializer.cpp:97
    _valueNumerator.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    attribs.append(_valueNumerator);// elementargumentserializer.cpp:111
    KDSoapValue _valueDenominator(QString::fromLatin1("denominator"), QVariant::fromValue(d_ptr->mDenominator), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("positiveInteger"));// elementargumentserializer.cpp:97
    _valueDenominator.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    attribs.append(_valueDenominator);// elementargumentserializer.cpp:111
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void BMS__RationalType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<qint64>();// converter_complextype.cpp:286
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("numerator")) {// converter_complextype.cpp:273
            d_ptr->mNumerator = val.value().value<quint64>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("denominator")) {// converter_complextype.cpp:273
            d_ptr->mDenominator = val.value().value<quint64>();// converter_complextype.cpp:286
        }
    }
}

BMS__RationalType::BMS__RationalType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__RationalType::~BMS__RationalType()
{
}

BMS__RationalType::BMS__RationalType( const BMS__RationalType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__RationalType&  BMS__RationalType::operator=( const BMS__RationalType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ExtensionAttributes::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    KDSoapValue mAnyAttribute;
    bool mAnyAttribute_nil;
};

BMS__ExtensionAttributes::PrivateDPtr::PrivateDPtr()
    : mAnyAttribute_nil(true)
{
}


void BMS__ExtensionAttributes::setAnyAttribute( const KDSoapValue& anyAttribute )
{
    d_ptr->mAnyAttribute_nil = false;// converter_complextype.cpp:244
    d_ptr->mAnyAttribute = anyAttribute;
}

KDSoapValue BMS__ExtensionAttributes::anyAttribute() const
{
    return d_ptr->mAnyAttribute;
}

KDSoapValue BMS__ExtensionAttributes::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ExtensionAttributes"));// converter_complextype.cpp:390
    KDSoapValueList attribs;
    if (!d_ptr->mAnyAttribute.isNull()) {
        attribs.append(d_ptr->mAnyAttribute);// elementargumentserializer.cpp:75
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void BMS__ExtensionAttributes::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("anyAttribute")) {// converter_complextype.cpp:273
            d_ptr->mAnyAttribute = val;// converter_complextype.cpp:284
        }
    }
}

BMS__ExtensionAttributes::BMS__ExtensionAttributes()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ExtensionAttributes::~BMS__ExtensionAttributes()
{
}

BMS__ExtensionAttributes::BMS__ExtensionAttributes( const BMS__ExtensionAttributes& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ExtensionAttributes&  BMS__ExtensionAttributes::operator=( const BMS__ExtensionAttributes& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __DateType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    __Created mCreated;
    bool mCreated_nil;
    __Modified mModified;
    bool mModified_nil;
    __Issued mIssued;
    bool mIssued_nil;
    __Alternative mAlternative;
    bool mAlternative_nil;
};

__DateType::PrivateDPtr::PrivateDPtr()
    : mCreated_nil(true), mModified_nil(true), mIssued_nil(true), mAlternative_nil(true)
{
}


void __DateType::setCreated( const __Created& created )
{
    d_ptr->mCreated_nil = false;// converter_complextype.cpp:244
    d_ptr->mCreated = created;
}

__Created __DateType::created() const
{
    return d_ptr->mCreated;
}

void __DateType::setModified( const __Modified& modified )
{
    d_ptr->mModified_nil = false;// converter_complextype.cpp:244
    d_ptr->mModified = modified;
}

__Modified __DateType::modified() const
{
    return d_ptr->mModified;
}

void __DateType::setIssued( const __Issued& issued )
{
    d_ptr->mIssued_nil = false;// converter_complextype.cpp:244
    d_ptr->mIssued = issued;
}

__Issued __DateType::issued() const
{
    return d_ptr->mIssued;
}

void __DateType::setAlternative( const __Alternative& alternative )
{
    d_ptr->mAlternative_nil = false;// converter_complextype.cpp:244
    d_ptr->mAlternative = alternative;
}

__Alternative __DateType::alternative() const
{
    return d_ptr->mAlternative;
}

KDSoapValue __DateType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("dateType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mCreated_nil) {
        KDSoapValue _valueCreated(d_ptr->mCreated.serialize(QString::fromLatin1("created")));// elementargumentserializer.cpp:91
        _valueCreated.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueCreated.setQualified(true);
        if (!_valueCreated.isNil())
        args.append(_valueCreated);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mModified_nil) {
        KDSoapValue _valueModified(d_ptr->mModified.serialize(QString::fromLatin1("modified")));// elementargumentserializer.cpp:91
        _valueModified.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueModified.setQualified(true);
        if (!_valueModified.isNil())
        args.append(_valueModified);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mIssued_nil) {
        KDSoapValue _valueIssued(d_ptr->mIssued.serialize(QString::fromLatin1("issued")));// elementargumentserializer.cpp:91
        _valueIssued.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueIssued.setQualified(true);
        if (!_valueIssued.isNil())
        args.append(_valueIssued);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAlternative_nil) {
        KDSoapValue _valueAlternative(d_ptr->mAlternative.serialize(QString::fromLatin1("alternative")));// elementargumentserializer.cpp:91
        _valueAlternative.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueAlternative.setQualified(true);
        if (!_valueAlternative.isNil())
        args.append(_valueAlternative);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void __DateType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("created")) {// converter_complextype.cpp:273
            d_ptr->mCreated.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("modified")) {// converter_complextype.cpp:273
            d_ptr->mModified.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("issued")) {// converter_complextype.cpp:273
            d_ptr->mIssued.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("alternative")) {// converter_complextype.cpp:273
            d_ptr->mAlternative.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

__DateType::__DateType()
    : d_ptr(new PrivateDPtr)
{
}

__DateType::~__DateType()
{
}

__DateType::__DateType( const __DateType& other )
    : d_ptr( other.d_ptr )
{
}

__DateType&  __DateType::operator=( const __DateType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TFMS__TransformNotificationType::PrivateDPtr : public QSharedData
{
public:
    TFMS__TransformJobType mTransformJob;
};

void TFMS__TransformNotificationType::setTransformJob( const TFMS__TransformJobType& transformJob )
{
    d_ptr->mTransformJob = transformJob;
}

TFMS__TransformJobType TFMS__TransformNotificationType::transformJob() const
{
    return d_ptr->mTransformJob;
}

KDSoapValue TFMS__TransformNotificationType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("TransformNotificationType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueTransformJob(d_ptr->mTransformJob.serialize(QString::fromLatin1("transformJob")));// elementargumentserializer.cpp:91
    _valueTransformJob.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformJob.setQualified(true);
    args.append(_valueTransformJob);// elementargumentserializer.cpp:111
    return mainValue;
}

void TFMS__TransformNotificationType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("transformJob")) {// converter_complextype.cpp:273
            d_ptr->mTransformJob.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

TFMS__TransformNotificationType::TFMS__TransformNotificationType()
    : d_ptr(new PrivateDPtr)
{
}

TFMS__TransformNotificationType::~TFMS__TransformNotificationType()
{
}

TFMS__TransformNotificationType::TFMS__TransformNotificationType( const TFMS__TransformNotificationType& other )
    : d_ptr( other.d_ptr )
{
}

TFMS__TransformNotificationType&  TFMS__TransformNotificationType::operator=( const TFMS__TransformNotificationType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __EntityType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< __ContactDetailsType > mContactDetails;
    bool mContactDetails_nil;
    QList< __OrganisationDetailsType > mOrganisationDetails;
    bool mOrganisationDetails_nil;
    QList< __Role > mRole;
    bool mRole_nil;
    QString mEntityId;
    bool mEntityId_nil;
};

__EntityType::PrivateDPtr::PrivateDPtr()
    : mContactDetails_nil(true), mOrganisationDetails_nil(true), mRole_nil(true), mEntityId_nil(true)
{
}


void __EntityType::setContactDetails( const QList< __ContactDetailsType >& contactDetails )
{
    d_ptr->mContactDetails_nil = false;// converter_complextype.cpp:244
    d_ptr->mContactDetails = contactDetails;
}

QList< __ContactDetailsType > __EntityType::contactDetails() const
{
    return d_ptr->mContactDetails;
}

void __EntityType::setOrganisationDetails( const QList< __OrganisationDetailsType >& organisationDetails )
{
    d_ptr->mOrganisationDetails_nil = false;// converter_complextype.cpp:244
    d_ptr->mOrganisationDetails = organisationDetails;
}

QList< __OrganisationDetailsType > __EntityType::organisationDetails() const
{
    return d_ptr->mOrganisationDetails;
}

void __EntityType::setRole( const QList< __Role >& role )
{
    d_ptr->mRole_nil = false;// converter_complextype.cpp:244
    d_ptr->mRole = role;
}

QList< __Role > __EntityType::role() const
{
    return d_ptr->mRole;
}

void __EntityType::setEntityId( const QString& entityId )
{
    d_ptr->mEntityId_nil = false;// converter_complextype.cpp:244
    d_ptr->mEntityId = entityId;
}

QString __EntityType::entityId() const
{
    return d_ptr->mEntityId;
}

KDSoapValue __EntityType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("entityType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mContactDetails.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueContactDetails(d_ptr->mContactDetails.at(i).serialize(QString::fromLatin1("contactDetails")));// elementargumentserializer.cpp:91
        _valueContactDetails.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueContactDetails.setQualified(true);
        args.append(_valueContactDetails);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mOrganisationDetails.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueOrganisationDetails(d_ptr->mOrganisationDetails.at(i).serialize(QString::fromLatin1("organisationDetails")));// elementargumentserializer.cpp:91
        _valueOrganisationDetails.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueOrganisationDetails.setQualified(true);
        args.append(_valueOrganisationDetails);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mRole.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueRole(d_ptr->mRole.at(i).serialize(QString::fromLatin1("role")));// elementargumentserializer.cpp:91
        _valueRole.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueRole.setQualified(true);
        args.append(_valueRole);// elementargumentserializer.cpp:111
    }
    KDSoapValueList attribs;
    if (!d_ptr->mEntityId_nil) {
        KDSoapValue _valueEntityId(QString::fromLatin1("entityId"), QVariant::fromValue(d_ptr->mEntityId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueEntityId.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        if (!_valueEntityId.isNil())
        attribs.append(_valueEntityId);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void __EntityType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("contactDetails")) {// converter_complextype.cpp:273
            __ContactDetailsType mContactDetailsTemp;// converter_complextype.cpp:331
            mContactDetailsTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mContactDetails.append(mContactDetailsTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("organisationDetails")) {// converter_complextype.cpp:273
            __OrganisationDetailsType mOrganisationDetailsTemp;// converter_complextype.cpp:331
            mOrganisationDetailsTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mOrganisationDetails.append(mOrganisationDetailsTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("role")) {// converter_complextype.cpp:273
            __Role mRoleTemp;// converter_complextype.cpp:331
            mRoleTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mRole.append(mRoleTemp);// converter_complextype.cpp:339
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("entityId")) {// converter_complextype.cpp:273
            d_ptr->mEntityId = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mEntityId_nil = false;// converter_complextype.cpp:288
        }
    }
}

__EntityType::__EntityType()
    : d_ptr(new PrivateDPtr)
{
}

__EntityType::~__EntityType()
{
}

__EntityType::__EntityType( const __EntityType& other )
    : d_ptr( other.d_ptr )
{
}

__EntityType&  __EntityType::operator=( const __EntityType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue __Issued::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("issued"));// converter_complextype.cpp:390
    return mainValue;
}

void __Issued::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__Issued::__Issued()
{
}

__Issued::~__Issued()
{
}


class BMS__BMTrackType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
    BMS__UID mTrackID;
    bool mTrackID_nil;
    QString mTrackName;
    bool mTrackName_nil;
    QString mLanguage;
    bool mLanguage_nil;
};

BMS__BMTrackType::PrivateDPtr::PrivateDPtr()
    : mExtensionGroup_nil(true), mExtensionAttributes_nil(true), mTrackID_nil(true), mTrackName_nil(true), mLanguage_nil(true)
{
}


void BMS__BMTrackType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__BMTrackType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__BMTrackType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__BMTrackType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

void BMS__BMTrackType::setTrackID( const BMS__UID& trackID )
{
    d_ptr->mTrackID_nil = false;// converter_complextype.cpp:244
    d_ptr->mTrackID = trackID;
}

BMS__UID BMS__BMTrackType::trackID() const
{
    return d_ptr->mTrackID;
}

void BMS__BMTrackType::setTrackName( const QString& trackName )
{
    d_ptr->mTrackName_nil = false;// converter_complextype.cpp:244
    d_ptr->mTrackName = trackName;
}

QString BMS__BMTrackType::trackName() const
{
    return d_ptr->mTrackName;
}

void BMS__BMTrackType::setLanguage( const QString& language )
{
    d_ptr->mLanguage_nil = false;// converter_complextype.cpp:244
    d_ptr->mLanguage = language;
}

QString BMS__BMTrackType::language() const
{
    return d_ptr->mLanguage;
}

KDSoapValue BMS__BMTrackType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMTrackType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    KDSoapValueList attribs;
    if (!d_ptr->mTrackID_nil) {
        KDSoapValue _valueTrackID(QString::fromLatin1("trackID"), d_ptr->mTrackID.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("UID"));// elementargumentserializer.cpp:99
        _valueTrackID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        if (!_valueTrackID.isNil())
        attribs.append(_valueTrackID);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mTrackName_nil) {
        KDSoapValue _valueTrackName(QString::fromLatin1("trackName"), QVariant::fromValue(d_ptr->mTrackName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueTrackName.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        if (!_valueTrackName.isNil())
        attribs.append(_valueTrackName);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mLanguage_nil) {
        KDSoapValue _valueLanguage(QString::fromLatin1("language"), QVariant::fromValue(d_ptr->mLanguage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("language"));// elementargumentserializer.cpp:97
        _valueLanguage.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        if (!_valueLanguage.isNil())
        attribs.append(_valueLanguage);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void BMS__BMTrackType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("trackID")) {// converter_complextype.cpp:273
            d_ptr->mTrackID.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mTrackID_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("trackName")) {// converter_complextype.cpp:273
            d_ptr->mTrackName = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mTrackName_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("language")) {// converter_complextype.cpp:273
            d_ptr->mLanguage = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mLanguage_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__BMTrackType::BMS__BMTrackType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMTrackType::~BMS__BMTrackType()
{
}

BMS__BMTrackType::BMS__BMTrackType( const BMS__BMTrackType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__BMTrackType&  BMS__BMTrackType::operator=( const BMS__BMTrackType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__JobsType::PrivateDPtr : public QSharedData
{
public:
    QList< BMS__JobType > mJob;
};

void BMS__JobsType::setJob( const QList< BMS__JobType >& job )
{
    d_ptr->mJob = job;
}

QList< BMS__JobType > BMS__JobsType::job() const
{
    return d_ptr->mJob;
}

KDSoapValue BMS__JobsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("JobsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mJob.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueJob(d_ptr->mJob.at(i).serialize(QString::fromLatin1("job")));// elementargumentserializer.cpp:91
        _valueJob.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueJob.setQualified(true);
        args.append(_valueJob);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__JobsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("job")) {// converter_complextype.cpp:273
            BMS__JobType mJobTemp;// converter_complextype.cpp:331
            mJobTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mJob.append(mJobTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__JobsType::BMS__JobsType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__JobsType::~BMS__JobsType()
{
}

BMS__JobsType::BMS__JobsType( const BMS__JobsType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__JobsType&  BMS__JobsType::operator=( const BMS__JobsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__InnerFaultType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCode;
    QString mDescription;
    bool mDescription_nil;
    QString mDetail;
    bool mDetail_nil;
};

BMS__InnerFaultType::PrivateDPtr::PrivateDPtr()
    : mDescription_nil(true), mDetail_nil(true)
{
}


void BMS__InnerFaultType::setCode( const QString& code )
{
    d_ptr->mCode = code;
}

QString BMS__InnerFaultType::code() const
{
    return d_ptr->mCode;
}

void BMS__InnerFaultType::setDescription( const QString& description )
{
    d_ptr->mDescription_nil = false;// converter_complextype.cpp:244
    d_ptr->mDescription = description;
}

QString BMS__InnerFaultType::description() const
{
    return d_ptr->mDescription;
}

void BMS__InnerFaultType::setDetail( const QString& detail )
{
    d_ptr->mDetail_nil = false;// converter_complextype.cpp:244
    d_ptr->mDetail = detail;
}

QString BMS__InnerFaultType::detail() const
{
    return d_ptr->mDetail;
}

KDSoapValue BMS__InnerFaultType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("InnerFaultType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueCode(QString::fromLatin1("code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
    _valueCode.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueCode.setQualified(true);
    args.append(_valueCode);// elementargumentserializer.cpp:111
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDescription.setQualified(true);
        if (!_valueDescription.isNil())
        args.append(_valueDescription);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mDetail_nil) {
        KDSoapValue _valueDetail(QString::fromLatin1("detail"), QVariant::fromValue(d_ptr->mDetail), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueDetail.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDetail.setQualified(true);
        if (!_valueDetail.isNil())
        args.append(_valueDetail);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__InnerFaultType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("code")) {// converter_complextype.cpp:273
            d_ptr->mCode = val.value().value<QString>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("description")) {// converter_complextype.cpp:273
            d_ptr->mDescription = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mDescription_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("detail")) {// converter_complextype.cpp:273
            d_ptr->mDetail = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mDetail_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__InnerFaultType::BMS__InnerFaultType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__InnerFaultType::~BMS__InnerFaultType()
{
}

BMS__InnerFaultType::BMS__InnerFaultType( const BMS__InnerFaultType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__InnerFaultType&  BMS__InnerFaultType::operator=( const BMS__InnerFaultType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__BMObjectsType::PrivateDPtr : public QSharedData
{
public:
    QList< BMS__BMObjectType > mBmObject;
};

void BMS__BMObjectsType::setBmObject( const QList< BMS__BMObjectType >& bmObject )
{
    d_ptr->mBmObject = bmObject;
}

QList< BMS__BMObjectType > BMS__BMObjectsType::bmObject() const
{
    return d_ptr->mBmObject;
}

KDSoapValue BMS__BMObjectsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMObjectsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mBmObject.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueBmObject(d_ptr->mBmObject.at(i).serialize(QString::fromLatin1("bmObject")));// elementargumentserializer.cpp:91
        _valueBmObject.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBmObject.setQualified(true);
        args.append(_valueBmObject);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__BMObjectsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("bmObject")) {// converter_complextype.cpp:273
            BMS__BMObjectType mBmObjectTemp;// converter_complextype.cpp:331
            mBmObjectTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mBmObject.append(mBmObjectTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__BMObjectsType::BMS__BMObjectsType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMObjectsType::~BMS__BMObjectsType()
{
}

BMS__BMObjectsType::BMS__BMObjectsType( const BMS__BMObjectsType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__BMObjectsType&  BMS__BMObjectsType::operator=( const BMS__BMObjectsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ManageJobRequestType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__UID mJobID;
    BMS__JobCommandType mJobCommand;
    BMS__PriorityType mPriority;
    bool mPriority_nil;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__ManageJobRequestType::PrivateDPtr::PrivateDPtr()
    : mPriority_nil(true), mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__ManageJobRequestType::setJobID( const BMS__UID& jobID )
{
    d_ptr->mJobID = jobID;
}

BMS__UID BMS__ManageJobRequestType::jobID() const
{
    return d_ptr->mJobID;
}

void BMS__ManageJobRequestType::setJobCommand( const BMS__JobCommandType& jobCommand )
{
    d_ptr->mJobCommand = jobCommand;
}

BMS__JobCommandType BMS__ManageJobRequestType::jobCommand() const
{
    return d_ptr->mJobCommand;
}

void BMS__ManageJobRequestType::setPriority( const BMS__PriorityType& priority )
{
    d_ptr->mPriority_nil = false;// converter_complextype.cpp:244
    d_ptr->mPriority = priority;
}

BMS__PriorityType BMS__ManageJobRequestType::priority() const
{
    return d_ptr->mPriority;
}

void BMS__ManageJobRequestType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__ManageJobRequestType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__ManageJobRequestType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__ManageJobRequestType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__ManageJobRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ManageJobRequestType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueJobID(QString::fromLatin1("jobID"), d_ptr->mJobID.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("UID"));// elementargumentserializer.cpp:99
    _valueJobID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueJobID.setQualified(true);
    args.append(_valueJobID);// elementargumentserializer.cpp:111
    KDSoapValue _valueJobCommand(QString::fromLatin1("jobCommand"), d_ptr->mJobCommand.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("JobCommandType"));// elementargumentserializer.cpp:99
    _valueJobCommand.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueJobCommand.setQualified(true);
    args.append(_valueJobCommand);// elementargumentserializer.cpp:111
    if (!d_ptr->mPriority_nil) {
        KDSoapValue _valuePriority(QString::fromLatin1("priority"), d_ptr->mPriority.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("PriorityType"));// elementargumentserializer.cpp:99
        _valuePriority.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valuePriority.setQualified(true);
        if (!_valuePriority.isNil())
        args.append(_valuePriority);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ManageJobRequestType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("jobID")) {// converter_complextype.cpp:273
            d_ptr->mJobID.deserialize(val.value());// converter_complextype.cpp:292
        }
        else if (name == QLatin1String("jobCommand")) {// converter_complextype.cpp:273
            d_ptr->mJobCommand.deserialize(val.value());// converter_complextype.cpp:292
        }
        else if (name == QLatin1String("priority")) {// converter_complextype.cpp:273
            d_ptr->mPriority.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mPriority_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__ManageJobRequestType::BMS__ManageJobRequestType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ManageJobRequestType::~BMS__ManageJobRequestType()
{
}

BMS__ManageJobRequestType::BMS__ManageJobRequestType( const BMS__ManageJobRequestType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ManageJobRequestType&  BMS__ManageJobRequestType::operator=( const BMS__ManageJobRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __TypeType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< __Genre > mGenre;
    bool mGenre_nil;
    QList< __ObjectType > mObjectType;
    bool mObjectType_nil;
    QList< __TargetAudience > mTargetAudience;
    bool mTargetAudience_nil;
};

__TypeType::PrivateDPtr::PrivateDPtr()
    : mGenre_nil(true), mObjectType_nil(true), mTargetAudience_nil(true)
{
}


void __TypeType::setGenre( const QList< __Genre >& genre )
{
    d_ptr->mGenre_nil = false;// converter_complextype.cpp:244
    d_ptr->mGenre = genre;
}

QList< __Genre > __TypeType::genre() const
{
    return d_ptr->mGenre;
}

void __TypeType::setObjectType( const QList< __ObjectType >& objectType )
{
    d_ptr->mObjectType_nil = false;// converter_complextype.cpp:244
    d_ptr->mObjectType = objectType;
}

QList< __ObjectType > __TypeType::objectType() const
{
    return d_ptr->mObjectType;
}

void __TypeType::setTargetAudience( const QList< __TargetAudience >& targetAudience )
{
    d_ptr->mTargetAudience_nil = false;// converter_complextype.cpp:244
    d_ptr->mTargetAudience = targetAudience;
}

QList< __TargetAudience > __TypeType::targetAudience() const
{
    return d_ptr->mTargetAudience;
}

KDSoapValue __TypeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("typeType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mGenre.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueGenre(d_ptr->mGenre.at(i).serialize(QString::fromLatin1("genre")));// elementargumentserializer.cpp:91
        _valueGenre.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueGenre.setQualified(true);
        args.append(_valueGenre);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mObjectType.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueObjectType(d_ptr->mObjectType.at(i).serialize(QString::fromLatin1("objectType")));// elementargumentserializer.cpp:91
        _valueObjectType.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueObjectType.setQualified(true);
        args.append(_valueObjectType);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mTargetAudience.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueTargetAudience(d_ptr->mTargetAudience.at(i).serialize(QString::fromLatin1("targetAudience")));// elementargumentserializer.cpp:91
        _valueTargetAudience.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueTargetAudience.setQualified(true);
        args.append(_valueTargetAudience);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void __TypeType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("genre")) {// converter_complextype.cpp:273
            __Genre mGenreTemp;// converter_complextype.cpp:331
            mGenreTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mGenre.append(mGenreTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("objectType")) {// converter_complextype.cpp:273
            __ObjectType mObjectTypeTemp;// converter_complextype.cpp:331
            mObjectTypeTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mObjectType.append(mObjectTypeTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("targetAudience")) {// converter_complextype.cpp:273
            __TargetAudience mTargetAudienceTemp;// converter_complextype.cpp:331
            mTargetAudienceTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mTargetAudience.append(mTargetAudienceTemp);// converter_complextype.cpp:339
        }
    }
}

__TypeType::__TypeType()
    : d_ptr(new PrivateDPtr)
{
}

__TypeType::~__TypeType()
{
}

__TypeType::__TypeType( const __TypeType& other )
    : d_ptr( other.d_ptr )
{
}

__TypeType&  __TypeType::operator=( const __TypeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__AncillaryDataFormatType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mDID;
    bool mDID_nil;
    qint64 mSDID;
    bool mSDID_nil;
    qint64 mLineNumber;
    bool mLineNumber_nil;
    qint64 mWrappingType;
    bool mWrappingType_nil;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__AncillaryDataFormatType::PrivateDPtr::PrivateDPtr()
    : mDID(0), mDID_nil(true), mSDID(0), mSDID_nil(true), mLineNumber(0), mLineNumber_nil(true), mWrappingType(0), mWrappingType_nil(true), mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__AncillaryDataFormatType::setDID( qint64 dID )
{
    d_ptr->mDID_nil = false;// converter_complextype.cpp:244
    d_ptr->mDID = dID;
}

qint64 BMS__AncillaryDataFormatType::dID() const
{
    return d_ptr->mDID;
}

void BMS__AncillaryDataFormatType::setSDID( qint64 sDID )
{
    d_ptr->mSDID_nil = false;// converter_complextype.cpp:244
    d_ptr->mSDID = sDID;
}

qint64 BMS__AncillaryDataFormatType::sDID() const
{
    return d_ptr->mSDID;
}

void BMS__AncillaryDataFormatType::setLineNumber( qint64 lineNumber )
{
    d_ptr->mLineNumber_nil = false;// converter_complextype.cpp:244
    d_ptr->mLineNumber = lineNumber;
}

qint64 BMS__AncillaryDataFormatType::lineNumber() const
{
    return d_ptr->mLineNumber;
}

void BMS__AncillaryDataFormatType::setWrappingType( qint64 wrappingType )
{
    d_ptr->mWrappingType_nil = false;// converter_complextype.cpp:244
    d_ptr->mWrappingType = wrappingType;
}

qint64 BMS__AncillaryDataFormatType::wrappingType() const
{
    return d_ptr->mWrappingType;
}

void BMS__AncillaryDataFormatType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__AncillaryDataFormatType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__AncillaryDataFormatType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__AncillaryDataFormatType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__AncillaryDataFormatType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("AncillaryDataFormatType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mDID_nil) {
        KDSoapValue _valueDID(QString::fromLatin1("DID"), QVariant::fromValue(d_ptr->mDID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));// elementargumentserializer.cpp:97
        _valueDID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDID.setQualified(true);
        if (!_valueDID.isNil())
        args.append(_valueDID);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mSDID_nil) {
        KDSoapValue _valueSDID(QString::fromLatin1("SDID"), QVariant::fromValue(d_ptr->mSDID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));// elementargumentserializer.cpp:97
        _valueSDID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueSDID.setQualified(true);
        if (!_valueSDID.isNil())
        args.append(_valueSDID);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mLineNumber_nil) {
        KDSoapValue _valueLineNumber(QString::fromLatin1("lineNumber"), QVariant::fromValue(d_ptr->mLineNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));// elementargumentserializer.cpp:97
        _valueLineNumber.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueLineNumber.setQualified(true);
        if (!_valueLineNumber.isNil())
        args.append(_valueLineNumber);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mWrappingType_nil) {
        KDSoapValue _valueWrappingType(QString::fromLatin1("wrappingType"), QVariant::fromValue(d_ptr->mWrappingType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));// elementargumentserializer.cpp:97
        _valueWrappingType.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueWrappingType.setQualified(true);
        if (!_valueWrappingType.isNil())
        args.append(_valueWrappingType);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__AncillaryDataFormatType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DID")) {// converter_complextype.cpp:273
            d_ptr->mDID = val.value().value<qint64>();// converter_complextype.cpp:286
            d_ptr->mDID_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("SDID")) {// converter_complextype.cpp:273
            d_ptr->mSDID = val.value().value<qint64>();// converter_complextype.cpp:286
            d_ptr->mSDID_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("lineNumber")) {// converter_complextype.cpp:273
            d_ptr->mLineNumber = val.value().value<qint64>();// converter_complextype.cpp:286
            d_ptr->mLineNumber_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("wrappingType")) {// converter_complextype.cpp:273
            d_ptr->mWrappingType = val.value().value<qint64>();// converter_complextype.cpp:286
            d_ptr->mWrappingType_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__AncillaryDataFormatType::BMS__AncillaryDataFormatType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__AncillaryDataFormatType::~BMS__AncillaryDataFormatType()
{
}

BMS__AncillaryDataFormatType::BMS__AncillaryDataFormatType( const BMS__AncillaryDataFormatType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__AncillaryDataFormatType&  BMS__AncillaryDataFormatType::operator=( const BMS__AncillaryDataFormatType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue __Alternative::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("alternative"));// converter_complextype.cpp:390
    return mainValue;
}

void __Alternative::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__Alternative::__Alternative()
{
}

__Alternative::~__Alternative()
{
}


KDSoapValue __Role::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("role"));// converter_complextype.cpp:390
    return mainValue;
}

void __Role::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__Role::__Role()
{
}

__Role::~__Role()
{
}


KDSoapValue __Country::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("country"));// converter_complextype.cpp:390
    return mainValue;
}

void __Country::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__Country::__Country()
{
}

__Country::~__Country()
{
}


class __RightsType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< __TextElementType > mRightsExpression;
    bool mRightsExpression_nil;
    QString mRightsLink;
    bool mRightsLink_nil;
    __EntityType mRightsHolder;
    bool mRightsHolder_nil;
    __TextElementType mExploitationIssues;
    bool mExploitationIssues_nil;
    __CoverageType mCoverage;
    bool mCoverage_nil;
    bool mRightsClearanceFlag;
    bool mRightsClearanceFlag_nil;
    QList< __TextElementType > mDisclaimer;
    bool mDisclaimer_nil;
    QList< __IdentifierType > mRightsId;
    bool mRightsId_nil;
    QList< __ContactDetailsType > mContactDetails;
    bool mContactDetails_nil;
};

__RightsType::PrivateDPtr::PrivateDPtr()
    : mRightsExpression_nil(true), mRightsLink_nil(true), mRightsHolder_nil(true), mExploitationIssues_nil(true), mCoverage_nil(true), mRightsClearanceFlag(false), mRightsClearanceFlag_nil(true), mDisclaimer_nil(true), mRightsId_nil(true), mContactDetails_nil(true)
{
}


void __RightsType::setRightsExpression( const QList< __TextElementType >& rightsExpression )
{
    d_ptr->mRightsExpression_nil = false;// converter_complextype.cpp:244
    d_ptr->mRightsExpression = rightsExpression;
}

QList< __TextElementType > __RightsType::rightsExpression() const
{
    return d_ptr->mRightsExpression;
}

void __RightsType::setRightsLink( const QString& rightsLink )
{
    d_ptr->mRightsLink_nil = false;// converter_complextype.cpp:244
    d_ptr->mRightsLink = rightsLink;
}

QString __RightsType::rightsLink() const
{
    return d_ptr->mRightsLink;
}

void __RightsType::setRightsHolder( const __EntityType& rightsHolder )
{
    d_ptr->mRightsHolder_nil = false;// converter_complextype.cpp:244
    d_ptr->mRightsHolder = rightsHolder;
}

__EntityType __RightsType::rightsHolder() const
{
    return d_ptr->mRightsHolder;
}

void __RightsType::setExploitationIssues( const __TextElementType& exploitationIssues )
{
    d_ptr->mExploitationIssues_nil = false;// converter_complextype.cpp:244
    d_ptr->mExploitationIssues = exploitationIssues;
}

__TextElementType __RightsType::exploitationIssues() const
{
    return d_ptr->mExploitationIssues;
}

void __RightsType::setCoverage( const __CoverageType& coverage )
{
    d_ptr->mCoverage_nil = false;// converter_complextype.cpp:244
    d_ptr->mCoverage = coverage;
}

__CoverageType __RightsType::coverage() const
{
    return d_ptr->mCoverage;
}

void __RightsType::setRightsClearanceFlag( bool rightsClearanceFlag )
{
    d_ptr->mRightsClearanceFlag_nil = false;// converter_complextype.cpp:244
    d_ptr->mRightsClearanceFlag = rightsClearanceFlag;
}

bool __RightsType::rightsClearanceFlag() const
{
    return d_ptr->mRightsClearanceFlag;
}

void __RightsType::setDisclaimer( const QList< __TextElementType >& disclaimer )
{
    d_ptr->mDisclaimer_nil = false;// converter_complextype.cpp:244
    d_ptr->mDisclaimer = disclaimer;
}

QList< __TextElementType > __RightsType::disclaimer() const
{
    return d_ptr->mDisclaimer;
}

void __RightsType::setRightsId( const QList< __IdentifierType >& rightsId )
{
    d_ptr->mRightsId_nil = false;// converter_complextype.cpp:244
    d_ptr->mRightsId = rightsId;
}

QList< __IdentifierType > __RightsType::rightsId() const
{
    return d_ptr->mRightsId;
}

void __RightsType::setContactDetails( const QList< __ContactDetailsType >& contactDetails )
{
    d_ptr->mContactDetails_nil = false;// converter_complextype.cpp:244
    d_ptr->mContactDetails = contactDetails;
}

QList< __ContactDetailsType > __RightsType::contactDetails() const
{
    return d_ptr->mContactDetails;
}

KDSoapValue __RightsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("rightsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mRightsExpression.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueRightsExpression(d_ptr->mRightsExpression.at(i).serialize(QString::fromLatin1("rightsExpression")));// elementargumentserializer.cpp:91
        _valueRightsExpression.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueRightsExpression.setQualified(true);
        args.append(_valueRightsExpression);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mRightsLink_nil) {
        KDSoapValue _valueRightsLink(QString::fromLatin1("rightsLink"), QVariant::fromValue(d_ptr->mRightsLink), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueRightsLink.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueRightsLink.setQualified(true);
        if (!_valueRightsLink.isNil())
        args.append(_valueRightsLink);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mRightsHolder_nil) {
        KDSoapValue _valueRightsHolder(d_ptr->mRightsHolder.serialize(QString::fromLatin1("rightsHolder")));// elementargumentserializer.cpp:91
        _valueRightsHolder.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueRightsHolder.setQualified(true);
        if (!_valueRightsHolder.isNil())
        args.append(_valueRightsHolder);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExploitationIssues_nil) {
        KDSoapValue _valueExploitationIssues(d_ptr->mExploitationIssues.serialize(QString::fromLatin1("exploitationIssues")));// elementargumentserializer.cpp:91
        _valueExploitationIssues.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueExploitationIssues.setQualified(true);
        if (!_valueExploitationIssues.isNil())
        args.append(_valueExploitationIssues);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mCoverage_nil) {
        KDSoapValue _valueCoverage(d_ptr->mCoverage.serialize(QString::fromLatin1("coverage")));// elementargumentserializer.cpp:91
        _valueCoverage.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueCoverage.setQualified(true);
        if (!_valueCoverage.isNil())
        args.append(_valueCoverage);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mRightsClearanceFlag_nil) {
        KDSoapValue _valueRightsClearanceFlag(QString::fromLatin1("rightsClearanceFlag"), QVariant::fromValue(d_ptr->mRightsClearanceFlag), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:97
        _valueRightsClearanceFlag.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueRightsClearanceFlag.setQualified(true);
        if (!_valueRightsClearanceFlag.isNil())
        args.append(_valueRightsClearanceFlag);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mDisclaimer.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueDisclaimer(d_ptr->mDisclaimer.at(i).serialize(QString::fromLatin1("disclaimer")));// elementargumentserializer.cpp:91
        _valueDisclaimer.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueDisclaimer.setQualified(true);
        args.append(_valueDisclaimer);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mRightsId.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueRightsId(d_ptr->mRightsId.at(i).serialize(QString::fromLatin1("rightsId")));// elementargumentserializer.cpp:91
        _valueRightsId.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueRightsId.setQualified(true);
        args.append(_valueRightsId);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mContactDetails.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueContactDetails(d_ptr->mContactDetails.at(i).serialize(QString::fromLatin1("contactDetails")));// elementargumentserializer.cpp:91
        _valueContactDetails.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueContactDetails.setQualified(true);
        args.append(_valueContactDetails);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void __RightsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("rightsExpression")) {// converter_complextype.cpp:273
            __TextElementType mRightsExpressionTemp;// converter_complextype.cpp:331
            mRightsExpressionTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mRightsExpression.append(mRightsExpressionTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("rightsLink")) {// converter_complextype.cpp:273
            d_ptr->mRightsLink = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mRightsLink_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("rightsHolder")) {// converter_complextype.cpp:273
            d_ptr->mRightsHolder.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("exploitationIssues")) {// converter_complextype.cpp:273
            d_ptr->mExploitationIssues.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("coverage")) {// converter_complextype.cpp:273
            d_ptr->mCoverage.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("rightsClearanceFlag")) {// converter_complextype.cpp:273
            d_ptr->mRightsClearanceFlag = val.value().value<bool>();// converter_complextype.cpp:286
            d_ptr->mRightsClearanceFlag_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("disclaimer")) {// converter_complextype.cpp:273
            __TextElementType mDisclaimerTemp;// converter_complextype.cpp:331
            mDisclaimerTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mDisclaimer.append(mDisclaimerTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("rightsId")) {// converter_complextype.cpp:273
            __IdentifierType mRightsIdTemp;// converter_complextype.cpp:331
            mRightsIdTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mRightsId.append(mRightsIdTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("contactDetails")) {// converter_complextype.cpp:273
            __ContactDetailsType mContactDetailsTemp;// converter_complextype.cpp:331
            mContactDetailsTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mContactDetails.append(mContactDetailsTemp);// converter_complextype.cpp:339
        }
    }
}

__RightsType::__RightsType()
    : d_ptr(new PrivateDPtr)
{
}

__RightsType::~__RightsType()
{
}

__RightsType::__RightsType( const __RightsType& other )
    : d_ptr( other.d_ptr )
{
}

__RightsType&  __RightsType::operator=( const __RightsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue BMS__StartJobType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("StartJobType"));// converter_complextype.cpp:390
    return mainValue;
}

void BMS__StartJobType::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__StartJobType::BMS__StartJobType()
{
}

BMS__StartJobType::~BMS__StartJobType()
{
}

BMS__StartJobType *BMS__StartJobType::_kd_clone() const
{
    return new BMS__StartJobType(*this);
}


class BMS__ProcessedInfoType::PrivateDPtr : public QSharedData
{
public:
    BMS__PercentageProcessedCompleted mPercentageProcessedCompleted;
};

void BMS__ProcessedInfoType::setPercentageProcessedCompleted( const BMS__PercentageProcessedCompleted& percentageProcessedCompleted )
{
    d_ptr->mPercentageProcessedCompleted = percentageProcessedCompleted;
}

BMS__PercentageProcessedCompleted BMS__ProcessedInfoType::percentageProcessedCompleted() const
{
    return d_ptr->mPercentageProcessedCompleted;
}

KDSoapValue BMS__ProcessedInfoType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ProcessedInfoType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valuePercentageProcessedCompleted(QString::fromLatin1("percentageProcessedCompleted"), d_ptr->mPercentageProcessedCompleted.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("percentageProcessedCompleted"));// elementargumentserializer.cpp:99
    _valuePercentageProcessedCompleted.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valuePercentageProcessedCompleted.setQualified(true);
    args.append(_valuePercentageProcessedCompleted);// elementargumentserializer.cpp:111
    return mainValue;
}

void BMS__ProcessedInfoType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("percentageProcessedCompleted")) {// converter_complextype.cpp:273
            d_ptr->mPercentageProcessedCompleted.deserialize(val.value());// converter_complextype.cpp:292
        }
    }
}

BMS__ProcessedInfoType::BMS__ProcessedInfoType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ProcessedInfoType::~BMS__ProcessedInfoType()
{
}

BMS__ProcessedInfoType *BMS__ProcessedInfoType::_kd_clone() const
{
    return new BMS__ProcessedInfoType(*this);
}

BMS__ProcessedInfoType::BMS__ProcessedInfoType( const BMS__ProcessedInfoType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ProcessedInfoType&  BMS__ProcessedInfoType::operator=( const BMS__ProcessedInfoType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ListFilterType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    KDDateTime mFromDate;
    bool mFromDate_nil;
    KDDateTime mToDate;
    bool mToDate_nil;
    bool mIncludeQueued;
    bool mIncludeActive;
    bool mIncludeFinished;
    bool mIncludeFailed;
    quint64 mMaxNumberResults;
    bool mMaxNumberResults_nil;
};

BMS__ListFilterType::PrivateDPtr::PrivateDPtr()
    : mFromDate_nil(true), mToDate_nil(true), mIncludeQueued(false), mIncludeActive(false), mIncludeFinished(false), mIncludeFailed(false), mMaxNumberResults(0), mMaxNumberResults_nil(true)
{
}


void BMS__ListFilterType::setFromDate( const KDDateTime& fromDate )
{
    d_ptr->mFromDate_nil = false;// converter_complextype.cpp:244
    d_ptr->mFromDate = fromDate;
}

KDDateTime BMS__ListFilterType::fromDate() const
{
    return d_ptr->mFromDate;
}

void BMS__ListFilterType::setToDate( const KDDateTime& toDate )
{
    d_ptr->mToDate_nil = false;// converter_complextype.cpp:244
    d_ptr->mToDate = toDate;
}

KDDateTime BMS__ListFilterType::toDate() const
{
    return d_ptr->mToDate;
}

void BMS__ListFilterType::setIncludeQueued( bool includeQueued )
{
    d_ptr->mIncludeQueued = includeQueued;
}

bool BMS__ListFilterType::includeQueued() const
{
    return d_ptr->mIncludeQueued;
}

void BMS__ListFilterType::setIncludeActive( bool includeActive )
{
    d_ptr->mIncludeActive = includeActive;
}

bool BMS__ListFilterType::includeActive() const
{
    return d_ptr->mIncludeActive;
}

void BMS__ListFilterType::setIncludeFinished( bool includeFinished )
{
    d_ptr->mIncludeFinished = includeFinished;
}

bool BMS__ListFilterType::includeFinished() const
{
    return d_ptr->mIncludeFinished;
}

void BMS__ListFilterType::setIncludeFailed( bool includeFailed )
{
    d_ptr->mIncludeFailed = includeFailed;
}

bool BMS__ListFilterType::includeFailed() const
{
    return d_ptr->mIncludeFailed;
}

void BMS__ListFilterType::setMaxNumberResults( quint64 maxNumberResults )
{
    d_ptr->mMaxNumberResults_nil = false;// converter_complextype.cpp:244
    d_ptr->mMaxNumberResults = maxNumberResults;
}

quint64 BMS__ListFilterType::maxNumberResults() const
{
    return d_ptr->mMaxNumberResults;
}

KDSoapValue BMS__ListFilterType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ListFilterType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mFromDate_nil) {
        KDSoapValue _valueFromDate(QString::fromLatin1("fromDate"), d_ptr->mFromDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:97
        _valueFromDate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueFromDate.setQualified(true);
        if (!_valueFromDate.isNil())
        args.append(_valueFromDate);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mToDate_nil) {
        KDSoapValue _valueToDate(QString::fromLatin1("toDate"), d_ptr->mToDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:97
        _valueToDate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueToDate.setQualified(true);
        if (!_valueToDate.isNil())
        args.append(_valueToDate);// elementargumentserializer.cpp:111
    }
    KDSoapValue _valueIncludeQueued(QString::fromLatin1("includeQueued"), QVariant::fromValue(d_ptr->mIncludeQueued), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:97
    _valueIncludeQueued.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueIncludeQueued.setQualified(true);
    args.append(_valueIncludeQueued);// elementargumentserializer.cpp:111
    KDSoapValue _valueIncludeActive(QString::fromLatin1("includeActive"), QVariant::fromValue(d_ptr->mIncludeActive), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:97
    _valueIncludeActive.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueIncludeActive.setQualified(true);
    args.append(_valueIncludeActive);// elementargumentserializer.cpp:111
    KDSoapValue _valueIncludeFinished(QString::fromLatin1("includeFinished"), QVariant::fromValue(d_ptr->mIncludeFinished), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:97
    _valueIncludeFinished.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueIncludeFinished.setQualified(true);
    args.append(_valueIncludeFinished);// elementargumentserializer.cpp:111
    KDSoapValue _valueIncludeFailed(QString::fromLatin1("includeFailed"), QVariant::fromValue(d_ptr->mIncludeFailed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:97
    _valueIncludeFailed.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueIncludeFailed.setQualified(true);
    args.append(_valueIncludeFailed);// elementargumentserializer.cpp:111
    if (!d_ptr->mMaxNumberResults_nil) {
        KDSoapValue _valueMaxNumberResults(QString::fromLatin1("maxNumberResults"), QVariant::fromValue(d_ptr->mMaxNumberResults), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueMaxNumberResults.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueMaxNumberResults.setQualified(true);
        if (!_valueMaxNumberResults.isNil())
        args.append(_valueMaxNumberResults);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ListFilterType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("fromDate")) {// converter_complextype.cpp:273
            d_ptr->mFromDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:286
            d_ptr->mFromDate_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("toDate")) {// converter_complextype.cpp:273
            d_ptr->mToDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:286
            d_ptr->mToDate_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("includeQueued")) {// converter_complextype.cpp:273
            d_ptr->mIncludeQueued = val.value().value<bool>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("includeActive")) {// converter_complextype.cpp:273
            d_ptr->mIncludeActive = val.value().value<bool>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("includeFinished")) {// converter_complextype.cpp:273
            d_ptr->mIncludeFinished = val.value().value<bool>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("includeFailed")) {// converter_complextype.cpp:273
            d_ptr->mIncludeFailed = val.value().value<bool>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("maxNumberResults")) {// converter_complextype.cpp:273
            d_ptr->mMaxNumberResults = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mMaxNumberResults_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__ListFilterType::BMS__ListFilterType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ListFilterType::~BMS__ListFilterType()
{
}

BMS__ListFilterType::BMS__ListFilterType( const BMS__ListFilterType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ListFilterType&  BMS__ListFilterType::operator=( const BMS__ListFilterType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ManageQueueRequestType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__UID mQueueID;
    bool mQueueID_nil;
    BMS__QueueCommandType mQueueCommand;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__ManageQueueRequestType::PrivateDPtr::PrivateDPtr()
    : mQueueID_nil(true), mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__ManageQueueRequestType::setQueueID( const BMS__UID& queueID )
{
    d_ptr->mQueueID_nil = false;// converter_complextype.cpp:244
    d_ptr->mQueueID = queueID;
}

BMS__UID BMS__ManageQueueRequestType::queueID() const
{
    return d_ptr->mQueueID;
}

void BMS__ManageQueueRequestType::setQueueCommand( const BMS__QueueCommandType& queueCommand )
{
    d_ptr->mQueueCommand = queueCommand;
}

BMS__QueueCommandType BMS__ManageQueueRequestType::queueCommand() const
{
    return d_ptr->mQueueCommand;
}

void BMS__ManageQueueRequestType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__ManageQueueRequestType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__ManageQueueRequestType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__ManageQueueRequestType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__ManageQueueRequestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ManageQueueRequestType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mQueueID_nil) {
        KDSoapValue _valueQueueID(QString::fromLatin1("queueID"), d_ptr->mQueueID.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("UID"));// elementargumentserializer.cpp:99
        _valueQueueID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueQueueID.setQualified(true);
        if (!_valueQueueID.isNil())
        args.append(_valueQueueID);// elementargumentserializer.cpp:111
    }
    KDSoapValue _valueQueueCommand(QString::fromLatin1("queueCommand"), d_ptr->mQueueCommand.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("QueueCommandType"));// elementargumentserializer.cpp:99
    _valueQueueCommand.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueQueueCommand.setQualified(true);
    args.append(_valueQueueCommand);// elementargumentserializer.cpp:111
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ManageQueueRequestType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("queueID")) {// converter_complextype.cpp:273
            d_ptr->mQueueID.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mQueueID_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("queueCommand")) {// converter_complextype.cpp:273
            d_ptr->mQueueCommand.deserialize(val.value());// converter_complextype.cpp:292
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__ManageQueueRequestType::BMS__ManageQueueRequestType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ManageQueueRequestType::~BMS__ManageQueueRequestType()
{
}

BMS__ManageQueueRequestType::BMS__ManageQueueRequestType( const BMS__ManageQueueRequestType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ManageQueueRequestType&  BMS__ManageQueueRequestType::operator=( const BMS__ManageQueueRequestType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __IdentifierType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
};

void __IdentifierType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString __IdentifierType::value() const
{
    return d_ptr->mValue;
}

__IdentifierType::__IdentifierType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

__IdentifierType::operator QString() const
{
    return d_ptr->mValue;
}

KDSoapValue __IdentifierType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("identifierType"));// converter_complextype.cpp:385
    return mainValue;
}

void __IdentifierType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// converter_complextype.cpp:286
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__IdentifierType::__IdentifierType()
    : d_ptr(new PrivateDPtr)
{
}

__IdentifierType::~__IdentifierType()
{
}

__IdentifierType::__IdentifierType( const __IdentifierType& other )
    : d_ptr( other.d_ptr )
{
}

__IdentifierType&  __IdentifierType::operator=( const __IdentifierType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __AddressType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< __TextElementType > mAddressLine;
    bool mAddressLine_nil;
    __TextElementType mAddressTownCity;
    bool mAddressTownCity_nil;
    __TextElementType mAddressCountyState;
    bool mAddressCountyState_nil;
    QString mAddressDeliveryCode;
    bool mAddressDeliveryCode_nil;
    __Country mCountry;
    bool mCountry_nil;
};

__AddressType::PrivateDPtr::PrivateDPtr()
    : mAddressLine_nil(true), mAddressTownCity_nil(true), mAddressCountyState_nil(true), mAddressDeliveryCode_nil(true), mCountry_nil(true)
{
}


void __AddressType::setAddressLine( const QList< __TextElementType >& addressLine )
{
    d_ptr->mAddressLine_nil = false;// converter_complextype.cpp:244
    d_ptr->mAddressLine = addressLine;
}

QList< __TextElementType > __AddressType::addressLine() const
{
    return d_ptr->mAddressLine;
}

void __AddressType::setAddressTownCity( const __TextElementType& addressTownCity )
{
    d_ptr->mAddressTownCity_nil = false;// converter_complextype.cpp:244
    d_ptr->mAddressTownCity = addressTownCity;
}

__TextElementType __AddressType::addressTownCity() const
{
    return d_ptr->mAddressTownCity;
}

void __AddressType::setAddressCountyState( const __TextElementType& addressCountyState )
{
    d_ptr->mAddressCountyState_nil = false;// converter_complextype.cpp:244
    d_ptr->mAddressCountyState = addressCountyState;
}

__TextElementType __AddressType::addressCountyState() const
{
    return d_ptr->mAddressCountyState;
}

void __AddressType::setAddressDeliveryCode( const QString& addressDeliveryCode )
{
    d_ptr->mAddressDeliveryCode_nil = false;// converter_complextype.cpp:244
    d_ptr->mAddressDeliveryCode = addressDeliveryCode;
}

QString __AddressType::addressDeliveryCode() const
{
    return d_ptr->mAddressDeliveryCode;
}

void __AddressType::setCountry( const __Country& country )
{
    d_ptr->mCountry_nil = false;// converter_complextype.cpp:244
    d_ptr->mCountry = country;
}

__Country __AddressType::country() const
{
    return d_ptr->mCountry;
}

KDSoapValue __AddressType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("addressType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mAddressLine.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueAddressLine(d_ptr->mAddressLine.at(i).serialize(QString::fromLatin1("addressLine")));// elementargumentserializer.cpp:91
        _valueAddressLine.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueAddressLine.setQualified(true);
        args.append(_valueAddressLine);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAddressTownCity_nil) {
        KDSoapValue _valueAddressTownCity(d_ptr->mAddressTownCity.serialize(QString::fromLatin1("addressTownCity")));// elementargumentserializer.cpp:91
        _valueAddressTownCity.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueAddressTownCity.setQualified(true);
        if (!_valueAddressTownCity.isNil())
        args.append(_valueAddressTownCity);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAddressCountyState_nil) {
        KDSoapValue _valueAddressCountyState(d_ptr->mAddressCountyState.serialize(QString::fromLatin1("addressCountyState")));// elementargumentserializer.cpp:91
        _valueAddressCountyState.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueAddressCountyState.setQualified(true);
        if (!_valueAddressCountyState.isNil())
        args.append(_valueAddressCountyState);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAddressDeliveryCode_nil) {
        KDSoapValue _valueAddressDeliveryCode(QString::fromLatin1("addressDeliveryCode"), QVariant::fromValue(d_ptr->mAddressDeliveryCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueAddressDeliveryCode.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueAddressDeliveryCode.setQualified(true);
        if (!_valueAddressDeliveryCode.isNil())
        args.append(_valueAddressDeliveryCode);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mCountry_nil) {
        KDSoapValue _valueCountry(d_ptr->mCountry.serialize(QString::fromLatin1("country")));// elementargumentserializer.cpp:91
        _valueCountry.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueCountry.setQualified(true);
        if (!_valueCountry.isNil())
        args.append(_valueCountry);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void __AddressType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("addressLine")) {// converter_complextype.cpp:273
            __TextElementType mAddressLineTemp;// converter_complextype.cpp:331
            mAddressLineTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mAddressLine.append(mAddressLineTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("addressTownCity")) {// converter_complextype.cpp:273
            d_ptr->mAddressTownCity.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("addressCountyState")) {// converter_complextype.cpp:273
            d_ptr->mAddressCountyState.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("addressDeliveryCode")) {// converter_complextype.cpp:273
            d_ptr->mAddressDeliveryCode = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mAddressDeliveryCode_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("country")) {// converter_complextype.cpp:273
            d_ptr->mCountry.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

__AddressType::__AddressType()
    : d_ptr(new PrivateDPtr)
{
}

__AddressType::~__AddressType()
{
}

__AddressType::__AddressType( const __AddressType& other )
    : d_ptr( other.d_ptr )
{
}

__AddressType&  __AddressType::operator=( const __AddressType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__FaultType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__ErrorCodeType mCode;
    QString mDescription;
    bool mDescription_nil;
    QString mDetail;
    bool mDetail_nil;
    QList< BMS__InnerFaultType > mInnerFault;
    bool mInnerFault_nil;
};

BMS__FaultType::PrivateDPtr::PrivateDPtr()
    : mDescription_nil(true), mDetail_nil(true), mInnerFault_nil(true)
{
}


void BMS__FaultType::setCode( const BMS__ErrorCodeType& code )
{
    d_ptr->mCode = code;
}

BMS__ErrorCodeType BMS__FaultType::code() const
{
    return d_ptr->mCode;
}

void BMS__FaultType::setDescription( const QString& description )
{
    d_ptr->mDescription_nil = false;// converter_complextype.cpp:244
    d_ptr->mDescription = description;
}

QString BMS__FaultType::description() const
{
    return d_ptr->mDescription;
}

void BMS__FaultType::setDetail( const QString& detail )
{
    d_ptr->mDetail_nil = false;// converter_complextype.cpp:244
    d_ptr->mDetail = detail;
}

QString BMS__FaultType::detail() const
{
    return d_ptr->mDetail;
}

void BMS__FaultType::setInnerFault( const QList< BMS__InnerFaultType >& innerFault )
{
    d_ptr->mInnerFault_nil = false;// converter_complextype.cpp:244
    d_ptr->mInnerFault = innerFault;
}

QList< BMS__InnerFaultType > BMS__FaultType::innerFault() const
{
    return d_ptr->mInnerFault;
}

KDSoapValue BMS__FaultType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("FaultType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueCode(QString::fromLatin1("code"), d_ptr->mCode.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ErrorCodeType"));// elementargumentserializer.cpp:99
    _valueCode.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueCode.setQualified(true);
    args.append(_valueCode);// elementargumentserializer.cpp:111
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDescription.setQualified(true);
        if (!_valueDescription.isNil())
        args.append(_valueDescription);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mDetail_nil) {
        KDSoapValue _valueDetail(QString::fromLatin1("detail"), QVariant::fromValue(d_ptr->mDetail), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueDetail.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDetail.setQualified(true);
        if (!_valueDetail.isNil())
        args.append(_valueDetail);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mInnerFault.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueInnerFault(d_ptr->mInnerFault.at(i).serialize(QString::fromLatin1("innerFault")));// elementargumentserializer.cpp:91
        _valueInnerFault.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueInnerFault.setQualified(true);
        args.append(_valueInnerFault);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__FaultType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("code")) {// converter_complextype.cpp:273
            d_ptr->mCode.deserialize(val.value());// converter_complextype.cpp:292
        }
        else if (name == QLatin1String("description")) {// converter_complextype.cpp:273
            d_ptr->mDescription = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mDescription_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("detail")) {// converter_complextype.cpp:273
            d_ptr->mDetail = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mDetail_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("innerFault")) {// converter_complextype.cpp:273
            BMS__InnerFaultType mInnerFaultTemp;// converter_complextype.cpp:331
            mInnerFaultTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mInnerFault.append(mInnerFaultTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__FaultType::BMS__FaultType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__FaultType::~BMS__FaultType()
{
}

BMS__FaultType *BMS__FaultType::_kd_clone() const
{
    return new BMS__FaultType(*this);
}

BMS__FaultType::BMS__FaultType( const BMS__FaultType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__FaultType&  BMS__FaultType::operator=( const BMS__FaultType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue __Modified::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("modified"));// converter_complextype.cpp:390
    return mainValue;
}

void __Modified::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__Modified::__Modified()
{
}

__Modified::~__Modified()
{
}


class BMS__CodecType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mName;
    bool mName_nil;
    QString mVendor;
    bool mVendor_nil;
    QString mVersion;
    bool mVersion_nil;
    QString mFamily;
    bool mFamily_nil;
};

BMS__CodecType::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mVendor_nil(true), mVersion_nil(true), mFamily_nil(true)
{
}


void BMS__CodecType::setName( const QString& name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:244
    d_ptr->mName = name;
}

QString BMS__CodecType::name() const
{
    return d_ptr->mName;
}

void BMS__CodecType::setVendor( const QString& vendor )
{
    d_ptr->mVendor_nil = false;// converter_complextype.cpp:244
    d_ptr->mVendor = vendor;
}

QString BMS__CodecType::vendor() const
{
    return d_ptr->mVendor;
}

void BMS__CodecType::setVersion( const QString& version )
{
    d_ptr->mVersion_nil = false;// converter_complextype.cpp:244
    d_ptr->mVersion = version;
}

QString BMS__CodecType::version() const
{
    return d_ptr->mVersion;
}

void BMS__CodecType::setFamily( const QString& family )
{
    d_ptr->mFamily_nil = false;// converter_complextype.cpp:244
    d_ptr->mFamily = family;
}

QString BMS__CodecType::family() const
{
    return d_ptr->mFamily;
}

KDSoapValue BMS__CodecType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("CodecType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueName.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueName.setQualified(true);
        if (!_valueName.isNil())
        args.append(_valueName);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mVendor_nil) {
        KDSoapValue _valueVendor(QString::fromLatin1("vendor"), QVariant::fromValue(d_ptr->mVendor), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueVendor.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueVendor.setQualified(true);
        if (!_valueVendor.isNil())
        args.append(_valueVendor);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mVersion_nil) {
        KDSoapValue _valueVersion(QString::fromLatin1("version"), QVariant::fromValue(d_ptr->mVersion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueVersion.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueVersion.setQualified(true);
        if (!_valueVersion.isNil())
        args.append(_valueVersion);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mFamily_nil) {
        KDSoapValue _valueFamily(QString::fromLatin1("family"), QVariant::fromValue(d_ptr->mFamily), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueFamily.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueFamily.setQualified(true);
        if (!_valueFamily.isNil())
        args.append(_valueFamily);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__CodecType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("name")) {// converter_complextype.cpp:273
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mName_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("vendor")) {// converter_complextype.cpp:273
            d_ptr->mVendor = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mVendor_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("version")) {// converter_complextype.cpp:273
            d_ptr->mVersion = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mVersion_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("family")) {// converter_complextype.cpp:273
            d_ptr->mFamily = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mFamily_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__CodecType::BMS__CodecType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__CodecType::~BMS__CodecType()
{
}

BMS__CodecType::BMS__CodecType( const BMS__CodecType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__CodecType&  BMS__CodecType::operator=( const BMS__CodecType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TFMS__TransformFaultNotificationType::PrivateDPtr : public QSharedData
{
public:
    TFMS__TransformJobType mTransformJob;
    TFMS__TransformFaultType mFault;
};

void TFMS__TransformFaultNotificationType::setTransformJob( const TFMS__TransformJobType& transformJob )
{
    d_ptr->mTransformJob = transformJob;
}

TFMS__TransformJobType TFMS__TransformFaultNotificationType::transformJob() const
{
    return d_ptr->mTransformJob;
}

void TFMS__TransformFaultNotificationType::setFault( const TFMS__TransformFaultType& fault )
{
    d_ptr->mFault = fault;
}

TFMS__TransformFaultType TFMS__TransformFaultNotificationType::fault() const
{
    return d_ptr->mFault;
}

KDSoapValue TFMS__TransformFaultNotificationType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("TransformFaultNotificationType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueTransformJob(d_ptr->mTransformJob.serialize(QString::fromLatin1("transformJob")));// elementargumentserializer.cpp:91
    _valueTransformJob.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformJob.setQualified(true);
    args.append(_valueTransformJob);// elementargumentserializer.cpp:111
    KDSoapValue _valueFault(d_ptr->mFault.serialize(QString::fromLatin1("fault")));// elementargumentserializer.cpp:91
    _valueFault.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueFault.setQualified(true);
    args.append(_valueFault);// elementargumentserializer.cpp:111
    return mainValue;
}

void TFMS__TransformFaultNotificationType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("transformJob")) {// converter_complextype.cpp:273
            d_ptr->mTransformJob.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("fault")) {// converter_complextype.cpp:273
            d_ptr->mFault.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

TFMS__TransformFaultNotificationType::TFMS__TransformFaultNotificationType()
    : d_ptr(new PrivateDPtr)
{
}

TFMS__TransformFaultNotificationType::~TFMS__TransformFaultNotificationType()
{
}

TFMS__TransformFaultNotificationType::TFMS__TransformFaultNotificationType( const TFMS__TransformFaultNotificationType& other )
    : d_ptr( other.d_ptr )
{
}

TFMS__TransformFaultNotificationType&  TFMS__TransformFaultNotificationType::operator=( const TFMS__TransformFaultNotificationType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ContainerMimeType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
};

void BMS__ContainerMimeType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString BMS__ContainerMimeType::value() const
{
    return d_ptr->mValue;
}

BMS__ContainerMimeType::BMS__ContainerMimeType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__ContainerMimeType::operator QString() const
{
    return d_ptr->mValue;
}

KDSoapValue BMS__ContainerMimeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("containerMimeType"));// converter_complextype.cpp:385
    return mainValue;
}

void BMS__ContainerMimeType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// converter_complextype.cpp:286
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__ContainerMimeType::BMS__ContainerMimeType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ContainerMimeType::~BMS__ContainerMimeType()
{
}

BMS__ContainerMimeType::BMS__ContainerMimeType( const BMS__ContainerMimeType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ContainerMimeType&  BMS__ContainerMimeType::operator=( const BMS__ContainerMimeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__ManageJobResponseType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__JobType mJob;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__ManageJobResponseType::PrivateDPtr::PrivateDPtr()
    : mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__ManageJobResponseType::setJob( const BMS__JobType& job )
{
    d_ptr->mJob = job;
}

BMS__JobType BMS__ManageJobResponseType::job() const
{
    return d_ptr->mJob;
}

void BMS__ManageJobResponseType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__ManageJobResponseType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__ManageJobResponseType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__ManageJobResponseType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__ManageJobResponseType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ManageJobResponseType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueJob(d_ptr->mJob.serialize(QString::fromLatin1("job")));// elementargumentserializer.cpp:91
    _valueJob.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueJob.setQualified(true);
    args.append(_valueJob);// elementargumentserializer.cpp:111
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ManageJobResponseType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("job")) {// converter_complextype.cpp:273
            d_ptr->mJob.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__ManageJobResponseType::BMS__ManageJobResponseType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ManageJobResponseType::~BMS__ManageJobResponseType()
{
}

BMS__ManageJobResponseType::BMS__ManageJobResponseType( const BMS__ManageJobResponseType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__ManageJobResponseType&  BMS__ManageJobResponseType::operator=( const BMS__ManageJobResponseType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__BMEssenceLocatorsType::PrivateDPtr : public QSharedData
{
public:
    QList< BMS__BMEssenceLocatorType > mBmEssenceLocator;
};

void BMS__BMEssenceLocatorsType::setBmEssenceLocator( const QList< BMS__BMEssenceLocatorType >& bmEssenceLocator )
{
    d_ptr->mBmEssenceLocator = bmEssenceLocator;
}

QList< BMS__BMEssenceLocatorType > BMS__BMEssenceLocatorsType::bmEssenceLocator() const
{
    return d_ptr->mBmEssenceLocator;
}

KDSoapValue BMS__BMEssenceLocatorsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMEssenceLocatorsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mBmEssenceLocator.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueBmEssenceLocator(d_ptr->mBmEssenceLocator.at(i).serialize(QString::fromLatin1("bmEssenceLocator")));// elementargumentserializer.cpp:91
        _valueBmEssenceLocator.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBmEssenceLocator.setQualified(true);
        args.append(_valueBmEssenceLocator);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__BMEssenceLocatorsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("bmEssenceLocator")) {// converter_complextype.cpp:273
            BMS__BMEssenceLocatorType mBmEssenceLocatorTemp;// converter_complextype.cpp:331
            mBmEssenceLocatorTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mBmEssenceLocator.append(mBmEssenceLocatorTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__BMEssenceLocatorsType::BMS__BMEssenceLocatorsType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMEssenceLocatorsType::~BMS__BMEssenceLocatorsType()
{
}

BMS__BMEssenceLocatorsType::BMS__BMEssenceLocatorsType( const BMS__BMEssenceLocatorsType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__BMEssenceLocatorsType&  BMS__BMEssenceLocatorsType::operator=( const BMS__BMEssenceLocatorsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__TechnicalAttributeType::PrivateDPtr : public QSharedData
{
public:
    QString mValue;
};

void BMS__TechnicalAttributeType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString BMS__TechnicalAttributeType::value() const
{
    return d_ptr->mValue;
}

BMS__TechnicalAttributeType::BMS__TechnicalAttributeType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__TechnicalAttributeType::operator QString() const
{
    return d_ptr->mValue;
}

KDSoapValue BMS__TechnicalAttributeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("TechnicalAttributeType"));// converter_complextype.cpp:385
    return mainValue;
}

void BMS__TechnicalAttributeType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// converter_complextype.cpp:286
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__TechnicalAttributeType::BMS__TechnicalAttributeType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__TechnicalAttributeType::~BMS__TechnicalAttributeType()
{
}

BMS__TechnicalAttributeType::BMS__TechnicalAttributeType( const BMS__TechnicalAttributeType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__TechnicalAttributeType&  BMS__TechnicalAttributeType::operator=( const BMS__TechnicalAttributeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__TransformAtomType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__VideoFormatType mVideoFormat;
    bool mVideoFormat_nil;
    BMS__AudioFormatType mAudioFormat;
    bool mAudioFormat_nil;
    BMS__ContainerFormatType mContainerFormat;
    bool mContainerFormat_nil;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__TransformAtomType::PrivateDPtr::PrivateDPtr()
    : mVideoFormat_nil(true), mAudioFormat_nil(true), mContainerFormat_nil(true), mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__TransformAtomType::setVideoFormat( const BMS__VideoFormatType& videoFormat )
{
    d_ptr->mVideoFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mVideoFormat = videoFormat;
}

BMS__VideoFormatType BMS__TransformAtomType::videoFormat() const
{
    return d_ptr->mVideoFormat;
}

void BMS__TransformAtomType::setAudioFormat( const BMS__AudioFormatType& audioFormat )
{
    d_ptr->mAudioFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mAudioFormat = audioFormat;
}

BMS__AudioFormatType BMS__TransformAtomType::audioFormat() const
{
    return d_ptr->mAudioFormat;
}

void BMS__TransformAtomType::setContainerFormat( const BMS__ContainerFormatType& containerFormat )
{
    d_ptr->mContainerFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mContainerFormat = containerFormat;
}

BMS__ContainerFormatType BMS__TransformAtomType::containerFormat() const
{
    return d_ptr->mContainerFormat;
}

void BMS__TransformAtomType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__TransformAtomType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__TransformAtomType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__TransformAtomType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__TransformAtomType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("TransformAtomType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mVideoFormat_nil) {
        KDSoapValue _valueVideoFormat(d_ptr->mVideoFormat.serialize(QString::fromLatin1("videoFormat")));// elementargumentserializer.cpp:91
        _valueVideoFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueVideoFormat.setQualified(true);
        if (!_valueVideoFormat.isNil())
        args.append(_valueVideoFormat);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAudioFormat_nil) {
        KDSoapValue _valueAudioFormat(d_ptr->mAudioFormat.serialize(QString::fromLatin1("audioFormat")));// elementargumentserializer.cpp:91
        _valueAudioFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueAudioFormat.setQualified(true);
        if (!_valueAudioFormat.isNil())
        args.append(_valueAudioFormat);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mContainerFormat_nil) {
        KDSoapValue _valueContainerFormat(d_ptr->mContainerFormat.serialize(QString::fromLatin1("containerFormat")));// elementargumentserializer.cpp:91
        _valueContainerFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueContainerFormat.setQualified(true);
        if (!_valueContainerFormat.isNil())
        args.append(_valueContainerFormat);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__TransformAtomType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("videoFormat")) {// converter_complextype.cpp:273
            d_ptr->mVideoFormat.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("audioFormat")) {// converter_complextype.cpp:273
            d_ptr->mAudioFormat.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("containerFormat")) {// converter_complextype.cpp:273
            d_ptr->mContainerFormat.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__TransformAtomType::BMS__TransformAtomType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__TransformAtomType::~BMS__TransformAtomType()
{
}

BMS__TransformAtomType::BMS__TransformAtomType( const BMS__TransformAtomType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__TransformAtomType&  BMS__TransformAtomType::operator=( const BMS__TransformAtomType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TFMS__Profiles::PrivateDPtr : public QSharedData
{
public:
    QList< TFMS__TransformProfileType > mTransformProfile;
};

void TFMS__Profiles::setTransformProfile( const QList< TFMS__TransformProfileType >& transformProfile )
{
    d_ptr->mTransformProfile = transformProfile;
}

QList< TFMS__TransformProfileType > TFMS__Profiles::transformProfile() const
{
    return d_ptr->mTransformProfile;
}

KDSoapValue TFMS__Profiles::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("profiles"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mTransformProfile.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueTransformProfile(d_ptr->mTransformProfile.at(i).serialize(QString::fromLatin1("transformProfile")));// elementargumentserializer.cpp:91
        _valueTransformProfile.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
        _valueTransformProfile.setQualified(true);
        args.append(_valueTransformProfile);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void TFMS__Profiles::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("transformProfile")) {// converter_complextype.cpp:273
            TFMS__TransformProfileType mTransformProfileTemp;// converter_complextype.cpp:331
            mTransformProfileTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mTransformProfile.append(mTransformProfileTemp);// converter_complextype.cpp:339
        }
    }
}

TFMS__Profiles::TFMS__Profiles()
    : d_ptr(new PrivateDPtr)
{
}

TFMS__Profiles::~TFMS__Profiles()
{
}

TFMS__Profiles::TFMS__Profiles( const TFMS__Profiles& other )
    : d_ptr( other.d_ptr )
{
}

TFMS__Profiles&  TFMS__Profiles::operator=( const TFMS__Profiles& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__StorageType::PrivateDPtr : public QSharedData
{
public:
    BMS__StorageTypes mValue;
};

void BMS__StorageType::setValue( const BMS__StorageTypes& value )
{
    d_ptr->mValue = value;
}

BMS__StorageTypes BMS__StorageType::value() const
{
    return d_ptr->mValue;
}

BMS__StorageType::BMS__StorageType( const BMS__StorageTypes& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

BMS__StorageType::operator BMS__StorageTypes() const
{
    return d_ptr->mValue;
}

KDSoapValue BMS__StorageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, d_ptr->mValue.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("StorageType"));// converter_complextype.cpp:385
    return mainValue;
}

void BMS__StorageType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue.deserialize(mainValue.value());// converter_complextype.cpp:292
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__StorageType::BMS__StorageType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__StorageType::~BMS__StorageType()
{
}

BMS__StorageType::BMS__StorageType( const BMS__StorageType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__StorageType&  BMS__StorageType::operator=( const BMS__StorageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __DetailsType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QStringList mEmailAddress;
    bool mEmailAddress_nil;
    QString mWebAddress;
    bool mWebAddress_nil;
    __AddressType mAddress;
    bool mAddress_nil;
    QString mTelephoneNumber;
    bool mTelephoneNumber_nil;
    QString mMobileTelephoneNumber;
    bool mMobileTelephoneNumber_nil;
};

__DetailsType::PrivateDPtr::PrivateDPtr()
    : mEmailAddress_nil(true), mWebAddress_nil(true), mAddress_nil(true), mTelephoneNumber_nil(true), mMobileTelephoneNumber_nil(true)
{
}


void __DetailsType::setEmailAddress( const QStringList& emailAddress )
{
    d_ptr->mEmailAddress_nil = false;// converter_complextype.cpp:244
    d_ptr->mEmailAddress = emailAddress;
}

QStringList __DetailsType::emailAddress() const
{
    return d_ptr->mEmailAddress;
}

void __DetailsType::setWebAddress( const QString& webAddress )
{
    d_ptr->mWebAddress_nil = false;// converter_complextype.cpp:244
    d_ptr->mWebAddress = webAddress;
}

QString __DetailsType::webAddress() const
{
    return d_ptr->mWebAddress;
}

void __DetailsType::setAddress( const __AddressType& address )
{
    d_ptr->mAddress_nil = false;// converter_complextype.cpp:244
    d_ptr->mAddress = address;
}

__AddressType __DetailsType::address() const
{
    return d_ptr->mAddress;
}

void __DetailsType::setTelephoneNumber( const QString& telephoneNumber )
{
    d_ptr->mTelephoneNumber_nil = false;// converter_complextype.cpp:244
    d_ptr->mTelephoneNumber = telephoneNumber;
}

QString __DetailsType::telephoneNumber() const
{
    return d_ptr->mTelephoneNumber;
}

void __DetailsType::setMobileTelephoneNumber( const QString& mobileTelephoneNumber )
{
    d_ptr->mMobileTelephoneNumber_nil = false;// converter_complextype.cpp:244
    d_ptr->mMobileTelephoneNumber = mobileTelephoneNumber;
}

QString __DetailsType::mobileTelephoneNumber() const
{
    return d_ptr->mMobileTelephoneNumber;
}

KDSoapValue __DetailsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("detailsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mEmailAddress.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueEmailAddress(QString::fromLatin1("emailAddress"), QVariant::fromValue(d_ptr->mEmailAddress.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueEmailAddress.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueEmailAddress.setQualified(true);
        args.append(_valueEmailAddress);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mWebAddress_nil) {
        KDSoapValue _valueWebAddress(QString::fromLatin1("webAddress"), QVariant::fromValue(d_ptr->mWebAddress), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueWebAddress.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueWebAddress.setQualified(true);
        if (!_valueWebAddress.isNil())
        args.append(_valueWebAddress);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAddress_nil) {
        KDSoapValue _valueAddress(d_ptr->mAddress.serialize(QString::fromLatin1("address")));// elementargumentserializer.cpp:91
        _valueAddress.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueAddress.setQualified(true);
        if (!_valueAddress.isNil())
        args.append(_valueAddress);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mTelephoneNumber_nil) {
        KDSoapValue _valueTelephoneNumber(QString::fromLatin1("telephoneNumber"), QVariant::fromValue(d_ptr->mTelephoneNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueTelephoneNumber.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueTelephoneNumber.setQualified(true);
        if (!_valueTelephoneNumber.isNil())
        args.append(_valueTelephoneNumber);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mMobileTelephoneNumber_nil) {
        KDSoapValue _valueMobileTelephoneNumber(QString::fromLatin1("mobileTelephoneNumber"), QVariant::fromValue(d_ptr->mMobileTelephoneNumber), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueMobileTelephoneNumber.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueMobileTelephoneNumber.setQualified(true);
        if (!_valueMobileTelephoneNumber.isNil())
        args.append(_valueMobileTelephoneNumber);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void __DetailsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("emailAddress")) {// converter_complextype.cpp:273
            QString mEmailAddressTemp;// converter_complextype.cpp:331
            mEmailAddressTemp = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mEmailAddress.append(mEmailAddressTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("webAddress")) {// converter_complextype.cpp:273
            d_ptr->mWebAddress = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mWebAddress_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("address")) {// converter_complextype.cpp:273
            d_ptr->mAddress.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("telephoneNumber")) {// converter_complextype.cpp:273
            d_ptr->mTelephoneNumber = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mTelephoneNumber_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("mobileTelephoneNumber")) {// converter_complextype.cpp:273
            d_ptr->mMobileTelephoneNumber = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mMobileTelephoneNumber_nil = false;// converter_complextype.cpp:288
        }
    }
}

__DetailsType::__DetailsType()
    : d_ptr(new PrivateDPtr)
{
}

__DetailsType::~__DetailsType()
{
}

__DetailsType::__DetailsType( const __DetailsType& other )
    : d_ptr( other.d_ptr )
{
}

__DetailsType&  __DetailsType::operator=( const __DetailsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __TextElementType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mValue;
    QString mLang;
    bool mLang_nil;
};

__TextElementType::PrivateDPtr::PrivateDPtr()
    : mLang_nil(true)
{
}


void __TextElementType::setValue( const QString& value )
{
    d_ptr->mValue = value;
}

QString __TextElementType::value() const
{
    return d_ptr->mValue;
}

__TextElementType::__TextElementType( const QString& value )
    : d_ptr(new PrivateDPtr)
{
    d_ptr->mValue = value;
}

__TextElementType::operator QString() const
{
    return d_ptr->mValue;
}

void __TextElementType::setLang( const QString& lang )
{
    d_ptr->mLang_nil = false;// converter_complextype.cpp:244
    d_ptr->mLang = lang;
}

QString __TextElementType::lang() const
{
    return d_ptr->mLang;
}

KDSoapValue __TextElementType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant::fromValue(d_ptr->mValue), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("textElementType"));// converter_complextype.cpp:385
    KDSoapValueList attribs;
    if (!d_ptr->mLang_nil) {
        KDSoapValue _valueLang(QString::fromLatin1("lang"), QVariant::fromValue(d_ptr->mLang), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueLang.setNamespaceUri(KDSoapNamespaceManager::xmlSchema2001());
        if (!_valueLang.isNil())
        attribs.append(_valueLang);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void __TextElementType::deserialize( const KDSoapValue& mainValue )
{
    d_ptr->mValue = mainValue.value().value<QString>();// converter_complextype.cpp:286
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("lang")) {// converter_complextype.cpp:273
            d_ptr->mLang = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mLang_nil = false;// converter_complextype.cpp:288
        }
    }
}

__TextElementType::__TextElementType()
    : d_ptr(new PrivateDPtr)
{
}

__TextElementType::~__TextElementType()
{
}

__TextElementType::__TextElementType( const __TextElementType& other )
    : d_ptr( other.d_ptr )
{
}

__TextElementType&  __TextElementType::operator=( const __TextElementType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class BMS__AsyncEndpointType::PrivateDPtr : public QSharedData
{
public:
    QString mReplyTo;
    QString mFaultTo;
};

void BMS__AsyncEndpointType::setReplyTo( const QString& replyTo )
{
    d_ptr->mReplyTo = replyTo;
}

QString BMS__AsyncEndpointType::replyTo() const
{
    return d_ptr->mReplyTo;
}

void BMS__AsyncEndpointType::setFaultTo( const QString& faultTo )
{
    d_ptr->mFaultTo = faultTo;
}

QString BMS__AsyncEndpointType::faultTo() const
{
    return d_ptr->mFaultTo;
}

KDSoapValue BMS__AsyncEndpointType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("AsyncEndpointType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueReplyTo(QString::fromLatin1("replyTo"), QVariant::fromValue(d_ptr->mReplyTo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
    _valueReplyTo.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueReplyTo.setQualified(true);
    args.append(_valueReplyTo);// elementargumentserializer.cpp:111
    KDSoapValue _valueFaultTo(QString::fromLatin1("faultTo"), QVariant::fromValue(d_ptr->mFaultTo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
    _valueFaultTo.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueFaultTo.setQualified(true);
    args.append(_valueFaultTo);// elementargumentserializer.cpp:111
    return mainValue;
}

void BMS__AsyncEndpointType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("replyTo")) {// converter_complextype.cpp:273
            d_ptr->mReplyTo = val.value().value<QString>();// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("faultTo")) {// converter_complextype.cpp:273
            d_ptr->mFaultTo = val.value().value<QString>();// converter_complextype.cpp:286
        }
    }
}

BMS__AsyncEndpointType::BMS__AsyncEndpointType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__AsyncEndpointType::~BMS__AsyncEndpointType()
{
}

BMS__AsyncEndpointType::BMS__AsyncEndpointType( const BMS__AsyncEndpointType& other )
    : d_ptr( other.d_ptr )
{
}

BMS__AsyncEndpointType&  BMS__AsyncEndpointType::operator=( const BMS__AsyncEndpointType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue __Created::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("created"));// converter_complextype.cpp:390
    return mainValue;
}

void __Created::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__Created::__Created()
{
}

__Created::~__Created()
{
}


class __CoverageType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    __Temporal mTemporal;
    bool mTemporal_nil;
    __Spatial mSpatial;
    bool mSpatial_nil;
};

__CoverageType::PrivateDPtr::PrivateDPtr()
    : mTemporal_nil(true), mSpatial_nil(true)
{
}


void __CoverageType::setTemporal( const __Temporal& temporal )
{
    d_ptr->mTemporal_nil = false;// converter_complextype.cpp:244
    d_ptr->mTemporal = temporal;
}

__Temporal __CoverageType::temporal() const
{
    return d_ptr->mTemporal;
}

void __CoverageType::setSpatial( const __Spatial& spatial )
{
    d_ptr->mSpatial_nil = false;// converter_complextype.cpp:244
    d_ptr->mSpatial = spatial;
}

__Spatial __CoverageType::spatial() const
{
    return d_ptr->mSpatial;
}

KDSoapValue __CoverageType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("coverageType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mTemporal_nil) {
        KDSoapValue _valueTemporal(d_ptr->mTemporal.serialize(QString::fromLatin1("temporal")));// elementargumentserializer.cpp:91
        _valueTemporal.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueTemporal.setQualified(true);
        if (!_valueTemporal.isNil())
        args.append(_valueTemporal);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mSpatial_nil) {
        KDSoapValue _valueSpatial(d_ptr->mSpatial.serialize(QString::fromLatin1("spatial")));// elementargumentserializer.cpp:91
        _valueSpatial.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueSpatial.setQualified(true);
        if (!_valueSpatial.isNil())
        args.append(_valueSpatial);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void __CoverageType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("temporal")) {// converter_complextype.cpp:273
            d_ptr->mTemporal.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("spatial")) {// converter_complextype.cpp:273
            d_ptr->mSpatial.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

__CoverageType::__CoverageType()
    : d_ptr(new PrivateDPtr)
{
}

__CoverageType::~__CoverageType()
{
}

__CoverageType::__CoverageType( const __CoverageType& other )
    : d_ptr( other.d_ptr )
{
}

__CoverageType&  __CoverageType::operator=( const __CoverageType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class __OrganisationDetailsType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< __TextElementType > mOrganisationName;
    bool mOrganisationName_nil;
    QStringList mOrganisationCode;
    bool mOrganisationCode_nil;
    __OrganisationDepartment mOrganisationDepartment;
    bool mOrganisationDepartment_nil;
    QList< __DetailsType > mDetails;
    bool mDetails_nil;
    QList< __EntityType > mContacts;
    bool mContacts_nil;
    QString mOrganisationId;
    bool mOrganisationId_nil;
};

__OrganisationDetailsType::PrivateDPtr::PrivateDPtr()
    : mOrganisationName_nil(true), mOrganisationCode_nil(true), mOrganisationDepartment_nil(true), mDetails_nil(true), mContacts_nil(true), mOrganisationId_nil(true)
{
}


void __OrganisationDetailsType::setOrganisationName( const QList< __TextElementType >& organisationName )
{
    d_ptr->mOrganisationName_nil = false;// converter_complextype.cpp:244
    d_ptr->mOrganisationName = organisationName;
}

QList< __TextElementType > __OrganisationDetailsType::organisationName() const
{
    return d_ptr->mOrganisationName;
}

void __OrganisationDetailsType::setOrganisationCode( const QStringList& organisationCode )
{
    d_ptr->mOrganisationCode_nil = false;// converter_complextype.cpp:244
    d_ptr->mOrganisationCode = organisationCode;
}

QStringList __OrganisationDetailsType::organisationCode() const
{
    return d_ptr->mOrganisationCode;
}

void __OrganisationDetailsType::setOrganisationDepartment( const __OrganisationDepartment& organisationDepartment )
{
    d_ptr->mOrganisationDepartment_nil = false;// converter_complextype.cpp:244
    d_ptr->mOrganisationDepartment = organisationDepartment;
}

__OrganisationDepartment __OrganisationDetailsType::organisationDepartment() const
{
    return d_ptr->mOrganisationDepartment;
}

void __OrganisationDetailsType::setDetails( const QList< __DetailsType >& details )
{
    d_ptr->mDetails_nil = false;// converter_complextype.cpp:244
    d_ptr->mDetails = details;
}

QList< __DetailsType > __OrganisationDetailsType::details() const
{
    return d_ptr->mDetails;
}

void __OrganisationDetailsType::setContacts( const QList< __EntityType >& contacts )
{
    d_ptr->mContacts_nil = false;// converter_complextype.cpp:244
    d_ptr->mContacts = contacts;
}

QList< __EntityType > __OrganisationDetailsType::contacts() const
{
    return d_ptr->mContacts;
}

void __OrganisationDetailsType::setOrganisationId( const QString& organisationId )
{
    d_ptr->mOrganisationId_nil = false;// converter_complextype.cpp:244
    d_ptr->mOrganisationId = organisationId;
}

QString __OrganisationDetailsType::organisationId() const
{
    return d_ptr->mOrganisationId;
}

KDSoapValue __OrganisationDetailsType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("organisationDetailsType"));// converter_complextype.cpp:390
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mOrganisationName.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueOrganisationName(d_ptr->mOrganisationName.at(i).serialize(QString::fromLatin1("organisationName")));// elementargumentserializer.cpp:91
        _valueOrganisationName.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueOrganisationName.setQualified(true);
        args.append(_valueOrganisationName);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mOrganisationCode.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueOrganisationCode(QString::fromLatin1("organisationCode"), QVariant::fromValue(d_ptr->mOrganisationCode.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueOrganisationCode.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueOrganisationCode.setQualified(true);
        args.append(_valueOrganisationCode);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mOrganisationDepartment_nil) {
        KDSoapValue _valueOrganisationDepartment(d_ptr->mOrganisationDepartment.serialize(QString::fromLatin1("organisationDepartment")));// elementargumentserializer.cpp:91
        _valueOrganisationDepartment.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueOrganisationDepartment.setQualified(true);
        if (!_valueOrganisationDepartment.isNil())
        args.append(_valueOrganisationDepartment);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mDetails.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueDetails(d_ptr->mDetails.at(i).serialize(QString::fromLatin1("details")));// elementargumentserializer.cpp:91
        _valueDetails.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueDetails.setQualified(true);
        args.append(_valueDetails);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mContacts.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueContacts(d_ptr->mContacts.at(i).serialize(QString::fromLatin1("contacts")));// elementargumentserializer.cpp:91
        _valueContacts.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueContacts.setQualified(true);
        args.append(_valueContacts);// elementargumentserializer.cpp:111
    }
    KDSoapValueList attribs;
    if (!d_ptr->mOrganisationId_nil) {
        KDSoapValue _valueOrganisationId(QString::fromLatin1("organisationId"), QVariant::fromValue(d_ptr->mOrganisationId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueOrganisationId.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        if (!_valueOrganisationId.isNil())
        attribs.append(_valueOrganisationId);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void __OrganisationDetailsType::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("organisationName")) {// converter_complextype.cpp:273
            __TextElementType mOrganisationNameTemp;// converter_complextype.cpp:331
            mOrganisationNameTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mOrganisationName.append(mOrganisationNameTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("organisationCode")) {// converter_complextype.cpp:273
            QString mOrganisationCodeTemp;// converter_complextype.cpp:331
            mOrganisationCodeTemp = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mOrganisationCode.append(mOrganisationCodeTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("organisationDepartment")) {// converter_complextype.cpp:273
            d_ptr->mOrganisationDepartment.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("details")) {// converter_complextype.cpp:273
            __DetailsType mDetailsTemp;// converter_complextype.cpp:331
            mDetailsTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mDetails.append(mDetailsTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("contacts")) {// converter_complextype.cpp:273
            __EntityType mContactsTemp;// converter_complextype.cpp:331
            mContactsTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mContacts.append(mContactsTemp);// converter_complextype.cpp:339
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("organisationId")) {// converter_complextype.cpp:273
            d_ptr->mOrganisationId = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mOrganisationId_nil = false;// converter_complextype.cpp:288
        }
    }
}

__OrganisationDetailsType::__OrganisationDetailsType()
    : d_ptr(new PrivateDPtr)
{
}

__OrganisationDetailsType::~__OrganisationDetailsType()
{
}

__OrganisationDetailsType::__OrganisationDetailsType( const __OrganisationDetailsType& other )
    : d_ptr( other.d_ptr )
{
}

__OrganisationDetailsType&  __OrganisationDetailsType::operator=( const __OrganisationDetailsType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}

void TransformMediaBindingServerBase::transformResponse( const KDSoapDelayedResponseHandle& responseHandle, const TFMS__TransformResponseType& ret )
{
    KDSoapMessage response;
    KDSoapValue _valueTransformAck(ret.serialize(QString::fromLatin1("transformAck")));// elementargumentserializer.cpp:91
    _valueTransformAck.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformAck.setQualified(true);
    response = _valueTransformAck;// elementargumentserializer.cpp:111
    sendDelayedResponse(responseHandle, response);
}

void TransformMediaBindingServerBase::processRequest( const KDSoapMessage &request, KDSoapMessage &response, const QByteArray& soapAction )
{
    //qDebug() << "Within processRequest of TransformMediaBindingServerBase";
    setResponseNamespace(QLatin1String("http://transformmedia.fims.tv"));
    const QByteArray method = request.name().toLatin1();
    if (method == "transform" || soapAction == "http://transformmedia.fims.tv/transform") {
        TFMS__TransformRequestType in;
        in.deserialize(request);
        try {
            TFMS__TransformResponseType ret = transform(in);
            KDSoapValue _valueTransformAck(ret.serialize(QString::fromLatin1("transformAck")));
            _valueTransformAck.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
            _valueTransformAck.setQualified(true);
            response = _valueTransformAck;
        }
        catch (const TransformFaultException &tfe) {
                setFault(tfe.faultCode(), tfe.faultString(), tfe.faultActor(), tfe.serialize(TransformFaultException::faultElementName()));
        }
        catch (const KDSoapFaultException &ex) {
                setFault(ex.faultCode(), ex.faultString(), ex.faultActor(), KDSoapValue());
        }
    }
    else {
        KDSoapServerObjectInterface::processRequest(request, response, soapAction);// converter_serverstub.cpp:74
    }
}


void TransformMediaStatusBindingServerBase::manageJobResponse( const KDSoapDelayedResponseHandle& responseHandle, const BMS__ManageJobResponseType& ret )
{
    KDSoapMessage response;
    KDSoapValue _valueManageJobResponse(ret.serialize(QString::fromLatin1("manageJobResponse")));// elementargumentserializer.cpp:91
    _valueManageJobResponse.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueManageJobResponse.setQualified(true);
    response = _valueManageJobResponse;// elementargumentserializer.cpp:111
    sendDelayedResponse(responseHandle, response);
}

void TransformMediaStatusBindingServerBase::manageQueueResponse( const KDSoapDelayedResponseHandle& responseHandle, const BMS__ManageQueueResponseType& ret )
{
    KDSoapMessage response;
    KDSoapValue _valueManageQueueResponse(ret.serialize(QString::fromLatin1("manageQueueResponse")));// elementargumentserializer.cpp:91
    _valueManageQueueResponse.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueManageQueueResponse.setQualified(true);
    response = _valueManageQueueResponse;// elementargumentserializer.cpp:111
    sendDelayedResponse(responseHandle, response);
}

void TransformMediaStatusBindingServerBase::queryJobResponse( const KDSoapDelayedResponseHandle& responseHandle, const BMS__QueryJobResponseType& ret )
{
    KDSoapMessage response;
    KDSoapValue _valueQueryJobResponse(ret.serialize(QString::fromLatin1("queryJobResponse")));// elementargumentserializer.cpp:91
    _valueQueryJobResponse.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueQueryJobResponse.setQualified(true);
    response = _valueQueryJobResponse;// elementargumentserializer.cpp:111
    sendDelayedResponse(responseHandle, response);
}

void TransformMediaStatusBindingServerBase::processRequest( const KDSoapMessage &request, KDSoapMessage &response, const QByteArray& soapAction )
{
    setResponseNamespace(QLatin1String("http://transformmedia.fims.tv"));// converter_serverstub.cpp:50
    const QByteArray method = request.name().toLatin1();
    if (method == "manageJob" || soapAction == "http://transformmedia.fims.tv/manageJob") {
        BMS__ManageJobRequestType in;// converter_serverstub.cpp:123
        in.deserialize(request);// converter_complextype.cpp:290
        BMS__ManageJobResponseType ret = manageJob(in);// converter_serverstub.cpp:169
        if (!hasFault()) {
            KDSoapValue _valueManageJobResponse(ret.serialize(QString::fromLatin1("manageJobResponse")));// elementargumentserializer.cpp:91
            _valueManageJobResponse.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
            _valueManageJobResponse.setQualified(true);
            response = _valueManageJobResponse;// elementargumentserializer.cpp:111
        }
    }
    else if (method == "manageQueue" || soapAction == "http://transformmedia.fims.tv/manageQueue") {
        BMS__ManageQueueRequestType in;// converter_serverstub.cpp:123
        in.deserialize(request);// converter_complextype.cpp:290
        BMS__ManageQueueResponseType ret = manageQueue(in);// converter_serverstub.cpp:169
        if (!hasFault()) {
            KDSoapValue _valueManageQueueResponse(ret.serialize(QString::fromLatin1("manageQueueResponse")));// elementargumentserializer.cpp:91
            _valueManageQueueResponse.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
            _valueManageQueueResponse.setQualified(true);
            response = _valueManageQueueResponse;// elementargumentserializer.cpp:111
        }
    }
    else if (method == "queryJob" || soapAction == "http://transformmedia.fims.tv/queryJob") {
        BMS__QueryJobRequestType in;// converter_serverstub.cpp:123
        in.deserialize(request);// converter_complextype.cpp:290
        BMS__QueryJobResponseType ret = queryJob(in);// converter_serverstub.cpp:169
        if (!hasFault()) {
            KDSoapValue _valueQueryJobResponse(ret.serialize(QString::fromLatin1("queryJobResponse")));// elementargumentserializer.cpp:91
            _valueQueryJobResponse.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
            _valueQueryJobResponse.setQualified(true);
            response = _valueQueryJobResponse;// elementargumentserializer.cpp:111
        }
    }
    else {
        KDSoapServerObjectInterface::processRequest(request, response, soapAction);// converter_serverstub.cpp:74
    }
}


void TransformMediaNotificationServiceServerBase::processRequest( const KDSoapMessage &request, KDSoapMessage &response, const QByteArray& soapAction )
{
    setResponseNamespace(QLatin1String("http://transformmedia.fims.tv"));// converter_serverstub.cpp:50
    const QByteArray method = request.name().toLatin1();
    if (method == "notifyTransformResult" || soapAction == "http://transformmedia.fims.tv/notifyTransformResult") {
        TFMS__TransformNotificationType in;// converter_serverstub.cpp:123
        in.deserialize(request);// converter_complextype.cpp:290
        notifyTransformResult(in);
    }
    else if (method == "notifyFault" || soapAction == "http://transformmedia.fims.tv/notifyFault") {
        TFMS__TransformFaultNotificationType fault;// converter_serverstub.cpp:123
        fault.deserialize(request);// converter_complextype.cpp:290
        notifyFault(fault);
    }
    else {
        KDSoapServerObjectInterface::processRequest(request, response, soapAction);// converter_serverstub.cpp:74
    }
}


void BMS__ResourceIDType::setValue( const BMS__UID& value )
{
    mValue = value;
}

BMS__UID BMS__ResourceIDType::value() const
{
    return mValue;
}

BMS__ResourceIDType::BMS__ResourceIDType( const BMS__UID& value )
{
    setValue(value);
}

BMS__ResourceIDType::operator BMS__UID() const
{
    return mValue;
}

QVariant BMS__ResourceIDType::serialize() const
{
    return mValue.serialize();// converter_simpletype.cpp:368
}

void BMS__ResourceIDType::deserialize( const QVariant& value )
{
    mValue.deserialize( value );// converter_simpletype.cpp:369
}

BMS__ResourceIDType::BMS__ResourceIDType()
{
}

BMS__ResourceIDType::~BMS__ResourceIDType()
{
}


class BMS__ProcessedInfoByBytesType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    quint64 mProcessedBytesCount;
};

BMS__ProcessedInfoByBytesType::PrivateDPtr::PrivateDPtr()
    : mProcessedBytesCount(0)
{
}


void BMS__ProcessedInfoByBytesType::setProcessedBytesCount( quint64 processedBytesCount )
{
    d_ptr->mProcessedBytesCount = processedBytesCount;
}

quint64 BMS__ProcessedInfoByBytesType::processedBytesCount() const
{
    return d_ptr->mProcessedBytesCount;
}

KDSoapValue BMS__ProcessedInfoByBytesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ProcessedInfoType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ProcessedInfoByBytesType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueProcessedBytesCount(QString::fromLatin1("processedBytesCount"), QVariant::fromValue(d_ptr->mProcessedBytesCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("unsignedLong"));// elementargumentserializer.cpp:97
    _valueProcessedBytesCount.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueProcessedBytesCount.setQualified(true);
    args.append(_valueProcessedBytesCount);// elementargumentserializer.cpp:111
    return mainValue;
}

void BMS__ProcessedInfoByBytesType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ProcessedInfoType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("processedBytesCount")) {// converter_complextype.cpp:273
            d_ptr->mProcessedBytesCount = val.value().value<quint64>();// converter_complextype.cpp:286
        }
    }
}

BMS__ProcessedInfoByBytesType::BMS__ProcessedInfoByBytesType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ProcessedInfoByBytesType::~BMS__ProcessedInfoByBytesType()
{
}

BMS__ProcessedInfoType *BMS__ProcessedInfoByBytesType::_kd_clone() const
{
    return new BMS__ProcessedInfoByBytesType(*this);
}

BMS__ProcessedInfoByBytesType::BMS__ProcessedInfoByBytesType( const BMS__ProcessedInfoByBytesType& other )
    : BMS__ProcessedInfoType( other ), d_ptr( other.d_ptr )
{
}

BMS__ProcessedInfoByBytesType&  BMS__ProcessedInfoByBytesType::operator=( const BMS__ProcessedInfoByBytesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ProcessedInfoType *>(this) = other;

    return *this;
}


KDSoapValue __LocationName::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("locationName"));
    return mainValue;
}

void __LocationName::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__LocationName::__LocationName()
{
}

__LocationName::~__LocationName()
{
}


class BMS__QueryJobRequestByIDType::PrivateDPtr : public QSharedData
{
public:
    QList< BMS__UID > mJobID;
};

void BMS__QueryJobRequestByIDType::setJobID( const QList< BMS__UID >& jobID )
{
    d_ptr->mJobID = jobID;
}

QList< BMS__UID > BMS__QueryJobRequestByIDType::jobID() const
{
    return d_ptr->mJobID;
}

KDSoapValue BMS__QueryJobRequestByIDType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__QueryJobRequestType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("QueryJobRequestByIDType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mJobID.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueJobID(QString::fromLatin1("jobID"), d_ptr->mJobID.at(i).serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("UID"));// elementargumentserializer.cpp:99
        _valueJobID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueJobID.setQualified(true);
        args.append(_valueJobID);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__QueryJobRequestByIDType::deserialize( const KDSoapValue& mainValue )
{
    BMS__QueryJobRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("jobID")) {// converter_complextype.cpp:273
            BMS__UID mJobIDTemp;// converter_complextype.cpp:331
            mJobIDTemp.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mJobID.append(mJobIDTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__QueryJobRequestByIDType::BMS__QueryJobRequestByIDType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__QueryJobRequestByIDType::~BMS__QueryJobRequestByIDType()
{
}

BMS__QueryJobRequestType *BMS__QueryJobRequestByIDType::_kd_clone() const
{
    return new BMS__QueryJobRequestByIDType(*this);
}

BMS__QueryJobRequestByIDType::BMS__QueryJobRequestByIDType( const BMS__QueryJobRequestByIDType& other )
    : BMS__QueryJobRequestType( other ), d_ptr( other.d_ptr )
{
}

BMS__QueryJobRequestByIDType&  BMS__QueryJobRequestByIDType::operator=( const BMS__QueryJobRequestByIDType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__QueryJobRequestType *>(this) = other;

    return *this;
}


class __OrganisationDepartment::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mDepartmentId;
    bool mDepartmentId_nil;
};

__OrganisationDepartment::PrivateDPtr::PrivateDPtr()
    : mDepartmentId_nil(true)
{
}


void __OrganisationDepartment::setDepartmentId( const QString& departmentId )
{
    d_ptr->mDepartmentId_nil = false;// converter_complextype.cpp:244
    d_ptr->mDepartmentId = departmentId;
}

QString __OrganisationDepartment::departmentId() const
{
    return d_ptr->mDepartmentId;
}

KDSoapValue __OrganisationDepartment::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("organisationDepartment"));
    KDSoapValueList attribs;
    if (!d_ptr->mDepartmentId_nil) {
        KDSoapValue _valueDepartmentId(QString::fromLatin1("departmentId"), QVariant::fromValue(d_ptr->mDepartmentId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueDepartmentId.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        if (!_valueDepartmentId.isNil())
        attribs.append(_valueDepartmentId);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void __OrganisationDepartment::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("departmentId")) {// converter_complextype.cpp:273
            d_ptr->mDepartmentId = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mDepartmentId_nil = false;// converter_complextype.cpp:288
        }
    }
}

__OrganisationDepartment::__OrganisationDepartment()
    : d_ptr(new PrivateDPtr)
{
}

__OrganisationDepartment::~__OrganisationDepartment()
{
}

__OrganisationDepartment::__OrganisationDepartment( const __OrganisationDepartment& other )
    : __TextElementType( other ), d_ptr( other.d_ptr )
{
}

__OrganisationDepartment&  __OrganisationDepartment::operator=( const __OrganisationDepartment& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<__TextElementType *>(this) = other;

    return *this;
}


KDSoapValue BMS__StartJobByLatestType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__StartJobType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("StartJobByLatestType"));
    return mainValue;
}

void BMS__StartJobByLatestType::deserialize( const KDSoapValue& mainValue )
{
    BMS__StartJobType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__StartJobByLatestType::BMS__StartJobByLatestType()
{
}

BMS__StartJobByLatestType::~BMS__StartJobByLatestType()
{
}

BMS__StartJobType *BMS__StartJobByLatestType::_kd_clone() const
{
    return new BMS__StartJobByLatestType(*this);
}


KDSoapValue __Genre::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("genre"));
    return mainValue;
}

void __Genre::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__Genre::__Genre()
{
}

__Genre::~__Genre()
{
}


class BMS__ResourceType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    KDDateTime mResourceCreationDate;
    bool mResourceCreationDate_nil;
    KDDateTime mResourceModifiedDate;
    bool mResourceModifiedDate_nil;
    BMS__AsyncEndpointType mNotifyAt;
    bool mNotifyAt_nil;
    BMS__ExtensionGroup mExtensionGroup;
    bool mExtensionGroup_nil;
    BMS__ExtensionAttributes mExtensionAttributes;
    bool mExtensionAttributes_nil;
};

BMS__ResourceType::PrivateDPtr::PrivateDPtr()
    : mResourceCreationDate_nil(true), mResourceModifiedDate_nil(true), mNotifyAt_nil(true), mExtensionGroup_nil(true), mExtensionAttributes_nil(true)
{
}


void BMS__ResourceType::setResourceCreationDate( const KDDateTime& resourceCreationDate )
{
    d_ptr->mResourceCreationDate_nil = false;// converter_complextype.cpp:244
    d_ptr->mResourceCreationDate = resourceCreationDate;
}

KDDateTime BMS__ResourceType::resourceCreationDate() const
{
    return d_ptr->mResourceCreationDate;
}

void BMS__ResourceType::setResourceModifiedDate( const KDDateTime& resourceModifiedDate )
{
    d_ptr->mResourceModifiedDate_nil = false;// converter_complextype.cpp:244
    d_ptr->mResourceModifiedDate = resourceModifiedDate;
}

KDDateTime BMS__ResourceType::resourceModifiedDate() const
{
    return d_ptr->mResourceModifiedDate;
}

void BMS__ResourceType::setNotifyAt( const BMS__AsyncEndpointType& notifyAt )
{
    d_ptr->mNotifyAt_nil = false;// converter_complextype.cpp:244
    d_ptr->mNotifyAt = notifyAt;
}

BMS__AsyncEndpointType BMS__ResourceType::notifyAt() const
{
    return d_ptr->mNotifyAt;
}

void BMS__ResourceType::setExtensionGroup( const BMS__ExtensionGroup& extensionGroup )
{
    d_ptr->mExtensionGroup_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionGroup = extensionGroup;
}

BMS__ExtensionGroup BMS__ResourceType::extensionGroup() const
{
    return d_ptr->mExtensionGroup;
}

void BMS__ResourceType::setExtensionAttributes( const BMS__ExtensionAttributes& extensionAttributes )
{
    d_ptr->mExtensionAttributes_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtensionAttributes = extensionAttributes;
}

BMS__ExtensionAttributes BMS__ResourceType::extensionAttributes() const
{
    return d_ptr->mExtensionAttributes;
}

KDSoapValue BMS__ResourceType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceReferenceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ResourceType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mResourceCreationDate_nil) {
        KDSoapValue _valueResourceCreationDate(QString::fromLatin1("resourceCreationDate"), d_ptr->mResourceCreationDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:97
        _valueResourceCreationDate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueResourceCreationDate.setQualified(true);
        if (!_valueResourceCreationDate.isNil())
        args.append(_valueResourceCreationDate);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mResourceModifiedDate_nil) {
        KDSoapValue _valueResourceModifiedDate(QString::fromLatin1("resourceModifiedDate"), d_ptr->mResourceModifiedDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:97
        _valueResourceModifiedDate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueResourceModifiedDate.setQualified(true);
        if (!_valueResourceModifiedDate.isNil())
        args.append(_valueResourceModifiedDate);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mNotifyAt_nil) {
        KDSoapValue _valueNotifyAt(d_ptr->mNotifyAt.serialize(QString::fromLatin1("notifyAt")));// elementargumentserializer.cpp:91
        _valueNotifyAt.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueNotifyAt.setQualified(true);
        if (!_valueNotifyAt.isNil())
        args.append(_valueNotifyAt);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionGroup_nil) {
        KDSoapValue _valueExtensionGroup(d_ptr->mExtensionGroup.serialize(QString::fromLatin1("ExtensionGroup")));// elementargumentserializer.cpp:91
        _valueExtensionGroup.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionGroup.setQualified(true);
        if (!_valueExtensionGroup.isNil())
        args.append(_valueExtensionGroup);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mExtensionAttributes_nil) {
        KDSoapValue _valueExtensionAttributes(d_ptr->mExtensionAttributes.serialize(QString::fromLatin1("ExtensionAttributes")));// elementargumentserializer.cpp:91
        _valueExtensionAttributes.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueExtensionAttributes.setQualified(true);
        if (!_valueExtensionAttributes.isNil())
        args.append(_valueExtensionAttributes);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ResourceType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceReferenceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("resourceCreationDate")) {// converter_complextype.cpp:273
            d_ptr->mResourceCreationDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:286
            d_ptr->mResourceCreationDate_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("resourceModifiedDate")) {// converter_complextype.cpp:273
            d_ptr->mResourceModifiedDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:286
            d_ptr->mResourceModifiedDate_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("notifyAt")) {// converter_complextype.cpp:273
            d_ptr->mNotifyAt.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionGroup")) {// converter_complextype.cpp:273
            d_ptr->mExtensionGroup.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("ExtensionAttributes")) {// converter_complextype.cpp:273
            d_ptr->mExtensionAttributes.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__ResourceType::BMS__ResourceType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ResourceType::~BMS__ResourceType()
{
}

BMS__ResourceReferenceType *BMS__ResourceType::_kd_clone() const
{
    return new BMS__ResourceType(*this);
}

BMS__ResourceType::BMS__ResourceType( const BMS__ResourceType& other )
    : BMS__ResourceReferenceType( other ), d_ptr( other.d_ptr )
{
}

BMS__ResourceType&  BMS__ResourceType::operator=( const BMS__ResourceType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceReferenceType *>(this) = other;

    return *this;
}


class BMS__BMObjectType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__BMContentsType mBmContents;
    bool mBmContents_nil;
};

BMS__BMObjectType::PrivateDPtr::PrivateDPtr()
    : mBmContents_nil(true)
{
}


void BMS__BMObjectType::setBmContents( const BMS__BMContentsType& bmContents )
{
    d_ptr->mBmContents_nil = false;// converter_complextype.cpp:244
    d_ptr->mBmContents = bmContents;
}

BMS__BMContentsType BMS__BMObjectType::bmContents() const
{
    return d_ptr->mBmContents;
}

KDSoapValue BMS__BMObjectType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMObjectType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mBmContents_nil) {
        KDSoapValue _valueBmContents(d_ptr->mBmContents.serialize(QString::fromLatin1("bmContents")));// elementargumentserializer.cpp:91
        _valueBmContents.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBmContents.setQualified(true);
        if (!_valueBmContents.isNil())
        args.append(_valueBmContents);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__BMObjectType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("bmContents")) {// converter_complextype.cpp:273
            d_ptr->mBmContents.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__BMObjectType::BMS__BMObjectType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMObjectType::~BMS__BMObjectType()
{
}

BMS__ResourceReferenceType *BMS__BMObjectType::_kd_clone() const
{
    return new BMS__BMObjectType(*this);
}

BMS__BMObjectType::BMS__BMObjectType( const BMS__BMObjectType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__BMObjectType&  BMS__BMObjectType::operator=( const BMS__BMObjectType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


class BMS__StartJobByTimeType::PrivateDPtr : public QSharedData
{
public:
    KDDateTime mTime;
};

void BMS__StartJobByTimeType::setTime( const KDDateTime& time )
{
    d_ptr->mTime = time;
}

KDDateTime BMS__StartJobByTimeType::time() const
{
    return d_ptr->mTime;
}

KDSoapValue BMS__StartJobByTimeType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__StartJobType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("StartJobByTimeType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueTime(QString::fromLatin1("time"), d_ptr->mTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:97
    _valueTime.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueTime.setQualified(true);
    args.append(_valueTime);// elementargumentserializer.cpp:111
    return mainValue;
}

void BMS__StartJobByTimeType::deserialize( const KDSoapValue& mainValue )
{
    BMS__StartJobType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("time")) {// converter_complextype.cpp:273
            d_ptr->mTime = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:286
        }
    }
}

BMS__StartJobByTimeType::BMS__StartJobByTimeType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__StartJobByTimeType::~BMS__StartJobByTimeType()
{
}

BMS__StartJobType *BMS__StartJobByTimeType::_kd_clone() const
{
    return new BMS__StartJobByTimeType(*this);
}

BMS__StartJobByTimeType::BMS__StartJobByTimeType( const BMS__StartJobByTimeType& other )
    : BMS__StartJobType( other ), d_ptr( other.d_ptr )
{
}

BMS__StartJobByTimeType&  BMS__StartJobByTimeType::operator=( const BMS__StartJobByTimeType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__StartJobType *>(this) = other;

    return *this;
}


class BMS__FormatType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< BMS__TechnicalAttributeType > mTechnicalAttribute;
    bool mTechnicalAttribute_nil;
};

BMS__FormatType::PrivateDPtr::PrivateDPtr()
    : mTechnicalAttribute_nil(true)
{
}


void BMS__FormatType::setTechnicalAttribute( const QList< BMS__TechnicalAttributeType >& technicalAttribute )
{
    d_ptr->mTechnicalAttribute_nil = false;// converter_complextype.cpp:244
    d_ptr->mTechnicalAttribute = technicalAttribute;
}

QList< BMS__TechnicalAttributeType > BMS__FormatType::technicalAttribute() const
{
    return d_ptr->mTechnicalAttribute;
}

KDSoapValue BMS__FormatType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("FormatType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mTechnicalAttribute.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueTechnicalAttribute(d_ptr->mTechnicalAttribute.at(i).serialize(QString::fromLatin1("technicalAttribute")));// elementargumentserializer.cpp:91
        _valueTechnicalAttribute.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueTechnicalAttribute.setQualified(true);
        args.append(_valueTechnicalAttribute);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__FormatType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("technicalAttribute")) {// converter_complextype.cpp:273
            BMS__TechnicalAttributeType mTechnicalAttributeTemp;// converter_complextype.cpp:331
            mTechnicalAttributeTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mTechnicalAttribute.append(mTechnicalAttributeTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__FormatType::BMS__FormatType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__FormatType::~BMS__FormatType()
{
}

BMS__ResourceReferenceType *BMS__FormatType::_kd_clone() const
{
    return new BMS__FormatType(*this);
}

BMS__FormatType::BMS__FormatType( const BMS__FormatType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__FormatType&  BMS__FormatType::operator=( const BMS__FormatType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


class BMS__JobType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__JobStatusType mStatus;
    bool mStatus_nil;
    QString mStatusDescription;
    bool mStatusDescription_nil;
    QString mServiceProviderJobID;
    bool mServiceProviderJobID_nil;
    BMS__QueueType mQueueReference;
    bool mQueueReference_nil;
    BMS__JobsType mTasks;
    bool mTasks_nil;
    QString mOperationName;
    bool mOperationName_nil;
    BMS__BMObjectsType mBmObjects;
    bool mBmObjects_nil;
    BMS__PriorityType mPriority;
    bool mPriority_nil;
    QSharedPointer<BMS__StartJobType> mStartJob;
    KDSoapValue mStartJob_as_kdsoap_value;
    bool mStartJob_nil;
    KDDateTime mFinishBefore;
    bool mFinishBefore_nil;
    QString mEstimatedCompletionDuration;
    bool mEstimatedCompletionDuration_nil;
    quint64 mCurrentQueuePosition;
    bool mCurrentQueuePosition_nil;
    KDDateTime mJobStartedTime;
    bool mJobStartedTime_nil;
    QString mJobElapsedTime;
    bool mJobElapsedTime_nil;
    KDDateTime mJobCompletedTime;
    bool mJobCompletedTime_nil;
    QSharedPointer<BMS__ProcessedInfoType> mProcessed;
    KDSoapValue mProcessed_as_kdsoap_value;
    bool mProcessed_nil;
};

BMS__JobType::PrivateDPtr::PrivateDPtr()
    : mStatus_nil(true), mStatusDescription_nil(true), mServiceProviderJobID_nil(true), mQueueReference_nil(true), mTasks_nil(true), mOperationName_nil(true), mBmObjects_nil(true), mPriority_nil(true), mStartJob_nil(true), mFinishBefore_nil(true), mEstimatedCompletionDuration_nil(true), mCurrentQueuePosition(0), mCurrentQueuePosition_nil(true), mJobStartedTime_nil(true), mJobElapsedTime_nil(true), mJobCompletedTime_nil(true), mProcessed_nil(true)
{
}


void BMS__JobType::setStatus( const BMS__JobStatusType& status )
{
    d_ptr->mStatus_nil = false;// converter_complextype.cpp:244
    d_ptr->mStatus = status;
}

BMS__JobStatusType BMS__JobType::status() const
{
    return d_ptr->mStatus;
}

void BMS__JobType::setStatusDescription( const QString& statusDescription )
{
    d_ptr->mStatusDescription_nil = false;// converter_complextype.cpp:244
    d_ptr->mStatusDescription = statusDescription;
}

QString BMS__JobType::statusDescription() const
{
    return d_ptr->mStatusDescription;
}

void BMS__JobType::setServiceProviderJobID( const QString& serviceProviderJobID )
{
    d_ptr->mServiceProviderJobID_nil = false;// converter_complextype.cpp:244
    d_ptr->mServiceProviderJobID = serviceProviderJobID;
}

QString BMS__JobType::serviceProviderJobID() const
{
    return d_ptr->mServiceProviderJobID;
}

void BMS__JobType::setQueueReference( const BMS__QueueType& queueReference )
{
    d_ptr->mQueueReference_nil = false;// converter_complextype.cpp:244
    d_ptr->mQueueReference = queueReference;
}

BMS__QueueType BMS__JobType::queueReference() const
{
    return d_ptr->mQueueReference;
}

void BMS__JobType::setTasks( const BMS__JobsType& tasks )
{
    d_ptr->mTasks_nil = false;// converter_complextype.cpp:244
    d_ptr->mTasks = tasks;
}

BMS__JobsType BMS__JobType::tasks() const
{
    return d_ptr->mTasks;
}

void BMS__JobType::setOperationName( const QString& operationName )
{
    d_ptr->mOperationName_nil = false;// converter_complextype.cpp:244
    d_ptr->mOperationName = operationName;
}

QString BMS__JobType::operationName() const
{
    return d_ptr->mOperationName;
}

void BMS__JobType::setBmObjects( const BMS__BMObjectsType& bmObjects )
{
    d_ptr->mBmObjects_nil = false;// converter_complextype.cpp:244
    d_ptr->mBmObjects = bmObjects;
}

BMS__BMObjectsType BMS__JobType::bmObjects() const
{
    return d_ptr->mBmObjects;
}

void BMS__JobType::setPriority( const BMS__PriorityType& priority )
{
    d_ptr->mPriority_nil = false;// converter_complextype.cpp:244
    d_ptr->mPriority = priority;
}

BMS__PriorityType BMS__JobType::priority() const
{
    return d_ptr->mPriority;
}

KDSoapValue BMS__JobType::startJob_as_kdsoap_value() const
{
    return d_ptr->mStartJob_as_kdsoap_value;
}

void BMS__JobType::setStartJob( const BMS__StartJobType& startJob )
{
    d_ptr->mStartJob_nil = false;// converter_complextype.cpp:244
    d_ptr->mStartJob = QSharedPointer<BMS__StartJobType>(startJob._kd_clone());
}

const BMS__StartJobType &BMS__JobType::startJob() const
{
    return *d_ptr->mStartJob;
}

void BMS__JobType::setFinishBefore( const KDDateTime& finishBefore )
{
    d_ptr->mFinishBefore_nil = false;// converter_complextype.cpp:244
    d_ptr->mFinishBefore = finishBefore;
}

KDDateTime BMS__JobType::finishBefore() const
{
    return d_ptr->mFinishBefore;
}

void BMS__JobType::setEstimatedCompletionDuration( const QString& estimatedCompletionDuration )
{
    d_ptr->mEstimatedCompletionDuration_nil = false;// converter_complextype.cpp:244
    d_ptr->mEstimatedCompletionDuration = estimatedCompletionDuration;
}

QString BMS__JobType::estimatedCompletionDuration() const
{
    return d_ptr->mEstimatedCompletionDuration;
}

void BMS__JobType::setCurrentQueuePosition( quint64 currentQueuePosition )
{
    d_ptr->mCurrentQueuePosition_nil = false;// converter_complextype.cpp:244
    d_ptr->mCurrentQueuePosition = currentQueuePosition;
}

quint64 BMS__JobType::currentQueuePosition() const
{
    return d_ptr->mCurrentQueuePosition;
}

void BMS__JobType::setJobStartedTime( const KDDateTime& jobStartedTime )
{
    d_ptr->mJobStartedTime_nil = false;// converter_complextype.cpp:244
    d_ptr->mJobStartedTime = jobStartedTime;
}

KDDateTime BMS__JobType::jobStartedTime() const
{
    return d_ptr->mJobStartedTime;
}

void BMS__JobType::setJobElapsedTime( const QString& jobElapsedTime )
{
    d_ptr->mJobElapsedTime_nil = false;// converter_complextype.cpp:244
    d_ptr->mJobElapsedTime = jobElapsedTime;
}

QString BMS__JobType::jobElapsedTime() const
{
    return d_ptr->mJobElapsedTime;
}

void BMS__JobType::setJobCompletedTime( const KDDateTime& jobCompletedTime )
{
    d_ptr->mJobCompletedTime_nil = false;// converter_complextype.cpp:244
    d_ptr->mJobCompletedTime = jobCompletedTime;
}

KDDateTime BMS__JobType::jobCompletedTime() const
{
    return d_ptr->mJobCompletedTime;
}

KDSoapValue BMS__JobType::processed_as_kdsoap_value() const
{
    return d_ptr->mProcessed_as_kdsoap_value;
}

void BMS__JobType::setProcessed( const BMS__ProcessedInfoType& processed )
{
    d_ptr->mProcessed_nil = false;// converter_complextype.cpp:244
    d_ptr->mProcessed = QSharedPointer<BMS__ProcessedInfoType>(processed._kd_clone());
}

const BMS__ProcessedInfoType &BMS__JobType::processed() const
{
    return *d_ptr->mProcessed;
}

KDSoapValue BMS__JobType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("JobType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mStatus_nil) {
        KDSoapValue _valueStatus(QString::fromLatin1("status"), d_ptr->mStatus.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("JobStatusType"));// elementargumentserializer.cpp:99
        _valueStatus.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueStatus.setQualified(true);
        if (!_valueStatus.isNil())
        args.append(_valueStatus);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mStatusDescription_nil) {
        KDSoapValue _valueStatusDescription(QString::fromLatin1("statusDescription"), QVariant::fromValue(d_ptr->mStatusDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueStatusDescription.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueStatusDescription.setQualified(true);
        if (!_valueStatusDescription.isNil())
        args.append(_valueStatusDescription);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mServiceProviderJobID_nil) {
        KDSoapValue _valueServiceProviderJobID(QString::fromLatin1("serviceProviderJobID"), QVariant::fromValue(d_ptr->mServiceProviderJobID), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueServiceProviderJobID.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueServiceProviderJobID.setQualified(true);
        if (!_valueServiceProviderJobID.isNil())
        args.append(_valueServiceProviderJobID);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mQueueReference_nil) {
        KDSoapValue _valueQueueReference(d_ptr->mQueueReference.serialize(QString::fromLatin1("queueReference")));// elementargumentserializer.cpp:91
        _valueQueueReference.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueQueueReference.setQualified(true);
        if (!_valueQueueReference.isNil())
        args.append(_valueQueueReference);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mTasks_nil) {
        KDSoapValue _valueTasks(d_ptr->mTasks.serialize(QString::fromLatin1("tasks")));// elementargumentserializer.cpp:91
        _valueTasks.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueTasks.setQualified(true);
        if (!_valueTasks.isNil())
        args.append(_valueTasks);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mOperationName_nil) {
        KDSoapValue _valueOperationName(QString::fromLatin1("operationName"), QVariant::fromValue(d_ptr->mOperationName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueOperationName.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueOperationName.setQualified(true);
        if (!_valueOperationName.isNil())
        args.append(_valueOperationName);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mBmObjects_nil) {
        KDSoapValue _valueBmObjects(d_ptr->mBmObjects.serialize(QString::fromLatin1("bmObjects")));// elementargumentserializer.cpp:91
        _valueBmObjects.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBmObjects.setQualified(true);
        if (!_valueBmObjects.isNil())
        args.append(_valueBmObjects);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mPriority_nil) {
        KDSoapValue _valuePriority(QString::fromLatin1("priority"), d_ptr->mPriority.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("PriorityType"));// elementargumentserializer.cpp:99
        _valuePriority.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valuePriority.setQualified(true);
        if (!_valuePriority.isNil())
        args.append(_valuePriority);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mStartJob_nil) {
        KDSoapValue _valueStartJob(d_ptr->mStartJob->serialize(QString::fromLatin1("startJob")));// elementargumentserializer.cpp:91
        _valueStartJob.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueStartJob.setQualified(true);
        if (!_valueStartJob.isNil())
        args.append(_valueStartJob);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mFinishBefore_nil) {
        KDSoapValue _valueFinishBefore(QString::fromLatin1("finishBefore"), d_ptr->mFinishBefore.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:97
        _valueFinishBefore.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueFinishBefore.setQualified(true);
        if (!_valueFinishBefore.isNil())
        args.append(_valueFinishBefore);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mEstimatedCompletionDuration_nil) {
        KDSoapValue _valueEstimatedCompletionDuration(QString::fromLatin1("estimatedCompletionDuration"), QVariant::fromValue(d_ptr->mEstimatedCompletionDuration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:97
        _valueEstimatedCompletionDuration.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueEstimatedCompletionDuration.setQualified(true);
        if (!_valueEstimatedCompletionDuration.isNil())
        args.append(_valueEstimatedCompletionDuration);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mCurrentQueuePosition_nil) {
        KDSoapValue _valueCurrentQueuePosition(QString::fromLatin1("currentQueuePosition"), QVariant::fromValue(d_ptr->mCurrentQueuePosition), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueCurrentQueuePosition.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueCurrentQueuePosition.setQualified(true);
        if (!_valueCurrentQueuePosition.isNil())
        args.append(_valueCurrentQueuePosition);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mJobStartedTime_nil) {
        KDSoapValue _valueJobStartedTime(QString::fromLatin1("jobStartedTime"), d_ptr->mJobStartedTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:97
        _valueJobStartedTime.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueJobStartedTime.setQualified(true);
        if (!_valueJobStartedTime.isNil())
        args.append(_valueJobStartedTime);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mJobElapsedTime_nil) {
        KDSoapValue _valueJobElapsedTime(QString::fromLatin1("jobElapsedTime"), QVariant::fromValue(d_ptr->mJobElapsedTime), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:97
        _valueJobElapsedTime.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueJobElapsedTime.setQualified(true);
        if (!_valueJobElapsedTime.isNil())
        args.append(_valueJobElapsedTime);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mJobCompletedTime_nil) {
        KDSoapValue _valueJobCompletedTime(QString::fromLatin1("jobCompletedTime"), d_ptr->mJobCompletedTime.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:97
        _valueJobCompletedTime.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueJobCompletedTime.setQualified(true);
        if (!_valueJobCompletedTime.isNil())
        args.append(_valueJobCompletedTime);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mProcessed_nil) {
        KDSoapValue _valueProcessed(d_ptr->mProcessed->serialize(QString::fromLatin1("processed")));// elementargumentserializer.cpp:91
        _valueProcessed.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueProcessed.setQualified(true);
        if (!_valueProcessed.isNil())
        args.append(_valueProcessed);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__JobType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("status")) {// converter_complextype.cpp:273
            d_ptr->mStatus.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mStatus_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("statusDescription")) {// converter_complextype.cpp:273
            d_ptr->mStatusDescription = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mStatusDescription_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("serviceProviderJobID")) {// converter_complextype.cpp:273
            d_ptr->mServiceProviderJobID = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mServiceProviderJobID_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("queueReference")) {// converter_complextype.cpp:273
            d_ptr->mQueueReference.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("tasks")) {// converter_complextype.cpp:273
            d_ptr->mTasks.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("operationName")) {// converter_complextype.cpp:273
            d_ptr->mOperationName = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mOperationName_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("bmObjects")) {// converter_complextype.cpp:273
            d_ptr->mBmObjects.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("priority")) {// converter_complextype.cpp:273
            d_ptr->mPriority.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mPriority_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("startJob")) {// converter_complextype.cpp:273
            d_ptr->mStartJob_as_kdsoap_value = val;// converter_complextype.cpp:306
            if (!d_ptr->mStartJob)
                d_ptr->mStartJob = QSharedPointer<BMS__StartJobType>(new BMS__StartJobType);// converter_complextype.cpp:309
            d_ptr->mStartJob->deserialize(val);// converter_complextype.cpp:311
        }
        else if (name == QLatin1String("finishBefore")) {// converter_complextype.cpp:273
            d_ptr->mFinishBefore = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:286
            d_ptr->mFinishBefore_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("estimatedCompletionDuration")) {// converter_complextype.cpp:273
            d_ptr->mEstimatedCompletionDuration = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mEstimatedCompletionDuration_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("currentQueuePosition")) {// converter_complextype.cpp:273
            d_ptr->mCurrentQueuePosition = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mCurrentQueuePosition_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("jobStartedTime")) {// converter_complextype.cpp:273
            d_ptr->mJobStartedTime = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:286
            d_ptr->mJobStartedTime_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("jobElapsedTime")) {// converter_complextype.cpp:273
            d_ptr->mJobElapsedTime = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mJobElapsedTime_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("jobCompletedTime")) {// converter_complextype.cpp:273
            d_ptr->mJobCompletedTime = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:286
            d_ptr->mJobCompletedTime_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("processed")) {// converter_complextype.cpp:273
            d_ptr->mProcessed_as_kdsoap_value = val;// converter_complextype.cpp:306
            if (!d_ptr->mProcessed)
                d_ptr->mProcessed = QSharedPointer<BMS__ProcessedInfoType>(new BMS__ProcessedInfoType);// converter_complextype.cpp:309
            d_ptr->mProcessed->deserialize(val);// converter_complextype.cpp:311
        }
    }
}

BMS__JobType::BMS__JobType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__JobType::~BMS__JobType()
{
}

BMS__ResourceReferenceType *BMS__JobType::_kd_clone() const
{
    return new BMS__JobType(*this);
}

BMS__JobType::BMS__JobType( const BMS__JobType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__JobType&  BMS__JobType::operator=( const BMS__JobType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


KDSoapValue __TargetAudience::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("targetAudience"));
    return mainValue;
}

void __TargetAudience::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__TargetAudience::__TargetAudience()
{
}

__TargetAudience::~__TargetAudience()
{
}


class TFMS__TransformJobType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    TFMS__Profiles mProfiles;
    bool mProfiles_nil;
};

TFMS__TransformJobType::PrivateDPtr::PrivateDPtr()
    : mProfiles_nil(true)
{
}


void TFMS__TransformJobType::setProfiles( const TFMS__Profiles& profiles )
{
    d_ptr->mProfiles_nil = false;// converter_complextype.cpp:244
    d_ptr->mProfiles = profiles;
}

TFMS__Profiles TFMS__TransformJobType::profiles() const
{
    return d_ptr->mProfiles;
}

KDSoapValue TFMS__TransformJobType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__JobType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("TransformJobType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mProfiles_nil) {
        KDSoapValue _valueProfiles(d_ptr->mProfiles.serialize(QString::fromLatin1("profiles")));// elementargumentserializer.cpp:91
        _valueProfiles.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
        _valueProfiles.setQualified(true);
        if (!_valueProfiles.isNil())
        args.append(_valueProfiles);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void TFMS__TransformJobType::deserialize( const KDSoapValue& mainValue )
{
    BMS__JobType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("profiles")) {// converter_complextype.cpp:273
            d_ptr->mProfiles.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

TFMS__TransformJobType::TFMS__TransformJobType()
    : d_ptr(new PrivateDPtr)
{
}

TFMS__TransformJobType::~TFMS__TransformJobType()
{
}

BMS__ResourceReferenceType *TFMS__TransformJobType::_kd_clone() const
{
    return new TFMS__TransformJobType(*this);
}

TFMS__TransformJobType::TFMS__TransformJobType( const TFMS__TransformJobType& other )
    : BMS__JobType( other ), d_ptr( other.d_ptr )
{
}

TFMS__TransformJobType&  TFMS__TransformJobType::operator=( const TFMS__TransformJobType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__JobType *>(this) = other;

    return *this;
}


class BMS__BMContentFormatType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__BMEssenceLocatorsType mBmEssenceLocators;
    bool mBmEssenceLocators_nil;
    BMS__FormatCollection mFormatCollection;
    bool mFormatCollection_nil;
    BMS__DurationType mDuration;
    bool mDuration_nil;
    BMS__HashType mHash;
    bool mHash_nil;
    quint64 mPackageSize;
    bool mPackageSize_nil;
    BMS__MimeType mMimeType;
    bool mMimeType_nil;
};

BMS__BMContentFormatType::PrivateDPtr::PrivateDPtr()
    : mBmEssenceLocators_nil(true), mFormatCollection_nil(true), mDuration_nil(true), mHash_nil(true), mPackageSize(0), mPackageSize_nil(true), mMimeType_nil(true)
{
}


void BMS__BMContentFormatType::setBmEssenceLocators( const BMS__BMEssenceLocatorsType& bmEssenceLocators )
{
    d_ptr->mBmEssenceLocators_nil = false;// converter_complextype.cpp:244
    d_ptr->mBmEssenceLocators = bmEssenceLocators;
}

BMS__BMEssenceLocatorsType BMS__BMContentFormatType::bmEssenceLocators() const
{
    return d_ptr->mBmEssenceLocators;
}

void BMS__BMContentFormatType::setFormatCollection( const BMS__FormatCollection& formatCollection )
{
    d_ptr->mFormatCollection_nil = false;// converter_complextype.cpp:244
    d_ptr->mFormatCollection = formatCollection;
}

BMS__FormatCollection BMS__BMContentFormatType::formatCollection() const
{
    return d_ptr->mFormatCollection;
}

void BMS__BMContentFormatType::setDuration( const BMS__DurationType& duration )
{
    d_ptr->mDuration_nil = false;// converter_complextype.cpp:244
    d_ptr->mDuration = duration;
}

BMS__DurationType BMS__BMContentFormatType::duration() const
{
    return d_ptr->mDuration;
}

void BMS__BMContentFormatType::setHash( const BMS__HashType& hash )
{
    d_ptr->mHash_nil = false;// converter_complextype.cpp:244
    d_ptr->mHash = hash;
}

BMS__HashType BMS__BMContentFormatType::hash() const
{
    return d_ptr->mHash;
}

void BMS__BMContentFormatType::setPackageSize( quint64 packageSize )
{
    d_ptr->mPackageSize_nil = false;// converter_complextype.cpp:244
    d_ptr->mPackageSize = packageSize;
}

quint64 BMS__BMContentFormatType::packageSize() const
{
    return d_ptr->mPackageSize;
}

void BMS__BMContentFormatType::setMimeType( const BMS__MimeType& mimeType )
{
    d_ptr->mMimeType_nil = false;// converter_complextype.cpp:244
    d_ptr->mMimeType = mimeType;
}

BMS__MimeType BMS__BMContentFormatType::mimeType() const
{
    return d_ptr->mMimeType;
}

KDSoapValue BMS__BMContentFormatType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMContentFormatType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mBmEssenceLocators_nil) {
        KDSoapValue _valueBmEssenceLocators(d_ptr->mBmEssenceLocators.serialize(QString::fromLatin1("bmEssenceLocators")));// elementargumentserializer.cpp:91
        _valueBmEssenceLocators.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBmEssenceLocators.setQualified(true);
        if (!_valueBmEssenceLocators.isNil())
        args.append(_valueBmEssenceLocators);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mFormatCollection_nil) {
        KDSoapValue _valueFormatCollection(d_ptr->mFormatCollection.serialize(QString::fromLatin1("formatCollection")));// elementargumentserializer.cpp:91
        _valueFormatCollection.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueFormatCollection.setQualified(true);
        if (!_valueFormatCollection.isNil())
        args.append(_valueFormatCollection);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mDuration_nil) {
        KDSoapValue _valueDuration(d_ptr->mDuration.serialize(QString::fromLatin1("duration")));// elementargumentserializer.cpp:91
        _valueDuration.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDuration.setQualified(true);
        if (!_valueDuration.isNil())
        args.append(_valueDuration);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mHash_nil) {
        KDSoapValue _valueHash(d_ptr->mHash.serialize(QString::fromLatin1("hash")));// elementargumentserializer.cpp:91
        _valueHash.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueHash.setQualified(true);
        if (!_valueHash.isNil())
        args.append(_valueHash);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mPackageSize_nil) {
        KDSoapValue _valuePackageSize(QString::fromLatin1("packageSize"), QVariant::fromValue(d_ptr->mPackageSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("unsignedLong"));// elementargumentserializer.cpp:97
        _valuePackageSize.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valuePackageSize.setQualified(true);
        if (!_valuePackageSize.isNil())
        args.append(_valuePackageSize);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mMimeType_nil) {
        KDSoapValue _valueMimeType(d_ptr->mMimeType.serialize(QString::fromLatin1("mimeType")));// elementargumentserializer.cpp:91
        _valueMimeType.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueMimeType.setQualified(true);
        if (!_valueMimeType.isNil())
        args.append(_valueMimeType);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__BMContentFormatType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("bmEssenceLocators")) {// converter_complextype.cpp:273
            d_ptr->mBmEssenceLocators.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("formatCollection")) {// converter_complextype.cpp:273
            d_ptr->mFormatCollection.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("duration")) {// converter_complextype.cpp:273
            d_ptr->mDuration.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("hash")) {// converter_complextype.cpp:273
            d_ptr->mHash.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("packageSize")) {// converter_complextype.cpp:273
            d_ptr->mPackageSize = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mPackageSize_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("mimeType")) {// converter_complextype.cpp:273
            d_ptr->mMimeType.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__BMContentFormatType::BMS__BMContentFormatType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMContentFormatType::~BMS__BMContentFormatType()
{
}

BMS__ResourceReferenceType *BMS__BMContentFormatType::_kd_clone() const
{
    return new BMS__BMContentFormatType(*this);
}

BMS__BMContentFormatType::BMS__BMContentFormatType( const BMS__BMContentFormatType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__BMContentFormatType&  BMS__BMContentFormatType::operator=( const BMS__BMContentFormatType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


class BMS__ContainerFormatType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__ContainerFormat mContainerFormat;
    bool mContainerFormat_nil;
};

BMS__ContainerFormatType::PrivateDPtr::PrivateDPtr()
    : mContainerFormat_nil(true)
{
}


void BMS__ContainerFormatType::setContainerFormat( const BMS__ContainerFormat& containerFormat )
{
    d_ptr->mContainerFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mContainerFormat = containerFormat;
}

BMS__ContainerFormat BMS__ContainerFormatType::containerFormat() const
{
    return d_ptr->mContainerFormat;
}

KDSoapValue BMS__ContainerFormatType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__FormatType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ContainerFormatType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mContainerFormat_nil) {
        KDSoapValue _valueContainerFormat(d_ptr->mContainerFormat.serialize(QString::fromLatin1("containerFormat")));// elementargumentserializer.cpp:91
        _valueContainerFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueContainerFormat.setQualified(true);
        if (!_valueContainerFormat.isNil())
        args.append(_valueContainerFormat);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ContainerFormatType::deserialize( const KDSoapValue& mainValue )
{
    BMS__FormatType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("containerFormat")) {// converter_complextype.cpp:273
            d_ptr->mContainerFormat.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__ContainerFormatType::BMS__ContainerFormatType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ContainerFormatType::~BMS__ContainerFormatType()
{
}

BMS__ResourceReferenceType *BMS__ContainerFormatType::_kd_clone() const
{
    return new BMS__ContainerFormatType(*this);
}

BMS__ContainerFormatType::BMS__ContainerFormatType( const BMS__ContainerFormatType& other )
    : BMS__FormatType( other ), d_ptr( other.d_ptr )
{
}

BMS__ContainerFormatType&  BMS__ContainerFormatType::operator=( const BMS__ContainerFormatType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__FormatType *>(this) = other;

    return *this;
}


class BMS__QueryJobRequestByFilterType::PrivateDPtr : public QSharedData
{
public:
    BMS__ListFilterType mListFilter;
};

void BMS__QueryJobRequestByFilterType::setListFilter( const BMS__ListFilterType& listFilter )
{
    d_ptr->mListFilter = listFilter;
}

BMS__ListFilterType BMS__QueryJobRequestByFilterType::listFilter() const
{
    return d_ptr->mListFilter;
}

KDSoapValue BMS__QueryJobRequestByFilterType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__QueryJobRequestType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("QueryJobRequestByFilterType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueListFilter(d_ptr->mListFilter.serialize(QString::fromLatin1("listFilter")));// elementargumentserializer.cpp:91
    _valueListFilter.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueListFilter.setQualified(true);
    args.append(_valueListFilter);// elementargumentserializer.cpp:111
    return mainValue;
}

void BMS__QueryJobRequestByFilterType::deserialize( const KDSoapValue& mainValue )
{
    BMS__QueryJobRequestType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("listFilter")) {// converter_complextype.cpp:273
            d_ptr->mListFilter.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__QueryJobRequestByFilterType::BMS__QueryJobRequestByFilterType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__QueryJobRequestByFilterType::~BMS__QueryJobRequestByFilterType()
{
}

BMS__QueryJobRequestType *BMS__QueryJobRequestByFilterType::_kd_clone() const
{
    return new BMS__QueryJobRequestByFilterType(*this);
}

BMS__QueryJobRequestByFilterType::BMS__QueryJobRequestByFilterType( const BMS__QueryJobRequestByFilterType& other )
    : BMS__QueryJobRequestType( other ), d_ptr( other.d_ptr )
{
}

BMS__QueryJobRequestByFilterType&  BMS__QueryJobRequestByFilterType::operator=( const BMS__QueryJobRequestByFilterType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__QueryJobRequestType *>(this) = other;

    return *this;
}


KDSoapValue __ObjectType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("objectType"));
    return mainValue;
}

void __ObjectType::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__ObjectType::__ObjectType()
{
}

__ObjectType::~__ObjectType()
{
}


class BMS__DescriptionType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    __BmContentDescriptionType mBmContentDescription;
    bool mBmContentDescription_nil;
};

BMS__DescriptionType::PrivateDPtr::PrivateDPtr()
    : mBmContentDescription_nil(true)
{
}


void BMS__DescriptionType::setBmContentDescription( const __BmContentDescriptionType& bmContentDescription )
{
    d_ptr->mBmContentDescription_nil = false;// converter_complextype.cpp:244
    d_ptr->mBmContentDescription = bmContentDescription;
}

__BmContentDescriptionType BMS__DescriptionType::bmContentDescription() const
{
    return d_ptr->mBmContentDescription;
}

KDSoapValue BMS__DescriptionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("DescriptionType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mBmContentDescription_nil) {
        KDSoapValue _valueBmContentDescription(d_ptr->mBmContentDescription.serialize(QString::fromLatin1("bmContentDescription")));// elementargumentserializer.cpp:91
        _valueBmContentDescription.setNamespaceUri(QString::fromLatin1("http://description.fims.tv"));
        _valueBmContentDescription.setQualified(true);
        if (!_valueBmContentDescription.isNil())
        args.append(_valueBmContentDescription);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__DescriptionType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("bmContentDescription")) {// converter_complextype.cpp:273
            d_ptr->mBmContentDescription.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__DescriptionType::BMS__DescriptionType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__DescriptionType::~BMS__DescriptionType()
{
}

BMS__ResourceReferenceType *BMS__DescriptionType::_kd_clone() const
{
    return new BMS__DescriptionType(*this);
}

BMS__DescriptionType::BMS__DescriptionType( const BMS__DescriptionType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__DescriptionType&  BMS__DescriptionType::operator=( const BMS__DescriptionType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


KDSoapValue __TitleType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("titleType"));
    return mainValue;
}

void __TitleType::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__TitleType::__TitleType()
{
}

__TitleType::~__TitleType()
{
}


class BMS__AudioFormatType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mSamplingRate;
    bool mSamplingRate_nil;
    BMS__CodecType mAudioEncoding;
    bool mAudioEncoding_nil;
    BMS__TrackConfiguration mTrackConfiguration;
    bool mTrackConfiguration_nil;
    QList< BMS__BMTrackType > mAudioTrack;
    bool mAudioTrack_nil;
    quint64 mChannels;
    bool mChannels_nil;
    quint64 mBitRate;
    bool mBitRate_nil;
    BMS__BitRateModeType mBitRateMode;
    bool mBitRateMode_nil;
    quint64 mSampleSize;
    bool mSampleSize_nil;
    BMS__AudioSampleType mSampleType;
    bool mSampleType_nil;
};

BMS__AudioFormatType::PrivateDPtr::PrivateDPtr()
    : mSamplingRate(0), mSamplingRate_nil(true), mAudioEncoding_nil(true), mTrackConfiguration_nil(true), mAudioTrack_nil(true), mChannels(0), mChannels_nil(true), mBitRate(0), mBitRate_nil(true), mBitRateMode_nil(true), mSampleSize(0), mSampleSize_nil(true), mSampleType_nil(true)
{
}


void BMS__AudioFormatType::setSamplingRate( float samplingRate )
{
    d_ptr->mSamplingRate_nil = false;// converter_complextype.cpp:244
    d_ptr->mSamplingRate = samplingRate;
}

float BMS__AudioFormatType::samplingRate() const
{
    return d_ptr->mSamplingRate;
}

void BMS__AudioFormatType::setAudioEncoding( const BMS__CodecType& audioEncoding )
{
    d_ptr->mAudioEncoding_nil = false;// converter_complextype.cpp:244
    d_ptr->mAudioEncoding = audioEncoding;
}

BMS__CodecType BMS__AudioFormatType::audioEncoding() const
{
    return d_ptr->mAudioEncoding;
}

void BMS__AudioFormatType::setTrackConfiguration( const BMS__TrackConfiguration& trackConfiguration )
{
    d_ptr->mTrackConfiguration_nil = false;// converter_complextype.cpp:244
    d_ptr->mTrackConfiguration = trackConfiguration;
}

BMS__TrackConfiguration BMS__AudioFormatType::trackConfiguration() const
{
    return d_ptr->mTrackConfiguration;
}

void BMS__AudioFormatType::setAudioTrack( const QList< BMS__BMTrackType >& audioTrack )
{
    d_ptr->mAudioTrack_nil = false;// converter_complextype.cpp:244
    d_ptr->mAudioTrack = audioTrack;
}

QList< BMS__BMTrackType > BMS__AudioFormatType::audioTrack() const
{
    return d_ptr->mAudioTrack;
}

void BMS__AudioFormatType::setChannels( quint64 channels )
{
    d_ptr->mChannels_nil = false;// converter_complextype.cpp:244
    d_ptr->mChannels = channels;
}

quint64 BMS__AudioFormatType::channels() const
{
    return d_ptr->mChannels;
}

void BMS__AudioFormatType::setBitRate( quint64 bitRate )
{
    d_ptr->mBitRate_nil = false;// converter_complextype.cpp:244
    d_ptr->mBitRate = bitRate;
}

quint64 BMS__AudioFormatType::bitRate() const
{
    return d_ptr->mBitRate;
}

void BMS__AudioFormatType::setBitRateMode( const BMS__BitRateModeType& bitRateMode )
{
    d_ptr->mBitRateMode_nil = false;// converter_complextype.cpp:244
    d_ptr->mBitRateMode = bitRateMode;
}

BMS__BitRateModeType BMS__AudioFormatType::bitRateMode() const
{
    return d_ptr->mBitRateMode;
}

void BMS__AudioFormatType::setSampleSize( quint64 sampleSize )
{
    d_ptr->mSampleSize_nil = false;// converter_complextype.cpp:244
    d_ptr->mSampleSize = sampleSize;
}

quint64 BMS__AudioFormatType::sampleSize() const
{
    return d_ptr->mSampleSize;
}

void BMS__AudioFormatType::setSampleType( const BMS__AudioSampleType& sampleType )
{
    d_ptr->mSampleType_nil = false;// converter_complextype.cpp:244
    d_ptr->mSampleType = sampleType;
}

BMS__AudioSampleType BMS__AudioFormatType::sampleType() const
{
    return d_ptr->mSampleType;
}

KDSoapValue BMS__AudioFormatType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__FormatType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("AudioFormatType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mSamplingRate_nil) {
        KDSoapValue _valueSamplingRate(QString::fromLatin1("samplingRate"), QVariant::fromValue(d_ptr->mSamplingRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:97
        _valueSamplingRate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueSamplingRate.setQualified(true);
        if (!_valueSamplingRate.isNil())
        args.append(_valueSamplingRate);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAudioEncoding_nil) {
        KDSoapValue _valueAudioEncoding(d_ptr->mAudioEncoding.serialize(QString::fromLatin1("audioEncoding")));// elementargumentserializer.cpp:91
        _valueAudioEncoding.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueAudioEncoding.setQualified(true);
        if (!_valueAudioEncoding.isNil())
        args.append(_valueAudioEncoding);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mTrackConfiguration_nil) {
        KDSoapValue _valueTrackConfiguration(d_ptr->mTrackConfiguration.serialize(QString::fromLatin1("trackConfiguration")));// elementargumentserializer.cpp:91
        _valueTrackConfiguration.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueTrackConfiguration.setQualified(true);
        if (!_valueTrackConfiguration.isNil())
        args.append(_valueTrackConfiguration);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mAudioTrack.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueAudioTrack(d_ptr->mAudioTrack.at(i).serialize(QString::fromLatin1("audioTrack")));// elementargumentserializer.cpp:91
        _valueAudioTrack.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueAudioTrack.setQualified(true);
        args.append(_valueAudioTrack);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mChannels_nil) {
        KDSoapValue _valueChannels(QString::fromLatin1("channels"), QVariant::fromValue(d_ptr->mChannels), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueChannels.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueChannels.setQualified(true);
        if (!_valueChannels.isNil())
        args.append(_valueChannels);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mBitRate_nil) {
        KDSoapValue _valueBitRate(QString::fromLatin1("bitRate"), QVariant::fromValue(d_ptr->mBitRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueBitRate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBitRate.setQualified(true);
        if (!_valueBitRate.isNil())
        args.append(_valueBitRate);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mBitRateMode_nil) {
        KDSoapValue _valueBitRateMode(QString::fromLatin1("bitRateMode"), d_ptr->mBitRateMode.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BitRateModeType"));// elementargumentserializer.cpp:99
        _valueBitRateMode.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBitRateMode.setQualified(true);
        if (!_valueBitRateMode.isNil())
        args.append(_valueBitRateMode);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mSampleSize_nil) {
        KDSoapValue _valueSampleSize(QString::fromLatin1("sampleSize"), QVariant::fromValue(d_ptr->mSampleSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueSampleSize.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueSampleSize.setQualified(true);
        if (!_valueSampleSize.isNil())
        args.append(_valueSampleSize);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mSampleType_nil) {
        KDSoapValue _valueSampleType(QString::fromLatin1("sampleType"), d_ptr->mSampleType.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("AudioSampleType"));// elementargumentserializer.cpp:99
        _valueSampleType.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueSampleType.setQualified(true);
        if (!_valueSampleType.isNil())
        args.append(_valueSampleType);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__AudioFormatType::deserialize( const KDSoapValue& mainValue )
{
    BMS__FormatType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("samplingRate")) {// converter_complextype.cpp:273
            d_ptr->mSamplingRate = val.value().value<float>();// converter_complextype.cpp:286
            d_ptr->mSamplingRate_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("audioEncoding")) {// converter_complextype.cpp:273
            d_ptr->mAudioEncoding.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("trackConfiguration")) {// converter_complextype.cpp:273
            d_ptr->mTrackConfiguration.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("audioTrack")) {// converter_complextype.cpp:273
            BMS__BMTrackType mAudioTrackTemp;// converter_complextype.cpp:331
            mAudioTrackTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mAudioTrack.append(mAudioTrackTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("channels")) {// converter_complextype.cpp:273
            d_ptr->mChannels = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mChannels_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("bitRate")) {// converter_complextype.cpp:273
            d_ptr->mBitRate = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mBitRate_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("bitRateMode")) {// converter_complextype.cpp:273
            d_ptr->mBitRateMode.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mBitRateMode_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("sampleSize")) {// converter_complextype.cpp:273
            d_ptr->mSampleSize = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mSampleSize_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("sampleType")) {// converter_complextype.cpp:273
            d_ptr->mSampleType.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mSampleType_nil = false;// converter_complextype.cpp:294
        }
    }
}

BMS__AudioFormatType::BMS__AudioFormatType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__AudioFormatType::~BMS__AudioFormatType()
{
}

BMS__ResourceReferenceType *BMS__AudioFormatType::_kd_clone() const
{
    return new BMS__AudioFormatType(*this);
}

BMS__AudioFormatType::BMS__AudioFormatType( const BMS__AudioFormatType& other )
    : BMS__FormatType( other ), d_ptr( other.d_ptr )
{
}

BMS__AudioFormatType&  BMS__AudioFormatType::operator=( const BMS__AudioFormatType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__FormatType *>(this) = other;

    return *this;
}


class BMS__ProcessedInfoByFramesType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    quint64 mProcessedFramesCount;
};

BMS__ProcessedInfoByFramesType::PrivateDPtr::PrivateDPtr()
    : mProcessedFramesCount(0)
{
}


void BMS__ProcessedInfoByFramesType::setProcessedFramesCount( quint64 processedFramesCount )
{
    d_ptr->mProcessedFramesCount = processedFramesCount;
}

quint64 BMS__ProcessedInfoByFramesType::processedFramesCount() const
{
    return d_ptr->mProcessedFramesCount;
}

KDSoapValue BMS__ProcessedInfoByFramesType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ProcessedInfoType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ProcessedInfoByFramesType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueProcessedFramesCount(QString::fromLatin1("processedFramesCount"), QVariant::fromValue(d_ptr->mProcessedFramesCount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
    _valueProcessedFramesCount.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueProcessedFramesCount.setQualified(true);
    args.append(_valueProcessedFramesCount);// elementargumentserializer.cpp:111
    return mainValue;
}

void BMS__ProcessedInfoByFramesType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ProcessedInfoType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("processedFramesCount")) {// converter_complextype.cpp:273
            d_ptr->mProcessedFramesCount = val.value().value<quint64>();// converter_complextype.cpp:286
        }
    }
}

BMS__ProcessedInfoByFramesType::BMS__ProcessedInfoByFramesType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ProcessedInfoByFramesType::~BMS__ProcessedInfoByFramesType()
{
}

BMS__ProcessedInfoType *BMS__ProcessedInfoByFramesType::_kd_clone() const
{
    return new BMS__ProcessedInfoByFramesType(*this);
}

BMS__ProcessedInfoByFramesType::BMS__ProcessedInfoByFramesType( const BMS__ProcessedInfoByFramesType& other )
    : BMS__ProcessedInfoType( other ), d_ptr( other.d_ptr )
{
}

BMS__ProcessedInfoByFramesType&  BMS__ProcessedInfoByFramesType::operator=( const BMS__ProcessedInfoByFramesType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ProcessedInfoType *>(this) = other;

    return *this;
}


class TFMS__TransformFaultType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    TFMS__TransformErrorCodeType mExtendedCode;
    bool mExtendedCode_nil;
};

TFMS__TransformFaultType::PrivateDPtr::PrivateDPtr()
    : mExtendedCode_nil(true)
{
}

void TFMS__TransformFaultType::setExtendedCode( const TFMS__TransformErrorCodeType& extendedCode )
{
    d_ptr->mExtendedCode_nil = false;// converter_complextype.cpp:244
    d_ptr->mExtendedCode = extendedCode;
}

TFMS__TransformErrorCodeType TFMS__TransformFaultType::extendedCode() const
{
    return d_ptr->mExtendedCode;
}

KDSoapValue TFMS__TransformFaultType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__FaultType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("TransformFaultType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mExtendedCode_nil) {
        KDSoapValue _valueExtendedCode(QString::fromLatin1("extendedCode"), d_ptr->mExtendedCode.serialize(), QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("TransformErrorCodeType"));// elementargumentserializer.cpp:99
        _valueExtendedCode.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
        _valueExtendedCode.setQualified(true);
        if (!_valueExtendedCode.isNil())
        args.append(_valueExtendedCode);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void TFMS__TransformFaultType::deserialize( const KDSoapValue& mainValue )
{
    BMS__FaultType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("extendedCode")) {// converter_complextype.cpp:273
            d_ptr->mExtendedCode.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mExtendedCode_nil = false;// converter_complextype.cpp:294
        }
    }
}

TFMS__TransformFaultType::TFMS__TransformFaultType()
    : d_ptr(new PrivateDPtr)
{
}

TFMS__TransformFaultType::~TFMS__TransformFaultType()
{
}

BMS__FaultType *TFMS__TransformFaultType::_kd_clone() const
{
    return new TFMS__TransformFaultType(*this);
}

TFMS__TransformFaultType::TFMS__TransformFaultType( const TFMS__TransformFaultType& other )
    : BMS__FaultType( other ), d_ptr( other.d_ptr )
{
}

TFMS__TransformFaultType&  TFMS__TransformFaultType::operator=( const TFMS__TransformFaultType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__FaultType *>(this) = other;

    return *this;
}


class TransformFaultException::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    TFMS__TransformFaultType m_faultType;
};

TransformFaultException::PrivateDPtr::PrivateDPtr()
{
}

TransformFaultException::TransformFaultException():
    d_ptr(new PrivateDPtr())
{
}

TransformFaultException::TransformFaultException(const TransformFaultException &cpy)
    :KDSoapFaultException(cpy), d_ptr(cpy.d_ptr)
{
}


TransformFaultException::TransformFaultException(const QString &faultCode, const QString &faultString, const QString &faultActor, const TFMS__TransformFaultType &faultType):
    KDSoapFaultException(faultCode, faultString, faultActor),
    d_ptr(new PrivateDPtr())
{
    d_ptr->m_faultType = faultType;
}

TransformFaultException& TransformFaultException::operator=(const TransformFaultException &other)
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<KDSoapFaultException *>(this) = other;

    return *this;
}

TransformFaultException::~TransformFaultException()
{

}

KDSoapValue TransformFaultException::serialize( const QString& valueName ) const
{
    return d_ptr->m_faultType.serialize(valueName);
}

void TransformFaultException::deserialize( const KDSoapValue& mainValue )
{
    KDSoapFaultException::deserialize(mainValue);
    const KDSoapValue& val = KDSoapFaultException::faultDetails(mainValue);
    if (!val.isNull()) {
        const KDSoapValue& faultVal = val.childValues().first();
        if (faultVal.name() == faultElementName())
            d_ptr->m_faultType.deserialize(faultVal);
    }
}

TFMS__TransformFaultType TransformFaultException::faultType() const
{
    return d_ptr->m_faultType;
}

QString TransformFaultException::faultElementName()
{
    // generated code so it's ok to make it hardcoded for now I guess
    return QString("TransformFault");
}

QString TransformFaultException::faultElementNameSpace()
{
    // harcoded now but will be provided by code generation
    return QString("http://transformmedia.fims.tv");
}

KDSoapValue BMS__StartJobByNoWaitType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__StartJobType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("StartJobByNoWaitType"));
    return mainValue;
}

void BMS__StartJobByNoWaitType::deserialize( const KDSoapValue& mainValue )
{
    BMS__StartJobType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

BMS__StartJobByNoWaitType::BMS__StartJobByNoWaitType()
{
}

BMS__StartJobByNoWaitType::~BMS__StartJobByNoWaitType()
{
}

BMS__StartJobType *BMS__StartJobByNoWaitType::_kd_clone() const
{
    return new BMS__StartJobByNoWaitType(*this);
}


KDSoapValue __SubjectType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("subjectType"));
    return mainValue;
}

void __SubjectType::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__SubjectType::__SubjectType()
{
}

__SubjectType::~__SubjectType()
{
}


KDSoapValue __Temporal::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("temporal"));
    return mainValue;
}

void __Temporal::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__Temporal::__Temporal()
{
}

__Temporal::~__Temporal()
{
}


class BMS__BMEssenceLocatorType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__StorageType mStorageType;
    bool mStorageType_nil;
    QString mLocatorInfo;
    bool mLocatorInfo_nil;
    BMS__ContainerMimeType mContainerMimeType;
    bool mContainerMimeType_nil;
};

BMS__BMEssenceLocatorType::PrivateDPtr::PrivateDPtr()
    : mStorageType_nil(true), mLocatorInfo_nil(true), mContainerMimeType_nil(true)
{
}


void BMS__BMEssenceLocatorType::setStorageType( const BMS__StorageType& storageType )
{
    d_ptr->mStorageType_nil = false;// converter_complextype.cpp:244
    d_ptr->mStorageType = storageType;
}

BMS__StorageType BMS__BMEssenceLocatorType::storageType() const
{
    return d_ptr->mStorageType;
}

void BMS__BMEssenceLocatorType::setLocatorInfo( const QString& locatorInfo )
{
    d_ptr->mLocatorInfo_nil = false;// converter_complextype.cpp:244
    d_ptr->mLocatorInfo = locatorInfo;
}

QString BMS__BMEssenceLocatorType::locatorInfo() const
{
    return d_ptr->mLocatorInfo;
}

void BMS__BMEssenceLocatorType::setContainerMimeType( const BMS__ContainerMimeType& containerMimeType )
{
    d_ptr->mContainerMimeType_nil = false;// converter_complextype.cpp:244
    d_ptr->mContainerMimeType = containerMimeType;
}

BMS__ContainerMimeType BMS__BMEssenceLocatorType::containerMimeType() const
{
    return d_ptr->mContainerMimeType;
}

KDSoapValue BMS__BMEssenceLocatorType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMEssenceLocatorType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mStorageType_nil) {
        KDSoapValue _valueStorageType(d_ptr->mStorageType.serialize(QString::fromLatin1("storageType")));// elementargumentserializer.cpp:91
        _valueStorageType.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueStorageType.setQualified(true);
        if (!_valueStorageType.isNil())
        args.append(_valueStorageType);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mLocatorInfo_nil) {
        KDSoapValue _valueLocatorInfo(QString::fromLatin1("locatorInfo"), QVariant::fromValue(d_ptr->mLocatorInfo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueLocatorInfo.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueLocatorInfo.setQualified(true);
        if (!_valueLocatorInfo.isNil())
        args.append(_valueLocatorInfo);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mContainerMimeType_nil) {
        KDSoapValue _valueContainerMimeType(d_ptr->mContainerMimeType.serialize(QString::fromLatin1("containerMimeType")));// elementargumentserializer.cpp:91
        _valueContainerMimeType.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueContainerMimeType.setQualified(true);
        if (!_valueContainerMimeType.isNil())
        args.append(_valueContainerMimeType);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__BMEssenceLocatorType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("storageType")) {// converter_complextype.cpp:273
            d_ptr->mStorageType.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("locatorInfo")) {// converter_complextype.cpp:273
            d_ptr->mLocatorInfo = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mLocatorInfo_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("containerMimeType")) {// converter_complextype.cpp:273
            d_ptr->mContainerMimeType.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__BMEssenceLocatorType::BMS__BMEssenceLocatorType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMEssenceLocatorType::~BMS__BMEssenceLocatorType()
{
}

BMS__ResourceReferenceType *BMS__BMEssenceLocatorType::_kd_clone() const
{
    return new BMS__BMEssenceLocatorType(*this);
}

BMS__BMEssenceLocatorType::BMS__BMEssenceLocatorType( const BMS__BMEssenceLocatorType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__BMEssenceLocatorType&  BMS__BMEssenceLocatorType::operator=( const BMS__BMEssenceLocatorType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


KDSoapValue __DescriptionType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = __TextElementType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://description.fims.tv"), QString::fromLatin1("descriptionType"));
    return mainValue;
}

void __DescriptionType::deserialize( const KDSoapValue& mainValue )
{
    __TextElementType::deserialize(mainValue);
    Q_UNUSED(mainValue);// converter_complextype.cpp:420
}

__DescriptionType::__DescriptionType()
{
}

__DescriptionType::~__DescriptionType()
{
}


TransformMediaService::TransformMediaBindingJobs::TransformJob::TransformJob( TransformMediaService::TransformMediaBinding* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mIn(), mResultAck()
{
}

void TransformMediaService::TransformMediaBindingJobs::TransformJob::setIn( const TFMS__TransformRequestType& arg0 )
{
    mIn = arg0;
}

TFMS__TransformRequestType TransformMediaService::TransformMediaBindingJobs::TransformJob::in() const
{
    return mIn;
}

void TransformMediaService::TransformMediaBindingJobs::TransformJob::doStart()
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/transform");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueTransformRequest(mIn.serialize(QString::fromLatin1("transformRequest")));// elementargumentserializer.cpp:91
    _valueTransformRequest.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformRequest.setQualified(true);
    message = _valueTransformRequest;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("transform"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TFMS__TransformResponseType TransformMediaService::TransformMediaBindingJobs::TransformJob::ack() const
{
    return mResultAck;
}

void TransformMediaService::TransformMediaBindingJobs::TransformJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:374
        mResultAck.deserialize(reply);// converter_clientstub.cpp:531
    }
    emitFinished(reply, watcher->returnHeaders());
}


TransformMediaService::TransformMediaStatusBindingJobs::ManageJobJob::ManageJobJob( TransformMediaService::TransformMediaStatusBinding* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mIn(), mResultOut()
{
}

void TransformMediaService::TransformMediaStatusBindingJobs::ManageJobJob::setIn( const BMS__ManageJobRequestType& arg0 )
{
    mIn = arg0;
}

BMS__ManageJobRequestType TransformMediaService::TransformMediaStatusBindingJobs::ManageJobJob::in() const
{
    return mIn;
}

void TransformMediaService::TransformMediaStatusBindingJobs::ManageJobJob::doStart()
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/manageJob");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueManageJobRequest(mIn.serialize(QString::fromLatin1("manageJobRequest")));// elementargumentserializer.cpp:91
    _valueManageJobRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueManageJobRequest.setQualified(true);
    message = _valueManageJobRequest;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("manageJob"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

BMS__ManageJobResponseType TransformMediaService::TransformMediaStatusBindingJobs::ManageJobJob::out() const
{
    return mResultOut;
}

void TransformMediaService::TransformMediaStatusBindingJobs::ManageJobJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:374
        mResultOut.deserialize(reply);// converter_clientstub.cpp:531
    }
    emitFinished(reply, watcher->returnHeaders());
}


TransformMediaService::TransformMediaStatusBindingJobs::ManageQueueJob::ManageQueueJob( TransformMediaService::TransformMediaStatusBinding* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mIn(), mResultOut()
{
}

void TransformMediaService::TransformMediaStatusBindingJobs::ManageQueueJob::setIn( const BMS__ManageQueueRequestType& arg0 )
{
    mIn = arg0;
}

BMS__ManageQueueRequestType TransformMediaService::TransformMediaStatusBindingJobs::ManageQueueJob::in() const
{
    return mIn;
}

void TransformMediaService::TransformMediaStatusBindingJobs::ManageQueueJob::doStart()
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/manageQueue");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueManageQueueRequest(mIn.serialize(QString::fromLatin1("manageQueueRequest")));// elementargumentserializer.cpp:91
    _valueManageQueueRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueManageQueueRequest.setQualified(true);
    message = _valueManageQueueRequest;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("manageQueue"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

BMS__ManageQueueResponseType TransformMediaService::TransformMediaStatusBindingJobs::ManageQueueJob::out() const
{
    return mResultOut;
}

void TransformMediaService::TransformMediaStatusBindingJobs::ManageQueueJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:374
        mResultOut.deserialize(reply);// converter_clientstub.cpp:531
    }
    emitFinished(reply, watcher->returnHeaders());
}


TransformMediaService::TransformMediaStatusBindingJobs::QueryJobJob::QueryJobJob( TransformMediaService::TransformMediaStatusBinding* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mIn(), mResultOut()
{
}

void TransformMediaService::TransformMediaStatusBindingJobs::QueryJobJob::setIn( const BMS__QueryJobRequestType& arg0 )
{
    mIn = arg0;
}

BMS__QueryJobRequestType TransformMediaService::TransformMediaStatusBindingJobs::QueryJobJob::in() const
{
    return mIn;
}

void TransformMediaService::TransformMediaStatusBindingJobs::QueryJobJob::doStart()
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/queryJob");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueQueryJobRequest(mIn.serialize(QString::fromLatin1("queryJobRequest")));// elementargumentserializer.cpp:91
    _valueQueryJobRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueQueryJobRequest.setQualified(true);
    message = _valueQueryJobRequest;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("queryJob"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

BMS__QueryJobResponseType TransformMediaService::TransformMediaStatusBindingJobs::QueryJobJob::out() const
{
    return mResultOut;
}

void TransformMediaService::TransformMediaStatusBindingJobs::QueryJobJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:374
        mResultOut.deserialize(reply);// converter_clientstub.cpp:531
    }
    emitFinished(reply, watcher->returnHeaders());
}


class BMS__QueueType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__QueueStatusType mStatus;
    bool mStatus_nil;
    QString mStatusDescription;
    bool mStatusDescription_nil;
    quint64 mLength;
    bool mLength_nil;
    bool mAvailability;
    bool mAvailability_nil;
    QString mEstimatedTotalCompletionDuration;
    bool mEstimatedTotalCompletionDuration_nil;
    BMS__JobsType mJobs;
    bool mJobs_nil;
};

BMS__QueueType::PrivateDPtr::PrivateDPtr()
    : mStatus_nil(true), mStatusDescription_nil(true), mLength(0), mLength_nil(true), mAvailability(false), mAvailability_nil(true), mEstimatedTotalCompletionDuration_nil(true), mJobs_nil(true)
{
}


void BMS__QueueType::setStatus( const BMS__QueueStatusType& status )
{
    d_ptr->mStatus_nil = false;// converter_complextype.cpp:244
    d_ptr->mStatus = status;
}

BMS__QueueStatusType BMS__QueueType::status() const
{
    return d_ptr->mStatus;
}

void BMS__QueueType::setStatusDescription( const QString& statusDescription )
{
    d_ptr->mStatusDescription_nil = false;// converter_complextype.cpp:244
    d_ptr->mStatusDescription = statusDescription;
}

QString BMS__QueueType::statusDescription() const
{
    return d_ptr->mStatusDescription;
}

void BMS__QueueType::setLength( quint64 length )
{
    d_ptr->mLength_nil = false;// converter_complextype.cpp:244
    d_ptr->mLength = length;
}

quint64 BMS__QueueType::length() const
{
    return d_ptr->mLength;
}

void BMS__QueueType::setAvailability( bool availability )
{
    d_ptr->mAvailability_nil = false;// converter_complextype.cpp:244
    d_ptr->mAvailability = availability;
}

bool BMS__QueueType::availability() const
{
    return d_ptr->mAvailability;
}

void BMS__QueueType::setEstimatedTotalCompletionDuration( const QString& estimatedTotalCompletionDuration )
{
    d_ptr->mEstimatedTotalCompletionDuration_nil = false;// converter_complextype.cpp:244
    d_ptr->mEstimatedTotalCompletionDuration = estimatedTotalCompletionDuration;
}

QString BMS__QueueType::estimatedTotalCompletionDuration() const
{
    return d_ptr->mEstimatedTotalCompletionDuration;
}

void BMS__QueueType::setJobs( const BMS__JobsType& jobs )
{
    d_ptr->mJobs_nil = false;// converter_complextype.cpp:244
    d_ptr->mJobs = jobs;
}

BMS__JobsType BMS__QueueType::jobs() const
{
    return d_ptr->mJobs;
}

KDSoapValue BMS__QueueType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("QueueType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mStatus_nil) {
        KDSoapValue _valueStatus(QString::fromLatin1("status"), d_ptr->mStatus.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("QueueStatusType"));// elementargumentserializer.cpp:99
        _valueStatus.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueStatus.setQualified(true);
        if (!_valueStatus.isNil())
        args.append(_valueStatus);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mStatusDescription_nil) {
        KDSoapValue _valueStatusDescription(QString::fromLatin1("statusDescription"), QVariant::fromValue(d_ptr->mStatusDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueStatusDescription.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueStatusDescription.setQualified(true);
        if (!_valueStatusDescription.isNil())
        args.append(_valueStatusDescription);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mLength_nil) {
        KDSoapValue _valueLength(QString::fromLatin1("length"), QVariant::fromValue(d_ptr->mLength), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueLength.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueLength.setQualified(true);
        if (!_valueLength.isNil())
        args.append(_valueLength);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAvailability_nil) {
        KDSoapValue _valueAvailability(QString::fromLatin1("availability"), QVariant::fromValue(d_ptr->mAvailability), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:97
        _valueAvailability.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueAvailability.setQualified(true);
        if (!_valueAvailability.isNil())
        args.append(_valueAvailability);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mEstimatedTotalCompletionDuration_nil) {
        KDSoapValue _valueEstimatedTotalCompletionDuration(QString::fromLatin1("estimatedTotalCompletionDuration"), QVariant::fromValue(d_ptr->mEstimatedTotalCompletionDuration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("duration"));// elementargumentserializer.cpp:97
        _valueEstimatedTotalCompletionDuration.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueEstimatedTotalCompletionDuration.setQualified(true);
        if (!_valueEstimatedTotalCompletionDuration.isNil())
        args.append(_valueEstimatedTotalCompletionDuration);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mJobs_nil) {
        KDSoapValue _valueJobs(d_ptr->mJobs.serialize(QString::fromLatin1("jobs")));// elementargumentserializer.cpp:91
        _valueJobs.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueJobs.setQualified(true);
        if (!_valueJobs.isNil())
        args.append(_valueJobs);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__QueueType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("status")) {// converter_complextype.cpp:273
            d_ptr->mStatus.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mStatus_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("statusDescription")) {// converter_complextype.cpp:273
            d_ptr->mStatusDescription = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mStatusDescription_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("length")) {// converter_complextype.cpp:273
            d_ptr->mLength = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mLength_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("availability")) {// converter_complextype.cpp:273
            d_ptr->mAvailability = val.value().value<bool>();// converter_complextype.cpp:286
            d_ptr->mAvailability_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("estimatedTotalCompletionDuration")) {// converter_complextype.cpp:273
            d_ptr->mEstimatedTotalCompletionDuration = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mEstimatedTotalCompletionDuration_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("jobs")) {// converter_complextype.cpp:273
            d_ptr->mJobs.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__QueueType::BMS__QueueType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__QueueType::~BMS__QueueType()
{
}

BMS__ResourceReferenceType *BMS__QueueType::_kd_clone() const
{
    return new BMS__QueueType(*this);
}

BMS__QueueType::BMS__QueueType( const BMS__QueueType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__QueueType&  BMS__QueueType::operator=( const BMS__QueueType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


class BMS__BMContentType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__BMContentFormatsType mBmContentFormats;
    bool mBmContentFormats_nil;
    BMS__DescriptionsType mDescriptions;
    bool mDescriptions_nil;
};

BMS__BMContentType::PrivateDPtr::PrivateDPtr()
    : mBmContentFormats_nil(true), mDescriptions_nil(true)
{
}


void BMS__BMContentType::setBmContentFormats( const BMS__BMContentFormatsType& bmContentFormats )
{
    d_ptr->mBmContentFormats_nil = false;// converter_complextype.cpp:244
    d_ptr->mBmContentFormats = bmContentFormats;
}

BMS__BMContentFormatsType BMS__BMContentType::bmContentFormats() const
{
    return d_ptr->mBmContentFormats;
}

void BMS__BMContentType::setDescriptions( const BMS__DescriptionsType& descriptions )
{
    d_ptr->mDescriptions_nil = false;// converter_complextype.cpp:244
    d_ptr->mDescriptions = descriptions;
}

BMS__DescriptionsType BMS__BMContentType::descriptions() const
{
    return d_ptr->mDescriptions;
}

KDSoapValue BMS__BMContentType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BMContentType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mBmContentFormats_nil) {
        KDSoapValue _valueBmContentFormats(d_ptr->mBmContentFormats.serialize(QString::fromLatin1("bmContentFormats")));// elementargumentserializer.cpp:91
        _valueBmContentFormats.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBmContentFormats.setQualified(true);
        if (!_valueBmContentFormats.isNil())
        args.append(_valueBmContentFormats);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mDescriptions_nil) {
        KDSoapValue _valueDescriptions(d_ptr->mDescriptions.serialize(QString::fromLatin1("descriptions")));// elementargumentserializer.cpp:91
        _valueDescriptions.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDescriptions.setQualified(true);
        if (!_valueDescriptions.isNil())
        args.append(_valueDescriptions);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__BMContentType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("bmContentFormats")) {// converter_complextype.cpp:273
            d_ptr->mBmContentFormats.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("descriptions")) {// converter_complextype.cpp:273
            d_ptr->mDescriptions.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__BMContentType::BMS__BMContentType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__BMContentType::~BMS__BMContentType()
{
}

BMS__ResourceReferenceType *BMS__BMContentType::_kd_clone() const
{
    return new BMS__BMContentType(*this);
}

BMS__BMContentType::BMS__BMContentType( const BMS__BMContentType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__BMContentType&  BMS__BMContentType::operator=( const BMS__BMContentType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


class BMS__DataFormatType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< BMS__CaptioningFormatType > mCaptioningFormat;
    bool mCaptioningFormat_nil;
    QList< BMS__AncillaryDataFormatType > mAncillaryDataFormat;
    bool mAncillaryDataFormat_nil;
};

BMS__DataFormatType::PrivateDPtr::PrivateDPtr()
    : mCaptioningFormat_nil(true), mAncillaryDataFormat_nil(true)
{
}


void BMS__DataFormatType::setCaptioningFormat( const QList< BMS__CaptioningFormatType >& captioningFormat )
{
    d_ptr->mCaptioningFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mCaptioningFormat = captioningFormat;
}

QList< BMS__CaptioningFormatType > BMS__DataFormatType::captioningFormat() const
{
    return d_ptr->mCaptioningFormat;
}

void BMS__DataFormatType::setAncillaryDataFormat( const QList< BMS__AncillaryDataFormatType >& ancillaryDataFormat )
{
    d_ptr->mAncillaryDataFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mAncillaryDataFormat = ancillaryDataFormat;
}

QList< BMS__AncillaryDataFormatType > BMS__DataFormatType::ancillaryDataFormat() const
{
    return d_ptr->mAncillaryDataFormat;
}

KDSoapValue BMS__DataFormatType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__FormatType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("DataFormatType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mCaptioningFormat.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueCaptioningFormat(d_ptr->mCaptioningFormat.at(i).serialize(QString::fromLatin1("captioningFormat")));// elementargumentserializer.cpp:91
        _valueCaptioningFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueCaptioningFormat.setQualified(true);
        args.append(_valueCaptioningFormat);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mAncillaryDataFormat.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueAncillaryDataFormat(d_ptr->mAncillaryDataFormat.at(i).serialize(QString::fromLatin1("ancillaryDataFormat")));// elementargumentserializer.cpp:91
        _valueAncillaryDataFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueAncillaryDataFormat.setQualified(true);
        args.append(_valueAncillaryDataFormat);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__DataFormatType::deserialize( const KDSoapValue& mainValue )
{
    BMS__FormatType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("captioningFormat")) {// converter_complextype.cpp:273
            BMS__CaptioningFormatType mCaptioningFormatTemp;// converter_complextype.cpp:331
            mCaptioningFormatTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mCaptioningFormat.append(mCaptioningFormatTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("ancillaryDataFormat")) {// converter_complextype.cpp:273
            BMS__AncillaryDataFormatType mAncillaryDataFormatTemp;// converter_complextype.cpp:331
            mAncillaryDataFormatTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mAncillaryDataFormat.append(mAncillaryDataFormatTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__DataFormatType::BMS__DataFormatType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__DataFormatType::~BMS__DataFormatType()
{
}

BMS__ResourceReferenceType *BMS__DataFormatType::_kd_clone() const
{
    return new BMS__DataFormatType(*this);
}

BMS__DataFormatType::BMS__DataFormatType( const BMS__DataFormatType& other )
    : BMS__FormatType( other ), d_ptr( other.d_ptr )
{
}

BMS__DataFormatType&  BMS__DataFormatType::operator=( const BMS__DataFormatType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__FormatType *>(this) = other;

    return *this;
}


class BMS__ProfileType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__ServiceType mService;
    bool mService_nil;
    QString mName;
    bool mName_nil;
    QString mDescription;
    bool mDescription_nil;
};

BMS__ProfileType::PrivateDPtr::PrivateDPtr()
    : mService_nil(true), mName_nil(true), mDescription_nil(true)
{
}


void BMS__ProfileType::setService( const BMS__ServiceType& service )
{
    d_ptr->mService_nil = false;// converter_complextype.cpp:244
    d_ptr->mService = service;
}

BMS__ServiceType BMS__ProfileType::service() const
{
    return d_ptr->mService;
}

void BMS__ProfileType::setName( const QString& name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:244
    d_ptr->mName = name;
}

QString BMS__ProfileType::name() const
{
    return d_ptr->mName;
}

void BMS__ProfileType::setDescription( const QString& description )
{
    d_ptr->mDescription_nil = false;// converter_complextype.cpp:244
    d_ptr->mDescription = description;
}

QString BMS__ProfileType::description() const
{
    return d_ptr->mDescription;
}

KDSoapValue BMS__ProfileType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ProfileType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mService_nil) {
        KDSoapValue _valueService(d_ptr->mService.serialize(QString::fromLatin1("service")));// elementargumentserializer.cpp:91
        _valueService.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueService.setQualified(true);
        if (!_valueService.isNil())
        args.append(_valueService);// elementargumentserializer.cpp:111
    }
    KDSoapValueList attribs;
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueName.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        if (!_valueName.isNil())
        attribs.append(_valueName);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        if (!_valueDescription.isNil())
        attribs.append(_valueDescription);// elementargumentserializer.cpp:111
    }
    mainValue.childValues().attributes() += attribs;// converter_complextype.cpp:544
    return mainValue;
}

void BMS__ProfileType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("service")) {// converter_complextype.cpp:273
            d_ptr->mService.deserialize(val);// converter_complextype.cpp:290
        }
    }
    const QList<KDSoapValue> attribs = args.attributes();
    for (int attrNr = 0; attrNr < attribs.count(); ++attrNr) {
        const KDSoapValue& val = attribs.at(attrNr);
        const QString name = val.name();
        if (name == QLatin1String("name")) {// converter_complextype.cpp:273
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mName_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("description")) {// converter_complextype.cpp:273
            d_ptr->mDescription = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mDescription_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__ProfileType::BMS__ProfileType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ProfileType::~BMS__ProfileType()
{
}

BMS__ResourceReferenceType *BMS__ProfileType::_kd_clone() const
{
    return new BMS__ProfileType(*this);
}

BMS__ProfileType::BMS__ProfileType( const BMS__ProfileType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__ProfileType&  BMS__ProfileType::operator=( const BMS__ProfileType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


class BMS__ServiceType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mProviderName;
    bool mProviderName_nil;
    QString mProviderEndPoint;
    bool mProviderEndPoint_nil;
    BMS__ServiceDescription mServiceDescription;
    bool mServiceDescription_nil;
};

BMS__ServiceType::PrivateDPtr::PrivateDPtr()
    : mProviderName_nil(true), mProviderEndPoint_nil(true), mServiceDescription_nil(true)
{
}


void BMS__ServiceType::setProviderName( const QString& providerName )
{
    d_ptr->mProviderName_nil = false;// converter_complextype.cpp:244
    d_ptr->mProviderName = providerName;
}

QString BMS__ServiceType::providerName() const
{
    return d_ptr->mProviderName;
}

void BMS__ServiceType::setProviderEndPoint( const QString& providerEndPoint )
{
    d_ptr->mProviderEndPoint_nil = false;// converter_complextype.cpp:244
    d_ptr->mProviderEndPoint = providerEndPoint;
}

QString BMS__ServiceType::providerEndPoint() const
{
    return d_ptr->mProviderEndPoint;
}

void BMS__ServiceType::setServiceDescription( const BMS__ServiceDescription& serviceDescription )
{
    d_ptr->mServiceDescription_nil = false;// converter_complextype.cpp:244
    d_ptr->mServiceDescription = serviceDescription;
}

BMS__ServiceDescription BMS__ServiceType::serviceDescription() const
{
    return d_ptr->mServiceDescription;
}

KDSoapValue BMS__ServiceType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ResourceType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ServiceType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mProviderName_nil) {
        KDSoapValue _valueProviderName(QString::fromLatin1("providerName"), QVariant::fromValue(d_ptr->mProviderName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueProviderName.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueProviderName.setQualified(true);
        if (!_valueProviderName.isNil())
        args.append(_valueProviderName);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mProviderEndPoint_nil) {
        KDSoapValue _valueProviderEndPoint(QString::fromLatin1("providerEndPoint"), QVariant::fromValue(d_ptr->mProviderEndPoint), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueProviderEndPoint.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueProviderEndPoint.setQualified(true);
        if (!_valueProviderEndPoint.isNil())
        args.append(_valueProviderEndPoint);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mServiceDescription_nil) {
        KDSoapValue _valueServiceDescription(d_ptr->mServiceDescription.serialize(QString::fromLatin1("serviceDescription")));// elementargumentserializer.cpp:91
        _valueServiceDescription.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueServiceDescription.setQualified(true);
        if (!_valueServiceDescription.isNil())
        args.append(_valueServiceDescription);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ServiceType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ResourceType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("providerName")) {// converter_complextype.cpp:273
            d_ptr->mProviderName = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mProviderName_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("providerEndPoint")) {// converter_complextype.cpp:273
            d_ptr->mProviderEndPoint = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mProviderEndPoint_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("serviceDescription")) {// converter_complextype.cpp:273
            d_ptr->mServiceDescription.deserialize(val);// converter_complextype.cpp:290
        }
    }
}

BMS__ServiceType::BMS__ServiceType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ServiceType::~BMS__ServiceType()
{
}

BMS__ResourceReferenceType *BMS__ServiceType::_kd_clone() const
{
    return new BMS__ServiceType(*this);
}

BMS__ServiceType::BMS__ServiceType( const BMS__ServiceType& other )
    : BMS__ResourceType( other ), d_ptr( other.d_ptr )
{
}

BMS__ServiceType&  BMS__ServiceType::operator=( const BMS__ServiceType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ResourceType *>(this) = other;

    return *this;
}


class BMS__VideoFormatType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__LengthType mDisplayWidth;
    bool mDisplayWidth_nil;
    BMS__LengthType mDisplayHeight;
    bool mDisplayHeight_nil;
    BMS__RationalType mFrameRate;
    bool mFrameRate_nil;
    BMS__RationalType mAspectRatio;
    bool mAspectRatio_nil;
    BMS__CodecType mVideoEncoding;
    bool mVideoEncoding_nil;
    QList< BMS__BMTrackType > mVideoTrack;
    bool mVideoTrack_nil;
    quint64 mBitRate;
    bool mBitRate_nil;
    BMS__BitRateModeType mBitRateMode;
    bool mBitRateMode_nil;
    quint64 mLines;
    bool mLines_nil;
    BMS__ScanningFormatType mScanningFormat;
    bool mScanningFormat_nil;
    BMS__ScanningOrderType mScanningOrder;
    bool mScanningOrder_nil;
    bool mNoiseFilter;
    bool mNoiseFilter_nil;
};

BMS__VideoFormatType::PrivateDPtr::PrivateDPtr()
    : mDisplayWidth_nil(true), mDisplayHeight_nil(true), mFrameRate_nil(true), mAspectRatio_nil(true), mVideoEncoding_nil(true), mVideoTrack_nil(true), mBitRate(0), mBitRate_nil(true), mBitRateMode_nil(true), mLines(0), mLines_nil(true), mScanningFormat_nil(true), mScanningOrder_nil(true), mNoiseFilter(false), mNoiseFilter_nil(true)
{
}


void BMS__VideoFormatType::setDisplayWidth( const BMS__LengthType& displayWidth )
{
    d_ptr->mDisplayWidth_nil = false;// converter_complextype.cpp:244
    d_ptr->mDisplayWidth = displayWidth;
}

BMS__LengthType BMS__VideoFormatType::displayWidth() const
{
    return d_ptr->mDisplayWidth;
}

void BMS__VideoFormatType::setDisplayHeight( const BMS__LengthType& displayHeight )
{
    d_ptr->mDisplayHeight_nil = false;// converter_complextype.cpp:244
    d_ptr->mDisplayHeight = displayHeight;
}

BMS__LengthType BMS__VideoFormatType::displayHeight() const
{
    return d_ptr->mDisplayHeight;
}

void BMS__VideoFormatType::setFrameRate( const BMS__RationalType& frameRate )
{
    d_ptr->mFrameRate_nil = false;// converter_complextype.cpp:244
    d_ptr->mFrameRate = frameRate;
}

BMS__RationalType BMS__VideoFormatType::frameRate() const
{
    return d_ptr->mFrameRate;
}

void BMS__VideoFormatType::setAspectRatio( const BMS__RationalType& aspectRatio )
{
    d_ptr->mAspectRatio_nil = false;// converter_complextype.cpp:244
    d_ptr->mAspectRatio = aspectRatio;
}

BMS__RationalType BMS__VideoFormatType::aspectRatio() const
{
    return d_ptr->mAspectRatio;
}

void BMS__VideoFormatType::setVideoEncoding( const BMS__CodecType& videoEncoding )
{
    d_ptr->mVideoEncoding_nil = false;// converter_complextype.cpp:244
    d_ptr->mVideoEncoding = videoEncoding;
}

BMS__CodecType BMS__VideoFormatType::videoEncoding() const
{
    return d_ptr->mVideoEncoding;
}

void BMS__VideoFormatType::setVideoTrack( const QList< BMS__BMTrackType >& videoTrack )
{
    d_ptr->mVideoTrack_nil = false;// converter_complextype.cpp:244
    d_ptr->mVideoTrack = videoTrack;
}

QList< BMS__BMTrackType > BMS__VideoFormatType::videoTrack() const
{
    return d_ptr->mVideoTrack;
}

void BMS__VideoFormatType::setBitRate( quint64 bitRate )
{
    d_ptr->mBitRate_nil = false;// converter_complextype.cpp:244
    d_ptr->mBitRate = bitRate;
}

quint64 BMS__VideoFormatType::bitRate() const
{
    return d_ptr->mBitRate;
}

void BMS__VideoFormatType::setBitRateMode( const BMS__BitRateModeType& bitRateMode )
{
    d_ptr->mBitRateMode_nil = false;// converter_complextype.cpp:244
    d_ptr->mBitRateMode = bitRateMode;
}

BMS__BitRateModeType BMS__VideoFormatType::bitRateMode() const
{
    return d_ptr->mBitRateMode;
}

void BMS__VideoFormatType::setLines( quint64 lines )
{
    d_ptr->mLines_nil = false;// converter_complextype.cpp:244
    d_ptr->mLines = lines;
}

quint64 BMS__VideoFormatType::lines() const
{
    return d_ptr->mLines;
}

void BMS__VideoFormatType::setScanningFormat( const BMS__ScanningFormatType& scanningFormat )
{
    d_ptr->mScanningFormat_nil = false;// converter_complextype.cpp:244
    d_ptr->mScanningFormat = scanningFormat;
}

BMS__ScanningFormatType BMS__VideoFormatType::scanningFormat() const
{
    return d_ptr->mScanningFormat;
}

void BMS__VideoFormatType::setScanningOrder( const BMS__ScanningOrderType& scanningOrder )
{
    d_ptr->mScanningOrder_nil = false;// converter_complextype.cpp:244
    d_ptr->mScanningOrder = scanningOrder;
}

BMS__ScanningOrderType BMS__VideoFormatType::scanningOrder() const
{
    return d_ptr->mScanningOrder;
}

void BMS__VideoFormatType::setNoiseFilter( bool noiseFilter )
{
    d_ptr->mNoiseFilter_nil = false;// converter_complextype.cpp:244
    d_ptr->mNoiseFilter = noiseFilter;
}

bool BMS__VideoFormatType::noiseFilter() const
{
    return d_ptr->mNoiseFilter;
}

KDSoapValue BMS__VideoFormatType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__FormatType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("VideoFormatType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mDisplayWidth_nil) {
        KDSoapValue _valueDisplayWidth(d_ptr->mDisplayWidth.serialize(QString::fromLatin1("displayWidth")));// elementargumentserializer.cpp:91
        _valueDisplayWidth.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDisplayWidth.setQualified(true);
        if (!_valueDisplayWidth.isNil())
        args.append(_valueDisplayWidth);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mDisplayHeight_nil) {
        KDSoapValue _valueDisplayHeight(d_ptr->mDisplayHeight.serialize(QString::fromLatin1("displayHeight")));// elementargumentserializer.cpp:91
        _valueDisplayHeight.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueDisplayHeight.setQualified(true);
        if (!_valueDisplayHeight.isNil())
        args.append(_valueDisplayHeight);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mFrameRate_nil) {
        KDSoapValue _valueFrameRate(d_ptr->mFrameRate.serialize(QString::fromLatin1("frameRate")));// elementargumentserializer.cpp:91
        _valueFrameRate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueFrameRate.setQualified(true);
        if (!_valueFrameRate.isNil())
        args.append(_valueFrameRate);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mAspectRatio_nil) {
        KDSoapValue _valueAspectRatio(d_ptr->mAspectRatio.serialize(QString::fromLatin1("aspectRatio")));// elementargumentserializer.cpp:91
        _valueAspectRatio.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueAspectRatio.setQualified(true);
        if (!_valueAspectRatio.isNil())
        args.append(_valueAspectRatio);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mVideoEncoding_nil) {
        KDSoapValue _valueVideoEncoding(d_ptr->mVideoEncoding.serialize(QString::fromLatin1("videoEncoding")));// elementargumentserializer.cpp:91
        _valueVideoEncoding.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueVideoEncoding.setQualified(true);
        if (!_valueVideoEncoding.isNil())
        args.append(_valueVideoEncoding);// elementargumentserializer.cpp:111
    }
    for (int i = 0; i < d_ptr->mVideoTrack.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueVideoTrack(d_ptr->mVideoTrack.at(i).serialize(QString::fromLatin1("videoTrack")));// elementargumentserializer.cpp:91
        _valueVideoTrack.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueVideoTrack.setQualified(true);
        args.append(_valueVideoTrack);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mBitRate_nil) {
        KDSoapValue _valueBitRate(QString::fromLatin1("bitRate"), QVariant::fromValue(d_ptr->mBitRate), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueBitRate.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBitRate.setQualified(true);
        if (!_valueBitRate.isNil())
        args.append(_valueBitRate);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mBitRateMode_nil) {
        KDSoapValue _valueBitRateMode(QString::fromLatin1("bitRateMode"), d_ptr->mBitRateMode.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("BitRateModeType"));// elementargumentserializer.cpp:99
        _valueBitRateMode.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueBitRateMode.setQualified(true);
        if (!_valueBitRateMode.isNil())
        args.append(_valueBitRateMode);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mLines_nil) {
        KDSoapValue _valueLines(QString::fromLatin1("lines"), QVariant::fromValue(d_ptr->mLines), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("nonNegativeInteger"));// elementargumentserializer.cpp:97
        _valueLines.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueLines.setQualified(true);
        if (!_valueLines.isNil())
        args.append(_valueLines);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mScanningFormat_nil) {
        KDSoapValue _valueScanningFormat(QString::fromLatin1("scanningFormat"), d_ptr->mScanningFormat.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ScanningFormatType"));// elementargumentserializer.cpp:99
        _valueScanningFormat.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueScanningFormat.setQualified(true);
        if (!_valueScanningFormat.isNil())
        args.append(_valueScanningFormat);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mScanningOrder_nil) {
        KDSoapValue _valueScanningOrder(QString::fromLatin1("scanningOrder"), d_ptr->mScanningOrder.serialize(), QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ScanningOrderType"));// elementargumentserializer.cpp:99
        _valueScanningOrder.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueScanningOrder.setQualified(true);
        if (!_valueScanningOrder.isNil())
        args.append(_valueScanningOrder);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mNoiseFilter_nil) {
        KDSoapValue _valueNoiseFilter(QString::fromLatin1("noiseFilter"), QVariant::fromValue(d_ptr->mNoiseFilter), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:97
        _valueNoiseFilter.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueNoiseFilter.setQualified(true);
        if (!_valueNoiseFilter.isNil())
        args.append(_valueNoiseFilter);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__VideoFormatType::deserialize( const KDSoapValue& mainValue )
{
    BMS__FormatType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("displayWidth")) {// converter_complextype.cpp:273
            d_ptr->mDisplayWidth.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("displayHeight")) {// converter_complextype.cpp:273
            d_ptr->mDisplayHeight.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("frameRate")) {// converter_complextype.cpp:273
            d_ptr->mFrameRate.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("aspectRatio")) {// converter_complextype.cpp:273
            d_ptr->mAspectRatio.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("videoEncoding")) {// converter_complextype.cpp:273
            d_ptr->mVideoEncoding.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("videoTrack")) {// converter_complextype.cpp:273
            BMS__BMTrackType mVideoTrackTemp;// converter_complextype.cpp:331
            mVideoTrackTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mVideoTrack.append(mVideoTrackTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("bitRate")) {// converter_complextype.cpp:273
            d_ptr->mBitRate = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mBitRate_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("bitRateMode")) {// converter_complextype.cpp:273
            d_ptr->mBitRateMode.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mBitRateMode_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("lines")) {// converter_complextype.cpp:273
            d_ptr->mLines = val.value().value<quint64>();// converter_complextype.cpp:286
            d_ptr->mLines_nil = false;// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("scanningFormat")) {// converter_complextype.cpp:273
            d_ptr->mScanningFormat.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mScanningFormat_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("scanningOrder")) {// converter_complextype.cpp:273
            d_ptr->mScanningOrder.deserialize(val.value());// converter_complextype.cpp:292
            d_ptr->mScanningOrder_nil = false;// converter_complextype.cpp:294
        }
        else if (name == QLatin1String("noiseFilter")) {// converter_complextype.cpp:273
            d_ptr->mNoiseFilter = val.value().value<bool>();// converter_complextype.cpp:286
            d_ptr->mNoiseFilter_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__VideoFormatType::BMS__VideoFormatType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__VideoFormatType::~BMS__VideoFormatType()
{
}

BMS__ResourceReferenceType *BMS__VideoFormatType::_kd_clone() const
{
    return new BMS__VideoFormatType(*this);
}

BMS__VideoFormatType::BMS__VideoFormatType( const BMS__VideoFormatType& other )
    : BMS__FormatType( other ), d_ptr( other.d_ptr )
{
}

BMS__VideoFormatType&  BMS__VideoFormatType::operator=( const BMS__VideoFormatType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__FormatType *>(this) = other;

    return *this;
}


class BMS__SimpleFileLocatorType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mFile;
    bool mFile_nil;
};

BMS__SimpleFileLocatorType::PrivateDPtr::PrivateDPtr()
    : mFile_nil(true)
{
}


void BMS__SimpleFileLocatorType::setFile( const QString& file )
{
    d_ptr->mFile_nil = false;// converter_complextype.cpp:244
    d_ptr->mFile = file;
}

QString BMS__SimpleFileLocatorType::file() const
{
    return d_ptr->mFile;
}

KDSoapValue BMS__SimpleFileLocatorType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__BMEssenceLocatorType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("SimpleFileLocatorType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mFile_nil) {
        KDSoapValue _valueFile(QString::fromLatin1("file"), QVariant::fromValue(d_ptr->mFile), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueFile.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueFile.setQualified(true);
        if (!_valueFile.isNil())
        args.append(_valueFile);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__SimpleFileLocatorType::deserialize( const KDSoapValue& mainValue )
{
    BMS__BMEssenceLocatorType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("file")) {// converter_complextype.cpp:273
            d_ptr->mFile = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mFile_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__SimpleFileLocatorType::BMS__SimpleFileLocatorType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__SimpleFileLocatorType::~BMS__SimpleFileLocatorType()
{
}

BMS__ResourceReferenceType *BMS__SimpleFileLocatorType::_kd_clone() const
{
    return new BMS__SimpleFileLocatorType(*this);
}

BMS__SimpleFileLocatorType::BMS__SimpleFileLocatorType( const BMS__SimpleFileLocatorType& other )
    : BMS__BMEssenceLocatorType( other ), d_ptr( other.d_ptr )
{
}

BMS__SimpleFileLocatorType&  BMS__SimpleFileLocatorType::operator=( const BMS__SimpleFileLocatorType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__BMEssenceLocatorType *>(this) = other;

    return *this;
}


class BMS__FolderLocatorType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mFolder;
    bool mFolder_nil;
};

BMS__FolderLocatorType::PrivateDPtr::PrivateDPtr()
    : mFolder_nil(true)
{
}


void BMS__FolderLocatorType::setFolder( const QString& folder )
{
    d_ptr->mFolder_nil = false;// converter_complextype.cpp:244
    d_ptr->mFolder = folder;
}

QString BMS__FolderLocatorType::folder() const
{
    return d_ptr->mFolder;
}

KDSoapValue BMS__FolderLocatorType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__BMEssenceLocatorType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("FolderLocatorType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    if (!d_ptr->mFolder_nil) {
        KDSoapValue _valueFolder(QString::fromLatin1("folder"), QVariant::fromValue(d_ptr->mFolder), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueFolder.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueFolder.setQualified(true);
        if (!_valueFolder.isNil())
        args.append(_valueFolder);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__FolderLocatorType::deserialize( const KDSoapValue& mainValue )
{
    BMS__BMEssenceLocatorType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("folder")) {// converter_complextype.cpp:273
            d_ptr->mFolder = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mFolder_nil = false;// converter_complextype.cpp:288
        }
    }
}

BMS__FolderLocatorType::BMS__FolderLocatorType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__FolderLocatorType::~BMS__FolderLocatorType()
{
}

BMS__ResourceReferenceType *BMS__FolderLocatorType::_kd_clone() const
{
    return new BMS__FolderLocatorType(*this);
}

BMS__FolderLocatorType::BMS__FolderLocatorType( const BMS__FolderLocatorType& other )
    : BMS__BMEssenceLocatorType( other ), d_ptr( other.d_ptr )
{
}

BMS__FolderLocatorType&  BMS__FolderLocatorType::operator=( const BMS__FolderLocatorType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__BMEssenceLocatorType *>(this) = other;

    return *this;
}


class BMS__ListFileLocatorType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QStringList mFile;
    bool mFile_nil;
};

BMS__ListFileLocatorType::PrivateDPtr::PrivateDPtr()
    : mFile_nil(true)
{
}


void BMS__ListFileLocatorType::setFile( const QStringList& file )
{
    d_ptr->mFile_nil = false;// converter_complextype.cpp:244
    d_ptr->mFile = file;
}

QStringList BMS__ListFileLocatorType::file() const
{
    return d_ptr->mFile;
}

KDSoapValue BMS__ListFileLocatorType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__BMEssenceLocatorType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://base.fims.tv"), QString::fromLatin1("ListFileLocatorType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    for (int i = 0; i < d_ptr->mFile.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueFile(QString::fromLatin1("file"), QVariant::fromValue(d_ptr->mFile.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));// elementargumentserializer.cpp:97
        _valueFile.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
        _valueFile.setQualified(true);
        args.append(_valueFile);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void BMS__ListFileLocatorType::deserialize( const KDSoapValue& mainValue )
{
    BMS__BMEssenceLocatorType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("file")) {// converter_complextype.cpp:273
            QString mFileTemp;// converter_complextype.cpp:331
            mFileTemp = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mFile.append(mFileTemp);// converter_complextype.cpp:339
        }
    }
}

BMS__ListFileLocatorType::BMS__ListFileLocatorType()
    : d_ptr(new PrivateDPtr)
{
}

BMS__ListFileLocatorType::~BMS__ListFileLocatorType()
{
}

BMS__ResourceReferenceType *BMS__ListFileLocatorType::_kd_clone() const
{
    return new BMS__ListFileLocatorType(*this);
}

BMS__ListFileLocatorType::BMS__ListFileLocatorType( const BMS__ListFileLocatorType& other )
    : BMS__BMEssenceLocatorType( other ), d_ptr( other.d_ptr )
{
}

BMS__ListFileLocatorType&  BMS__ListFileLocatorType::operator=( const BMS__ListFileLocatorType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__BMEssenceLocatorType *>(this) = other;

    return *this;
}


class TFMS__TransformProfileType::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    BMS__TransformAtomType mTransformAtom;
    QList< BMS__TransferAtomType > mTransferAtom;
    QString mOutputFileNamePattern;
    bool mOutputFileNamePattern_nil;
};

TFMS__TransformProfileType::PrivateDPtr::PrivateDPtr()
    : mOutputFileNamePattern_nil(true)
{
}


void TFMS__TransformProfileType::setTransformAtom( const BMS__TransformAtomType& transformAtom )
{
    d_ptr->mTransformAtom = transformAtom;
}

BMS__TransformAtomType TFMS__TransformProfileType::transformAtom() const
{
    return d_ptr->mTransformAtom;
}

void TFMS__TransformProfileType::setTransferAtom( const QList< BMS__TransferAtomType >& transferAtom )
{
    d_ptr->mTransferAtom = transferAtom;
}

QList< BMS__TransferAtomType > TFMS__TransformProfileType::transferAtom() const
{
    return d_ptr->mTransferAtom;
}

void TFMS__TransformProfileType::setOutputFileNamePattern( const QString& outputFileNamePattern )
{
    d_ptr->mOutputFileNamePattern_nil = false;// converter_complextype.cpp:244
    d_ptr->mOutputFileNamePattern = outputFileNamePattern;
}

QString TFMS__TransformProfileType::outputFileNamePattern() const
{
    return d_ptr->mOutputFileNamePattern;
}

KDSoapValue TFMS__TransformProfileType::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue = BMS__ProfileType::serialize(valueName);// converter_complextype.cpp:373
    mainValue.setType(QString::fromLatin1("http://transformmedia.fims.tv"), QString::fromLatin1("TransformProfileType"));
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:410
    mainValue.setQualified(true);// converter_complextype.cpp:412
    KDSoapValue _valueTransformAtom(d_ptr->mTransformAtom.serialize(QString::fromLatin1("transformAtom")));// elementargumentserializer.cpp:91
    _valueTransformAtom.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformAtom.setQualified(true);
    args.append(_valueTransformAtom);// elementargumentserializer.cpp:111
    for (int i = 0; i < d_ptr->mTransferAtom.count(); ++i) {// converter_complextype.cpp:475
        KDSoapValue _valueTransferAtom(d_ptr->mTransferAtom.at(i).serialize(QString::fromLatin1("transferAtom")));// elementargumentserializer.cpp:91
        _valueTransferAtom.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
        _valueTransferAtom.setQualified(true);
        args.append(_valueTransferAtom);// elementargumentserializer.cpp:111
    }
    if (!d_ptr->mOutputFileNamePattern_nil) {
        KDSoapValue _valueOutputFileNamePattern(QString::fromLatin1("outputFileNamePattern"), QVariant::fromValue(d_ptr->mOutputFileNamePattern), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:97
        _valueOutputFileNamePattern.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
        _valueOutputFileNamePattern.setQualified(true);
        if (!_valueOutputFileNamePattern.isNil())
        args.append(_valueOutputFileNamePattern);// elementargumentserializer.cpp:111
    }
    return mainValue;
}

void TFMS__TransformProfileType::deserialize( const KDSoapValue& mainValue )
{
    BMS__ProfileType::deserialize(mainValue);
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:406
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("transformAtom")) {// converter_complextype.cpp:273
            d_ptr->mTransformAtom.deserialize(val);// converter_complextype.cpp:290
        }
        else if (name == QLatin1String("transferAtom")) {// converter_complextype.cpp:273
            BMS__TransferAtomType mTransferAtomTemp;// converter_complextype.cpp:331
            mTransferAtomTemp.deserialize(val);// converter_complextype.cpp:290
            d_ptr->mTransferAtom.append(mTransferAtomTemp);// converter_complextype.cpp:339
        }
        else if (name == QLatin1String("outputFileNamePattern")) {// converter_complextype.cpp:273
            d_ptr->mOutputFileNamePattern = val.value().value<QString>();// converter_complextype.cpp:286
            d_ptr->mOutputFileNamePattern_nil = false;// converter_complextype.cpp:288
        }
    }
}

TFMS__TransformProfileType::TFMS__TransformProfileType()
    : d_ptr(new PrivateDPtr)
{
}

TFMS__TransformProfileType::~TFMS__TransformProfileType()
{
}

BMS__ResourceReferenceType *TFMS__TransformProfileType::_kd_clone() const
{
    return new TFMS__TransformProfileType(*this);
}

TFMS__TransformProfileType::TFMS__TransformProfileType( const TFMS__TransformProfileType& other )
    : BMS__ProfileType( other ), d_ptr( other.d_ptr )
{
}

TFMS__TransformProfileType&  TFMS__TransformProfileType::operator=( const TFMS__TransformProfileType& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;
    * static_cast<BMS__ProfileType *>(this) = other;

    return *this;
}


class TransformMediaService::TransformMediaBinding::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

TransformMediaService::TransformMediaBinding::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


TransformMediaService::TransformMediaBinding::TransformMediaBinding( QObject* parent )
    : QObject(parent), d_ptr(new PrivateDPtr)
{
}

TransformMediaService::TransformMediaBinding::~TransformMediaBinding()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void TransformMediaService::TransformMediaBinding::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void TransformMediaService::TransformMediaBinding::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void TransformMediaService::TransformMediaBinding::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString TransformMediaService::TransformMediaBinding::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *TransformMediaService::TransformMediaBinding::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("http://host/path/TransformMediaPort");
        const QString messageNamespace = QString::fromLatin1("http://transformmedia.fims.tv");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_1 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *TransformMediaService::TransformMediaBinding::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const TransformMediaBinding*>( this )->clientInterface() );
}

static void throwExceptionFault(const KDSoapValue &val)
{
    // helper function returning the <detail> tag of the fault element
    const KDSoapValue &detail = KDSoapFaultException::faultDetails(val);
    if (!detail.isNull() && !detail.isNil()) { // specific exception
        const KDSoapValue &faultValue = detail.childValues().first();
        QString ns = faultValue.namespaceUri();
        QString name = faultValue.name();
        if (name == TransformFaultException::faultElementName() && ns == TransformFaultException::faultElementNameSpace()) {
            TransformFaultException tfe;
            tfe.deserialize(val);
            throw tfe;
        }
    }
    KDSoapFaultException exception; // generic exception
    exception.deserialize(val);
    throw exception;
}

TFMS__TransformResponseType TransformMediaService::TransformMediaBinding::transform( const TFMS__TransformRequestType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/transform");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueTransformRequest(in.serialize(QString::fromLatin1("transformRequest")));
    _valueTransformRequest.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformRequest.setQualified(true);
    message = _valueTransformRequest;
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("transform"), message, action);
    if (d_ptr->m_lastReply.isFault()) {
        throwExceptionFault( d_ptr->m_lastReply );
    }
    TFMS__TransformResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);
    return ret;
}

void TransformMediaService::TransformMediaBinding::asyncTransform( const TFMS__TransformRequestType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/transform");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueTransformRequest(in.serialize(QString::fromLatin1("transformRequest")));// elementargumentserializer.cpp:91
    _valueTransformRequest.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformRequest.setQualified(true);
    message = _valueTransformRequest;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("transform"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotTransformFinished(KDSoapPendingCallWatcher*)));
}

void TransformMediaService::TransformMediaBinding::_kd_slotTransformFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT transformError(reply);// converter_clientstub.cpp:695
        Q_EMIT soapError(QLatin1String("transform"), reply);
    } else {
        TFMS__TransformResponseType ret;
        ret.deserialize(reply);// converter_clientstub.cpp:531
        Q_EMIT transformDone( ret );
    }
    watcher->deleteLater();
}


class TransformMediaService::TransformMediaStatusBinding::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

TransformMediaService::TransformMediaStatusBinding::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


TransformMediaService::TransformMediaStatusBinding::TransformMediaStatusBinding( QObject* parent )
    : QObject(parent), d_ptr(new PrivateDPtr)
{
}

TransformMediaService::TransformMediaStatusBinding::~TransformMediaStatusBinding()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void TransformMediaService::TransformMediaStatusBinding::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void TransformMediaService::TransformMediaStatusBinding::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void TransformMediaService::TransformMediaStatusBinding::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString TransformMediaService::TransformMediaStatusBinding::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *TransformMediaService::TransformMediaStatusBinding::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("http://host/path/TransformMediaStatusPort");
        const QString messageNamespace = QString::fromLatin1("http://transformmedia.fims.tv");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_1 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *TransformMediaService::TransformMediaStatusBinding::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const TransformMediaStatusBinding*>( this )->clientInterface() );
}

BMS__ManageJobResponseType TransformMediaService::TransformMediaStatusBinding::manageJob( const BMS__ManageJobRequestType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/manageJob");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueManageJobRequest(in.serialize(QString::fromLatin1("manageJobRequest")));// elementargumentserializer.cpp:91
    _valueManageJobRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueManageJobRequest.setQualified(true);
    message = _valueManageJobRequest;// elementargumentserializer.cpp:111
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("manageJob"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return BMS__ManageJobResponseType();
    BMS__ManageJobResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:531
    return ret;// converter_clientstub.cpp:585
}

void TransformMediaService::TransformMediaStatusBinding::asyncManageJob( const BMS__ManageJobRequestType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/manageJob");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueManageJobRequest(in.serialize(QString::fromLatin1("manageJobRequest")));// elementargumentserializer.cpp:91
    _valueManageJobRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueManageJobRequest.setQualified(true);
    message = _valueManageJobRequest;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("manageJob"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotManageJobFinished(KDSoapPendingCallWatcher*)));
}

void TransformMediaService::TransformMediaStatusBinding::_kd_slotManageJobFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT manageJobError(reply);// converter_clientstub.cpp:695
        Q_EMIT soapError(QLatin1String("manageJob"), reply);
    } else {
        BMS__ManageJobResponseType ret;
        ret.deserialize(reply);// converter_clientstub.cpp:531
        Q_EMIT manageJobDone( ret );
    }
    watcher->deleteLater();
}

BMS__ManageQueueResponseType TransformMediaService::TransformMediaStatusBinding::manageQueue( const BMS__ManageQueueRequestType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/manageQueue");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueManageQueueRequest(in.serialize(QString::fromLatin1("manageQueueRequest")));// elementargumentserializer.cpp:91
    _valueManageQueueRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueManageQueueRequest.setQualified(true);
    message = _valueManageQueueRequest;// elementargumentserializer.cpp:111
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("manageQueue"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return BMS__ManageQueueResponseType();
    BMS__ManageQueueResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:531
    return ret;// converter_clientstub.cpp:585
}

void TransformMediaService::TransformMediaStatusBinding::asyncManageQueue( const BMS__ManageQueueRequestType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/manageQueue");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueManageQueueRequest(in.serialize(QString::fromLatin1("manageQueueRequest")));// elementargumentserializer.cpp:91
    _valueManageQueueRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueManageQueueRequest.setQualified(true);
    message = _valueManageQueueRequest;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("manageQueue"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotManageQueueFinished(KDSoapPendingCallWatcher*)));
}

void TransformMediaService::TransformMediaStatusBinding::_kd_slotManageQueueFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT manageQueueError(reply);// converter_clientstub.cpp:695
        Q_EMIT soapError(QLatin1String("manageQueue"), reply);
    } else {
        BMS__ManageQueueResponseType ret;
        ret.deserialize(reply);// converter_clientstub.cpp:531
        Q_EMIT manageQueueDone( ret );
    }
    watcher->deleteLater();
}

BMS__QueryJobResponseType TransformMediaService::TransformMediaStatusBinding::queryJob( const BMS__QueryJobRequestType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/queryJob");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueQueryJobRequest(in.serialize(QString::fromLatin1("queryJobRequest")));// elementargumentserializer.cpp:91
    _valueQueryJobRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueQueryJobRequest.setQualified(true);
    message = _valueQueryJobRequest;// elementargumentserializer.cpp:111
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("queryJob"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return BMS__QueryJobResponseType();
    BMS__QueryJobResponseType ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:531
    return ret;// converter_clientstub.cpp:585
}

void TransformMediaService::TransformMediaStatusBinding::asyncQueryJob( const BMS__QueryJobRequestType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/queryJob");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueQueryJobRequest(in.serialize(QString::fromLatin1("queryJobRequest")));// elementargumentserializer.cpp:91
    _valueQueryJobRequest.setNamespaceUri(QString::fromLatin1("http://base.fims.tv"));
    _valueQueryJobRequest.setQualified(true);
    message = _valueQueryJobRequest;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("queryJob"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotQueryJobFinished(KDSoapPendingCallWatcher*)));
}

void TransformMediaService::TransformMediaStatusBinding::_kd_slotQueryJobFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT queryJobError(reply);// converter_clientstub.cpp:695
        Q_EMIT soapError(QLatin1String("queryJob"), reply);
    } else {
        BMS__QueryJobResponseType ret;
        ret.deserialize(reply);// converter_clientstub.cpp:531
        Q_EMIT queryJobDone( ret );
    }
    watcher->deleteLater();
}


class TransformMediaNotificationService::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

TransformMediaNotificationService::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


TransformMediaNotificationService::TransformMediaNotificationService( QObject* parent )
    : QObject(parent), d_ptr(new PrivateDPtr)
{
}

TransformMediaNotificationService::~TransformMediaNotificationService()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void TransformMediaNotificationService::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void TransformMediaNotificationService::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void TransformMediaNotificationService::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString TransformMediaNotificationService::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *TransformMediaNotificationService::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("http://host/path/TransformMediaNotificationPort");
        const QString messageNamespace = QString::fromLatin1("http://transformmedia.fims.tv");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_1 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *TransformMediaNotificationService::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const TransformMediaNotificationService*>( this )->clientInterface() );
}

void TransformMediaNotificationService::notifyTransformResult( const TFMS__TransformNotificationType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/notifyTransformResult");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueTransformNotification(in.serialize(QString::fromLatin1("transformNotification")));// elementargumentserializer.cpp:91
    _valueTransformNotification.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformNotification.setQualified(true);
    message = _valueTransformNotification;// elementargumentserializer.cpp:111
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("notifyTransformResult"), message, action);
}

void TransformMediaNotificationService::asyncNotifyTransformResult( const TFMS__TransformNotificationType& in )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/notifyTransformResult");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueTransformNotification(in.serialize(QString::fromLatin1("transformNotification")));// elementargumentserializer.cpp:91
    _valueTransformNotification.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformNotification.setQualified(true);
    message = _valueTransformNotification;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("notifyTransformResult"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotNotifyTransformResultFinished(KDSoapPendingCallWatcher*)));
}

void TransformMediaNotificationService::_kd_slotNotifyTransformResultFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT notifyTransformResultError(reply);// converter_clientstub.cpp:695
        Q_EMIT soapError(QLatin1String("notifyTransformResult"), reply);
    } else {
        Q_EMIT notifyTransformResultDone(  );
    }
    watcher->deleteLater();
}

void TransformMediaNotificationService::notifyFault( const TFMS__TransformFaultNotificationType& fault )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/notifyFault");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueTransformFaultNotification(fault.serialize(QString::fromLatin1("transformFaultNotification")));// elementargumentserializer.cpp:91
    _valueTransformFaultNotification.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformFaultNotification.setQualified(true);
    message = _valueTransformFaultNotification;// elementargumentserializer.cpp:111
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("notifyFault"), message, action);
}

void TransformMediaNotificationService::asyncNotifyFault( const TFMS__TransformFaultNotificationType& fault )
{
    const QString action = QString::fromLatin1("http://transformmedia.fims.tv/notifyFault");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueTransformFaultNotification(fault.serialize(QString::fromLatin1("transformFaultNotification")));// elementargumentserializer.cpp:91
    _valueTransformFaultNotification.setNamespaceUri(QString::fromLatin1("http://transformmedia.fims.tv"));
    _valueTransformFaultNotification.setQualified(true);
    message = _valueTransformFaultNotification;// elementargumentserializer.cpp:111
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("notifyFault"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotNotifyFaultFinished(KDSoapPendingCallWatcher*)));
}

void TransformMediaNotificationService::_kd_slotNotifyFaultFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT notifyFaultError(reply);// converter_clientstub.cpp:695
        Q_EMIT soapError(QLatin1String("notifyFault"), reply);
    } else {
        Q_EMIT notifyFaultDone(  );
    }
    watcher->deleteLater();
}
